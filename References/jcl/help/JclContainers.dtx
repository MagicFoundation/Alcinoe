## Help groups that do not belong to a specific documentation file.
--------------------------------------------------------------------------------
@@JCL_Containers
<TITLE JEDI Code Library Containers>
--------------------------------------------------------------------------------
@@Algorithms
<GROUP JCL_Containers>
<TITLE Algorithms>
<TOPICORDER 100>
--------------------------------------------------------------------------------
@@Algorithms.Searching
<GROUP Algorithms>
<TITLE Searching>
<TOPICORDER 100>
--------------------------------------------------------------------------------
@@Algorithms.Sorting
<GROUP Algorithms>
<TITLE Sorting>
<TOPICORDER 200>
--------------------------------------------------------------------------------
@@Containers
<GROUP JCL_Containers>
<TITLE Containers>
<TOPICORDER 300>
--------------------------------------------------------------------------------
@@Containers.Interfaces
<GROUP Containers>
<TITLE Container interfaces>
<TOPICORDER 100>
--------------------------------------------------------------------------------
@@Containers.Sequence
<GROUP Containers>
<TITLE Sequence containers>
<TOPICORDER 200>
These containers hold sequences of data elements.
--------------------------------------------------------------------------------
@@Containers.Sequence.Vectors
<GROUP Containers.Sequence>
<TITLE Vectors>
<TOPICORDER 100>
Vectors provide a dynamic array structure with fast random access to any element.
Inserting and deleting elements at the end is fast. Can do subscript bounds checking.
--------------------------------------------------------------------------------
@@Containers.Sequence.LinkedLists
<GROUP Containers.Sequence>
<TITLE Linked Lists>
<TOPICORDER 200>
Doubly linked list. There is no random access to the elements.
Insertion and deletion anywhere is fast.
--------------------------------------------------------------------------------
@@Containers.Associative
<GROUP Containers>
<TITLE Associative containers>
<TOPICORDER 300>
Associative containers contain key/value pairs, providing access to each value
using a key. The elements are sorted by the key. Usually implemented as a
balanced binary tree.
--------------------------------------------------------------------------------
@@Containers.Associative.Maps
<GROUP Containers.Associative>
<TITLE Maps>
<TOPICORDER 100>
Maps provide access to elements using any type of key. This is a generalization
of the idea of accessing a vector with an integer subscript.
--------------------------------------------------------------------------------
@@Containers.Associative.Multimaps
<GROUP Containers.Associative>
<TITLE Multimaps>
<TOPICORDER 200>
Multimaps are maps which allow a key to map into more than one element.
--------------------------------------------------------------------------------
@@Containers.OrderedSets
<GROUP Containers>
<TITLE Ordered sets>
<TOPICORDER 400>
The set containers keep the elements in them in order, and are usually
implemented as balanced binary trees. They implement standard set
operations (union, intersection, ...) as you might expect from the name.
--------------------------------------------------------------------------------
@@Containers.Adapters
<GROUP Containers>
<TITLE Container adapters>
<TOPICORDER 500>
These are based on other containers, and are used only to enforce access rules.
Because there are special access restrictions, they have no iterators.
--------------------------------------------------------------------------------
@@Containers.Adapters.Stacks
<GROUP Containers.Adapters>
<TITLE Stacks>
<TOPICORDER 100>
Stacks allow only LIFO (Last In, First Out) access.
--------------------------------------------------------------------------------
@@Containers.Adapters.Queues
<GROUP Containers.Adapters>
<TITLE Queues>
<TOPICORDER 200>
Queues allow only FIFO (First In, First Out) access.
--------------------------------------------------------------------------------
@@Containers.Specialized
<GROUP Containers>
<TITLE Specialized containers>
<TOPICORDER 600>
The following containers are specialized in some ways: specific data type,
special utility routines, limited, but fast, implementations.
--------------------------------------------------------------------------------
@@Containers.Specialized.Arrays
<GROUP Containers.Specialized>
<TITLE Arrays>
<TOPICORDER 100>
valarray is an especially efficient implementation of arrays, but it doesn't
have all the standard container behavior.
@@Containers.files
<GROUP Containers>
<title Container files>
\ \ 
--------------------------------------------------------------------------------
@@Containers.functions
<GROUP Containers>
<title Container functions>
\ \ 
--------------------------------------------------------------------------------
@@Containers.exceptions
<GROUP Containers>
<title Container exceptions>
\ \ 
--------------------------------------------------------------------------------
@@Containres.Interfaces.Maps
<GROUP Containers>
<title Maps>
\ \ 
--------------------------------------------------------------------------------

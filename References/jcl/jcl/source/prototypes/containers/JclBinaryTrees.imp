(*$JPPDEFINEMACRO JCLBINARYTREEITRIMP(BASEITRCLASSNAME, PREORDERITRCLASSNAME, INORDERITRCLASSNAME, POSTORDERITRCLASSNAME,
  STDITRINTERFACENAME, COLLECTIONINTERFACENAME, EQUALITYCOMPARERINTERFACENAME,
  NODETYPENAME, CONSTKEYWORD, PARAMETERNAME, TYPENAME, DEFAULTVALUE, GETTERFUNCTIONNAME, SETTERPROCEDURENAME, RELEASERFUNCTIONNAME)
//=== { BASEITRCLASSNAME } ===========================================================

constructor BASEITRCLASSNAME.Create(const AOwnTree: COLLECTIONINTERFACENAME; ACursor: NODETYPENAME; AValid: Boolean; AStart: TItrStart);
begin
  inherited Create(AValid);
  FCursor := ACursor;
  FStart := AStart;
  FOwnTree := AOwnTree;
  FEqualityComparer := AOwnTree as EQUALITYCOMPARERINTERFACENAME;
end;

function BASEITRCLASSNAME.Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
begin
  Result := FOwnTree.Add(PARAMETERNAME);
end;

function BASEITRCLASSNAME.AddChild(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
begin
  raise EJclOperationNotSupportedError.Create;
end;

procedure BASEITRCLASSNAME.AssignPropertiesTo(Dest: TJclAbstractIterator);
var
  ADest: BASEITRCLASSNAME;
begin
  inherited AssignPropertiesTo(Dest);
  if Dest is BASEITRCLASSNAME then
  begin
    ADest := BASEITRCLASSNAME(Dest);
    ADest.FCursor := FCursor;
    ADest.FOwnTree := FOwnTree;
    ADest.FEqualityComparer := FEqualityComparer;
    ADest.FStart := FStart;
  end;
end;

function BASEITRCLASSNAME.ChildrenCount: Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := 0;
    if FCursor <> nil then
    begin
      if FCursor.Left <> nil then
        Inc(Result);
      if FCursor.Right <> nil then
        Inc(Result);
    end;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

procedure BASEITRCLASSNAME.DeleteChild(Index: Integer);
begin
  raise EJclOperationNotSupportedError.Create;
end;

procedure BASEITRCLASSNAME.DeleteChildren;
begin
  raise EJclOperationNotSupportedError.Create;
end;

procedure BASEITRCLASSNAME.Extract;
var
  OldCursor: NODETYPENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    CheckValid;
    Valid := False;
    OldCursor := FCursor;
    if OldCursor <> nil then
    begin
      repeat
        FCursor := GetNextCursor;
      until (FCursor = nil) or FOwnTree.RemoveSingleElement
        or (not FEqualityComparer.ItemsEqual(OldCursor.Value, FCursor.Value));
      FOwnTree.Extract(OldCursor.Value);
    end;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

procedure BASEITRCLASSNAME.ExtractChild(Index: Integer);
begin
  raise EJclOperationNotSupportedError.Create;
end;

procedure BASEITRCLASSNAME.ExtractChildren;
begin
  raise EJclOperationNotSupportedError.Create;
end;

function BASEITRCLASSNAME.GetChild(Index: Integer): TYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := DEFAULTVALUE;
    if (FCursor <> nil) and (Index = 0) and (FCursor.Left <> nil) then
      FCursor := FCursor.Left
    else
    if (FCursor <> nil) and (Index = 0) then
      FCursor := FCursor.Right
    else
    if (FCursor <> nil) and (Index = 1) then
      FCursor := FCursor.Right
    else
      FCursor := nil;
    if FCursor <> nil then
      Result := FCursor.Value
    else
    if not FOwnTree.ReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.GETTERFUNCTIONNAME: TYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    CheckValid;
    Result := DEFAULTVALUE;
    if FCursor <> nil then
      Result := FCursor.Value
    else
    if not FOwnTree.ReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.HasChild(Index: Integer): Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    if (FCursor <> nil) and (Index = 0) then
      Result := (FCursor.Left <> nil) or (FCursor.Right <> nil)
    else
    if (FCursor <> nil) and (Index = 1) then
      Result := (FCursor.Left <> nil) and (FCursor.Right <> nil)
    else
      Result := False;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.HasLeft: Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := (FCursor <> nil) and (FCursor.Left <> nil);
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.HasNext: Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    if Valid then
      Result := GetNextCursor <> nil
    else
      Result := FCursor <> nil;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.HasParent: Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := (FCursor <> nil) and (FCursor.Parent <> nil);
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.HasPrevious: Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    if Valid then
      Result := GetPreviousCursor <> nil
    else
      Result := FCursor <> nil;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.HasRight: Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := (FCursor <> nil) and (FCursor.Right <> nil);
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.IndexOfChild(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := -1;
    if FCursor <> nil then
    begin
      if FCursor.Left <> nil then
      begin
        if FEqualityComparer.ItemsEqual(FCursor.Left.Value, PARAMETERNAME) then
          Result := 0
        else
        if (FCursor.Right <> nil) and FEqualityComparer.ItemsEqual(FCursor.Right.Value, PARAMETERNAME) then
          Result := 1;
      end
      else
      if (FCursor.Right <> nil) and FEqualityComparer.ItemsEqual(FCursor.Right.Value, PARAMETERNAME) then
        Result := 0;
    end;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.Insert(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
begin
  raise EJclOperationNotSupportedError.Create;
end;

function BASEITRCLASSNAME.InsertChild(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
begin
  raise EJclOperationNotSupportedError.Create;
end;

function BASEITRCLASSNAME.IteratorEquals(const AIterator: STDITRINTERFACENAME): Boolean;
var
  Obj: TObject;
  ItrObj: BASEITRCLASSNAME;
begin
  Result := False;
  if AIterator = nil then
    Exit;
  Obj := AIterator.GetIteratorReference;
  if Obj is BASEITRCLASSNAME then
  begin
    ItrObj := BASEITRCLASSNAME(Obj);
    Result := (FOwnTree = ItrObj.FOwnTree) and (FCursor = ItrObj.FCursor) and (Valid = ItrObj.Valid);
  end;
end;

function BASEITRCLASSNAME.Left: TYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := DEFAULTVALUE;
    if FCursor <> nil then
      FCursor := FCursor.Left;
    if FCursor <> nil then
      Result := FCursor.Value
    else
    if not FOwnTree.ReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

{$IFDEF SUPPORTS_FOR_IN}
function BASEITRCLASSNAME.MoveNext: Boolean;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    if Valid then
      FCursor := GetNextCursor
    else
      Valid := True;
    Result := FCursor <> nil;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;
{$ENDIF SUPPORTS_FOR_IN}

function BASEITRCLASSNAME.Next: TYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    if Valid then
      FCursor := GetNextCursor
    else
      Valid := True;
    Result := DEFAULTVALUE;
    if FCursor <> nil then
      Result := FCursor.Value
    else
    if not FOwnTree.ReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.NextIndex: Integer;
begin
  // No index
  raise EJclOperationNotSupportedError.Create;
end;

function BASEITRCLASSNAME.Parent: TYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := DEFAULTVALUE;
    if FCursor <> nil then
      FCursor := FCursor.Parent;
    if FCursor <> nil then
      Result := FCursor.Value
    else
    if not FOwnTree.ReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.Previous: TYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    if Valid then
      FCursor := GetPreviousCursor
    else
      Valid := True;
    Result := DEFAULTVALUE;
    if FCursor <> nil then
      Result := FCursor.Value
    else
    if not FOwnTree.ReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.PreviousIndex: Integer;
begin
  // No index
  raise EJclOperationNotSupportedError.Create;
end;

procedure BASEITRCLASSNAME.Remove;
var
  OldCursor: NODETYPENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    CheckValid;
    Valid := False;
    OldCursor := FCursor;
    if OldCursor <> nil then
    begin
      repeat
        FCursor := GetNextCursor;
      until (FCursor = nil) or FOwnTree.RemoveSingleElement
        or (not FEqualityComparer.ItemsEqual(OldCursor.Value, FCursor.Value));
      FOwnTree.Remove(OldCursor.Value);
    end;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

procedure BASEITRCLASSNAME.Reset;
var
  NewCursor: NODETYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Valid := False;
    case FStart of
      isFirst:
        begin
          NewCursor := FCursor;
          while NewCursor <> nil do
          begin
            NewCursor := GetPreviousCursor;
            if NewCursor <> nil then
              FCursor := NewCursor;
          end;
        end;
      isLast:
        begin
          NewCursor := FCursor;
          while NewCursor <> nil do
          begin
            NewCursor := GetNextCursor;
            if NewCursor <> nil then
              FCursor := NewCursor;
          end;
        end;
      isRoot:
        begin
          while (FCursor <> nil) and (FCursor.Parent <> nil) do
            FCursor := FCursor.Parent;
        end;
    end;
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

function BASEITRCLASSNAME.Right: TYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO DELEGATELOCK(FOwnTree)}
    Result := DEFAULTVALUE;
    if FCursor <> nil then
      FCursor := FCursor.Right;
    if FCursor <> nil then
      Result := FCursor.Value
    else
    if not FOwnTree.ReturnDefaultElements then
      raise EJclNoSuchElementError.Create('');
  {$JPPEXPANDMACRO DELEGATEUNLOCK(FOwnTree)}
end;

procedure BASEITRCLASSNAME.SetChild(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME);
begin
  raise EJclOperationNotSupportedError.Create;
end;

procedure BASEITRCLASSNAME.SETTERPROCEDURENAME(CONSTKEYWORDPARAMETERNAME: TYPENAME);
begin
  raise EJclOperationNotSupportedError.Create;
end;

//=== { PREORDERITRCLASSNAME } ===================================================

function PREORDERITRCLASSNAME.CreateEmptyIterator: TJclAbstractIterator;
begin
  Result := PREORDERITRCLASSNAME.Create(FOwnTree, FCursor, Valid, FStart);
end;

function PREORDERITRCLASSNAME.GetNextCursor: NODETYPENAME;
var
  LastRet: NODETYPENAME;
begin
  Result := FCursor;
  if Result = nil then
    Exit;
  LastRet := Result;
  if Result.Left <> nil then
    Result := Result.Left
  else
  if Result.Right <> nil then
    Result := Result.Right
  else
  begin
    Result := Result.Parent;
    while (Result <> nil) and ((Result.Right = nil) or (Result.Right = LastRet)) do
    begin
      LastRet := Result;
      Result := Result.Parent;
    end;
    if Result <> nil then // not root
      Result := Result.Right;
  end;
end;

function PREORDERITRCLASSNAME.GetPreviousCursor: NODETYPENAME;
var
  LastRet: NODETYPENAME;
begin
  Result := FCursor;
  if Result = nil then
    Exit;
  LastRet := Result;
  Result := Result.Parent;
  if (Result <> nil) and (Result.Left <> LastRet) and (Result.Left <> nil)  then
    // come from Right
  begin
    Result := Result.Left;
    while (Result.Left <> nil) or (Result.Right <> nil) do // both childs
    begin
      if Result.Right <> nil then // right child first
        Result := Result.Right
      else
        Result := Result.Left;
    end;
  end;
end;

//=== { INORDERITRCLASSNAME } ====================================================

function INORDERITRCLASSNAME.CreateEmptyIterator: TJclAbstractIterator;
begin
  Result := INORDERITRCLASSNAME.Create(FOwnTree, FCursor, Valid, FStart);
end;

function INORDERITRCLASSNAME.GetNextCursor: NODETYPENAME;
var
  LastRet: NODETYPENAME;
begin
  Result := FCursor;
  if Result = nil then
    Exit;
  if Result.Right <> nil then
  begin
    Result := Result.Right;
    while (Result.Left <> nil) do
      Result := Result.Left;
  end
  else
  begin
    LastRet := Result;
    Result := Result.Parent;
    while (Result <> nil) and (Result.Right = LastRet) do
    begin
      LastRet := Result;
      Result := Result.Parent;
    end;
  end;
end;

function INORDERITRCLASSNAME.GetPreviousCursor: NODETYPENAME;
var
  LastRet: NODETYPENAME;
begin
  Result := FCursor;
  if Result = nil then
    Exit;
  if Result.Left <> nil then
  begin
    Result := Result.Left;
    while Result.Right <> nil do
      Result := Result.Right;
  end
  else
  begin
    LastRet := Result;
    Result := Result.Parent;
    while (Result <> nil) and (Result.Right <> LastRet) do // Come from Left
    begin
      LastRet := Result;
      Result := Result.Parent;
    end;
  end;
end;

//=== { POSTORDERITRCLASSNAME } ==================================================

function POSTORDERITRCLASSNAME.CreateEmptyIterator: TJclAbstractIterator;
begin
  Result := POSTORDERITRCLASSNAME.Create(FOwnTree, FCursor, Valid, FStart);
end;

function POSTORDERITRCLASSNAME.GetNextCursor: NODETYPENAME;
var
  LastRet: NODETYPENAME;
begin
  Result := FCursor;
  if Result = nil then
    Exit;
  LastRet := Result;
  Result := Result.Parent;
  if (Result <> nil) and (Result.Right <> nil) and (Result.Right <> LastRet) then
  begin
    Result := Result.Right;
    while (Result.Left <> nil) or (Result.Right <> nil) do
    begin
      if Result.Left <> nil then
        Result := Result.Left
      else
        Result := Result.Right;
    end;
  end;
end;

function POSTORDERITRCLASSNAME.GetPreviousCursor: NODETYPENAME;
var
  LastRet: NODETYPENAME;
begin
  Result := FCursor;
  if Result = nil then
    Exit;
  if Result.Right <> nil then
    Result := Result.Right
  else
  if Result.Left <> nil then
    Result := Result.Left
  else
  begin
    LastRet := Result;
    Result := Result.Parent;
    while (Result <> nil) and ((Result.Left = nil) or (Result.Left = LastRet)) do
    begin
      LastRet := Result;
      Result := Result.Parent;
    end;
    if Result <> nil then // not root
      Result := Result.Left;
  end;
end;*)
(*$JPPDEFINEMACRO JCLBINARYTREEIMP(SELFCLASSNAME, NODETYPENAME, PREORDERITRCLASSNAME, INORDERITRCLASSNAME, POSTORDERITRCLASSNAME,
  COLLECTIONINTERFACENAME, STDITRINTERFACENAME, TREEITRINTERFACENAME,
  CONSTRUCTORDECLARATIONS, CONSTRUCTORASSIGNMENTS, OWNERSHIPDECLARATION, OWNERSHIPPARAMETERNAME, CONSTKEYWORD, PARAMETERNAME, TYPENAME, DEFAULTVALUE, RELEASERFUNCTIONNAME)
//=== { SELFCLASSNAME } =================================================

constructor SELFCLASSNAME.Create(CONSTRUCTORDECLARATIONSOWNERSHIPDECLARATION);
begin
  inherited Create(OWNERSHIPPARAMETERNAME);
  FTraverseOrder := toOrder;
  FMaxDepth := 0;
  FAutoPackParameter := 2;CONSTRUCTORASSIGNMENTS
end;

destructor SELFCLASSNAME.Destroy;
begin
  FReadOnly := False;
  Clear;
  inherited Destroy;
end;

function SELFCLASSNAME.Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
var
  NewNode, Current, Save: NODETYPENAME;
  Comp, Depth: Integer;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    // Insert into right place
    if FAllowDefaultElements or not ItemsEqual(PARAMETERNAME, DEFAULTVALUE) then
    begin
      Save := nil;
      Current := FRoot;
      Comp := 1;
      Depth := 0;
      while Current <> nil do
      begin
        Inc(Depth);
        Save := Current;
        Comp := ItemsCompare(PARAMETERNAME, Current.Value);
        if Comp < 0 then
          Current := Current.Left
        else
        if Comp > 0 then
          Current := Current.Right
        else
        if CheckDuplicate then
          Current := Current.Left // arbitrary decision
        else
          Break;
      end;
      if (Comp <> 0) or CheckDuplicate then
      begin
        NewNode := NODETYPENAME.Create;
        NewNode.Value := PARAMETERNAME;
        NewNode.Parent := Save;
        if Save = nil then
          FRoot := NewNode
        else
        if ItemsCompare(NewNode.Value, Save.Value) <= 0 then
          Save.Left := NewNode
        else
          Save.Right := NewNode;
        Inc(FSize);
        Inc(Depth);
        if Depth > FMaxDepth then
          FMaxDepth := Depth;
        Result := True;
        AutoPack;
      end
      else
        Result := False;
    end
    else
      Result := False;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.AddAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;
var
  It: STDITRINTERFACENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    if ACollection = nil then
      Exit;
    Result := True;
    It := ACollection.First;
    while It.HasNext do
      Result := Add(It.Next) and Result;
  {$JPPEXPANDMACRO UNLOCK}
end;

procedure SELFCLASSNAME.AssignDataTo(Dest: TJclAbstractContainerBase);
var
  ADest: SELFCLASSNAME;
  ACollection: COLLECTIONINTERFACENAME;
begin
  inherited AssignDataTo(Dest);
  if Dest is SELFCLASSNAME then
  begin
    ADest := SELFCLASSNAME(Dest);
    ADest.Clear;
    ADest.FSize := FSize;
    if FRoot <> nil then
      ADest.FRoot := CloneNode(FRoot, nil);
  end
  else
  if Supports(IInterface(Dest), COLLECTIONINTERFACENAME, ACollection) then
  begin
    ACollection.Clear;
    ACollection.AddAll(Self);
  end;
end;

procedure SELFCLASSNAME.AssignPropertiesTo(Dest: TJclAbstractContainerBase);
begin
  inherited AssignPropertiesto(Dest);
  if Dest is SELFCLASSNAME then
    SELFCLASSNAME(Dest).FTraverseOrder := FTraverseOrder;
end;

procedure SELFCLASSNAME.AutoPack;
begin
  case FAutoPackStrategy of
    //apsDisabled: ;
    apsAgressive:
      if (FMaxDepth > 1) and (((1 shl (FMaxDepth - 1)) - 1) > FSize) then
        Pack;
    // apsIncremental: ;
    apsProportional:
      if (FMaxDepth > FAutoPackParameter) and (((1 shl (FMaxDepth - FAutoPackParameter)) - 1) > FSize) then
        Pack;
  end;
end;

function SELFCLASSNAME.BuildTree(const LeafArray: array of NODETYPENAME; Left, Right: Integer; Parent: NODETYPENAME;
  Offset: Integer): NODETYPENAME;
var
  Middle: Integer;
begin
  Middle := (Left + Right + Offset) shr 1;
  Result := LeafArray[Middle];
  Result.Parent := Parent;
  if Middle > Left then
    Result.Left := BuildTree(LeafArray, Left, Middle - 1, Result, 0)
  else
    Result.Left := nil;
  if Middle < Right then
    Result.Right := BuildTree(LeafArray, Middle + 1, Right, Result, 1)
  else
    Result.Right := nil;
end;

procedure SELFCLASSNAME.Clear;
var
  Current, Parent: NODETYPENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    // postorder
    Current := FRoot;
    if Current = nil then
      Exit;
    // find first in post-order
    while (Current.Left <> nil) or (Current.Right <> nil) do
    begin
      if Current.Left <> nil then
        Current := Current.Left
      else
        Current := Current.Right;
    end;
    // for all items in the tree in post-order
    repeat
      Parent := Current.Parent;
      // remove reference
      if Parent <> nil then
      begin
        if Parent.Left = Current then
          Parent.Left := nil
        else
        if Parent.Right = Current then
          Parent.Right := nil;
      end;

      // free item
      RELEASERFUNCTIONNAME(Current.Value);
      Current.Free;

      // find next item
      Current := Parent;
      if (Current <> nil) and (Current.Right <> nil) then
      begin
        Current := Current.Right;
        while (Current.Left <> nil) or (Current.Right <> nil) do
        begin
          if Current.Left <> nil then
            Current := Current.Left
          else
            Current := Current.Right;
        end;
      end;
    until Current = nil;
    FRoot := nil;
    FSize := 0;
    FMaxDepth := 0;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.CloneNode(Node, Parent: NODETYPENAME): NODETYPENAME;
begin
  Result := NODETYPENAME.Create;
  Result.Value := Node.Value;
  Result.Parent := Parent;
  if Node.Left <> nil then
    Result.Left := CloneNode(Node.Left, Result); // recursive call
  if Node.Right <> nil then
    Result.Right := CloneNode(Node.Right, Result); // recursive call
end;

function SELFCLASSNAME.CollectionEquals(const ACollection: COLLECTIONINTERFACENAME): Boolean;
var
  It, ItSelf: STDITRINTERFACENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    if ACollection = nil then
      Exit;
    if FSize <> ACollection.Size then
      Exit;
    Result := True;
    It := ACollection.First;
    ItSelf := First;
    while ItSelf.HasNext do
      if not ItemsEqual(ItSelf.Next, It.Next) then
      begin
        Result := False;
        Break;
      end;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.Contains(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
var
  Comp: Integer;
  Current: NODETYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    Current := FRoot;
    while Current <> nil do
    begin
      Comp := ItemsCompare(Current.Value, PARAMETERNAME);
      if Comp = 0 then
      begin
        Result := True;
        Break;
      end
      else
      if Comp > 0 then
        Current := Current.Left
      else
        Current := Current.Right;
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.ContainsAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;
var
  It: STDITRINTERFACENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Result := True;
    if ACollection = nil then
      Exit;
    It := ACollection.First;
    while Result and It.HasNext do
      Result := Contains(It.Next);
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.Extract(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
var
  Current, Successor: NODETYPENAME;
  Comp: Integer;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    // locate PARAMETERNAME in the tree
    Current := FRoot;
    repeat
      while Current <> nil do
      begin
        Comp := ItemsCompare(PARAMETERNAME, Current.Value);
        if Comp = 0 then
          Break
        else
        if Comp < 0 then
         Current := Current.Left
        else
          Current := Current.Right;
      end;
      if Current = nil then
        Break;
      Result := True;
      // Remove Current from tree
      if (Current.Left = nil) and (Current.Right <> nil) then
      begin
        // remove references to Current
        Current.Right.Parent := Current.Parent;
        if Current.Parent <> nil then
        begin
          if Current.Parent.Left = Current then
            Current.Parent.Left := Current.Right
          else
            Current.Parent.Right := Current.Right;
        end
        else
          // fix root
          FRoot := Current.Right;
        Successor := Current.Parent;
        if Successor = nil then
          Successor := FRoot;
      end
      else
      if (Current.Left <> nil) and (Current.Right = nil) then
      begin
        // remove references to Current
        Current.Left.Parent := Current.Parent;
        if Current.Parent <> nil then
        begin
          if Current.Parent.Left = Current then
            Current.Parent.Left := Current.Left
          else
            Current.Parent.Right := Current.Left;
        end
        else
          // fix root
          FRoot := Current.Left;
        Successor := Current.Parent;
        if Successor = nil then
          Successor := FRoot;
      end
      else
      if (Current.Left <> nil) and (Current.Right <> nil) then
      begin
        // find the successor in tree
        Successor := Current.Right;
        while Successor.Left <> nil do
          Successor := Successor.Left;

        if Successor <> Current.Right then
        begin
          // remove references to successor
          Successor.Parent.Left := Successor.Right;
          if Successor.Right <> nil then
            Successor.Right.Parent := Successor.Parent;
          Successor.Right := Current.Right;
          if Successor.Right <> nil then
            Successor.Right.Parent := Successor;
        end;

        // insert successor in new position
        Successor.Left := Current.Left;
        if Current.Left <> nil then
          Current.Left.Parent := Successor;
        Successor.Parent := Current.Parent;
        if Current.Parent <> nil then
        begin
          if Current.Parent.Left = Current then
            Current.Parent.Left := Successor
          else
            Current.Parent.Right := Successor;
        end
        else
          // fix root
          FRoot := Successor;
        Successor := Current.Parent;
        if Successor <> nil then
          Successor := FRoot;
      end
      else
      begin
        // (Current.Left = nil) and (Current.Right = nil)
        Successor := Current.Parent;
        if Successor <> nil then
        begin
          // remove references from parent
          if Successor.Left = Current then
            Successor.Left := nil
          else
            Successor.Right := nil;
        end
        else
          FRoot := nil;
      end;
      Current.Value := DEFAULTVALUE;
      Current.Free;
      Dec(FSize);
      Current := Successor;
    until FRemoveSingleElement or (Current = nil);
    AutoPack;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.ExtractAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;
var
  It: STDITRINTERFACENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    if ACollection = nil then
      Exit;
    Result := True;
    It := ACollection.First;
    while It.HasNext do
      Result := Extract(It.Next) and Result;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.First: STDITRINTERFACENAME;
var
  Start: NODETYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Start := FRoot;
    case GetTraverseOrder of
      toPreOrder:
        Result := PREORDERITRCLASSNAME.Create(Self, Start, False, isFirst);
      toOrder:
        begin
          if Start <> nil then
            while Start.Left <> nil do
              Start := Start.Left;
          Result := INORDERITRCLASSNAME.Create(Self, Start, False, isFirst);
        end;
      toPostOrder:
        begin
          if Start <> nil then
            while (Start.Left <> nil) or (Start.Right <> nil) do
          begin
            if Start.Left <> nil then
              Start := Start.Left
            else
              Start := Start.Right;
          end;
          Result := POSTORDERITRCLASSNAME.Create(Self, Start, False, isFirst);
        end;
    else
      Result := nil;
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

{$IFDEF SUPPORTS_FOR_IN}
function SELFCLASSNAME.GetEnumerator: STDITRINTERFACENAME;
begin
  Result := First;
end;
{$ENDIF SUPPORTS_FOR_IN}

function SELFCLASSNAME.GetRoot: TREEITRINTERFACENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    case GetTraverseOrder of
      toPreOrder:
        Result := PREORDERITRCLASSNAME.Create(Self, FRoot, False, isRoot);
      toOrder:
        Result := INORDERITRCLASSNAME.Create(Self, FRoot, False, isRoot);
      toPostOrder:
        Result := POSTORDERITRCLASSNAME.Create(Self, FRoot, False, isRoot);
    else
      Result := nil;
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.GetTraverseOrder: TJclTraverseOrder;
begin
  Result := FTraverseOrder;
end;

function SELFCLASSNAME.IsEmpty: Boolean;
begin
  Result := FSize = 0;
end;

function SELFCLASSNAME.Last: STDITRINTERFACENAME;
var
  Start: NODETYPENAME;
begin
  {$JPPUNDEF WRITE}{$JPPEXPANDMACRO LOCK}
    Start := FRoot;
    case FTraverseOrder of
      toPreOrder:
        begin
          if Start <> nil then
            while (Start.Left <> nil) or (Start.Right <> nil) do
          begin
            if Start.Right <> nil then
              Start := Start.Right
            else
              Start := Start.Left;
          end;
          Result := PREORDERITRCLASSNAME.Create(Self, Start, False, isLast);
        end;
      toOrder:
        begin
          if Start <> nil then
            while Start.Right <> nil do
              Start := Start.Right;
          Result := INORDERITRCLASSNAME.Create(Self, Start, False, isLast);
        end;
      toPostOrder:
        Result := POSTORDERITRCLASSNAME.Create(Self, Start, False, isLast);
    else
      Result := nil;
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

procedure SELFCLASSNAME.Pack;
var
  LeafArray: array of NODETYPENAME;
  ANode, BNode: NODETYPENAME;
  Index: Integer;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    SetLength(Leafarray, FSize);
    try
      // in order enumeration of nodes
      ANode := FRoot;
      if ANode <> nil then
      begin
        // find first node
        while ANode.Left <> nil do
          ANode := ANode.Left;

        Index := 0;
        while ANode <> nil do
        begin
          LeafArray[Index] := ANode;
          Inc(Index);
          if ANode.Right <> nil then
          begin
            ANode := ANode.Right;
            while (ANode.Left <> nil) do
              ANode := ANode.Left;
          end
          else
          begin
            BNode := ANode;
            ANode := ANode.Parent;
            while (ANode <> nil) and (ANode.Right = BNode) do
            begin
              BNode := ANode;
              ANode := ANode.Parent;
            end;
          end;
        end;

        Index := FSize shr 1;
        FRoot := LeafArray[Index];
        FRoot.Parent := nil;
        if Index > 0 then
          FRoot.Left := BuildTree(LeafArray, 0, Index - 1, FRoot, 0)
        else
          FRoot.Left := nil;
        if Index < (FSize - 1) then
          FRoot.Right := BuildTree(LeafArray, Index + 1, FSize - 1, FRoot, 1)
        else
          FRoot.Right := nil;
      end;
    finally
      SetLength(LeafArray, 0);
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.Remove(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
var
  Extracted: TYPENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    Result := Extract(PARAMETERNAME);
    if Result then
    begin
      Extracted := PARAMETERNAME;
      RELEASERFUNCTIONNAME(Extracted);
    end;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.RemoveAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;
var
  It: STDITRINTERFACENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    if ACollection = nil then
      Exit;
    Result := True;
    It := ACollection.First;
    while It.HasNext do
      Result := Remove(It.Next) and Result;
  {$JPPEXPANDMACRO UNLOCK}
end;

function SELFCLASSNAME.RetainAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;
var
  It: STDITRINTERFACENAME;
begin
  {$JPPDEFINE WRITE}{$JPPEXPANDMACRO LOCK}
    Result := False;
    if ACollection = nil then
      Exit;
    Result := True;
    It := First;
    while It.HasNext do
      if not ACollection.Contains(It.Next) then
        It.Remove;
  {$JPPEXPANDMACRO UNLOCK}
end;

procedure SELFCLASSNAME.SetCapacity(Value: Integer);
begin
  raise EJclOperationNotSupportedError.Create;
end;

procedure SELFCLASSNAME.SetTraverseOrder(Value: TJclTraverseOrder);
begin
  FTraverseOrder := Value;
end;

function SELFCLASSNAME.Size: Integer;
begin
  Result := FSize;
end;*)
(*$JPPDEFINEMACRO JCLBINARYTREETYPESINT(NODETYPENAME, TYPENAME)
NODETYPENAME = class
public
  Value: TYPENAME;
  Left: NODETYPENAME;
  Right: NODETYPENAME;
  Parent: NODETYPENAME;
end;*)
(*$JPPDEFINEMACRO JCLBINARYTREEINT(NODETYPENAME, SELFCLASSNAME, ANCESTORCLASSNAME,
  BASECONTAINERINTERFACENAME, FLATCONTAINERINTERFACENAME,
  COLLECTIONINTERFACENAME, TREEINTERFACENAME, STDITRINTERFACENAME, TREEITRINTERFACENAME,
  EQUALITYCOMPARERINTERFACENAME, COMPARERINTERFACENAME, INTERFACEADDITIONAL,
  SECTIONADDITIONAL, CONSTRUCTORDECLARATIONS, OWNERSHIPDECLARATION, COLLECTIONFLAGS,
  CONSTKEYWORD, PARAMETERNAME, TYPENAME)
SELFCLASSNAME = class(ANCESTORCLASSNAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
  IJclIntfCloneable, IJclCloneable, IJclPackable, IJclBaseContainer,
  EQUALITYCOMPARERINTERFACENAME, COMPARERINTERFACENAME, BASECONTAINERINTERFACENAME, FLATCONTAINERINTERFACENAME,INTERFACEADDITIONAL
  COLLECTIONINTERFACENAME, TREEINTERFACENAME)SECTIONADDITIONAL
private
  FMaxDepth: Integer;
  FRoot: NODETYPENAME;
  FTraverseOrder: TJclTraverseOrder;
  function BuildTree(const LeafArray: array of NODETYPENAME; Left, Right: Integer; Parent: NODETYPENAME;
    Offset: Integer): NODETYPENAME;
  function CloneNode(Node, Parent: NODETYPENAME): NODETYPENAME;
protected
  procedure AssignDataTo(Dest: TJclAbstractContainerBase); override;
  procedure AssignPropertiesTo(Dest: TJclAbstractContainerBase); override;
  procedure AutoPack; override;
public
  constructor Create(CONSTRUCTORDECLARATIONSOWNERSHIPDECLARATION);
  destructor Destroy; override;
  { IJclPackable }
  procedure Pack; override;
  procedure SetCapacity(Value: Integer); override;
  { COLLECTIONINTERFACENAME }
  function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function AddAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  procedure Clear;COLLECTIONFLAGS
  function Contains(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function ContainsAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function CollectionEquals(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Extract(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function ExtractAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function First: STDITRINTERFACENAME;COLLECTIONFLAGS
  function IsEmpty: Boolean;COLLECTIONFLAGS
  function Last: STDITRINTERFACENAME;COLLECTIONFLAGS
  function Remove(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function RemoveAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function RetainAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Size: Integer;COLLECTIONFLAGS
  {$IFDEF SUPPORTS_FOR_IN}
  function GetEnumerator: STDITRINTERFACENAME;COLLECTIONFLAGS
  {$ENDIF SUPPORTS_FOR_IN}
  { TREEINTERFACENAME }
  function GetRoot: TREEITRINTERFACENAME;
  function GetTraverseOrder: TJclTraverseOrder;
  procedure SetTraverseOrder(Value: TJclTraverseOrder);
  property Root: TREEITRINTERFACENAME read GetRoot;
  property TraverseOrder: TJclTraverseOrder read GetTraverseOrder write SetTraverseOrder;
end;*)
(*$JPPDEFINEMACRO JCLBINARYTREEITRINT(BASEITRCLASSNAME, PREORDERITRCLASSNAME, INORDERITRCLASSNAME, POSTORDERITRCLASSNAME,
  STDITRINTERFACENAME, STDTREEITRINTERFACENAME, BINTREEITRINTERFACENAME, COLLECTIONINTERFACENAME, EQUALITYCOMPARERINTERFACENAME,
  NODETYPENAME, CONSTKEYWORD, PARAMETERNAME, TYPENAME, GETTERFUNCTIONNAME, SETTERPROCEDURENAME)
BASEITRCLASSNAME = class(TJclAbstractIterator, STDITRINTERFACENAME, STDTREEITRINTERFACENAME, BINTREEITRINTERFACENAME)
protected
  FCursor: NODETYPENAME;
  FStart: TItrStart;
  FOwnTree: COLLECTIONINTERFACENAME;
  FEqualityComparer: EQUALITYCOMPARERINTERFACENAME;
  procedure AssignPropertiesTo(Dest: TJclAbstractIterator); override;
  function GetNextCursor: NODETYPENAME; virtual; abstract;
  function GetPreviousCursor: NODETYPENAME; virtual; abstract;
public
  constructor Create(const AOwnTree: COLLECTIONINTERFACENAME; ACursor: NODETYPENAME; AValid: Boolean; AStart: TItrStart);
  { STDITRINTERFACENAME }
  function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  procedure Extract;
  function GETTERFUNCTIONNAME: TYPENAME;
  function HasNext: Boolean;
  function HasPrevious: Boolean;
  function Insert(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  function IteratorEquals(const AIterator: STDITRINTERFACENAME): Boolean;
  function Next: TYPENAME;
  function NextIndex: Integer;
  function Previous: TYPENAME;
  function PreviousIndex: Integer;
  procedure Remove;
  procedure Reset;
  procedure SETTERPROCEDURENAME(CONSTKEYWORDPARAMETERNAME: TYPENAME);
  {$IFDEF SUPPORTS_FOR_IN}
  function MoveNext: Boolean;
  property Current: TYPENAME read GETTERFUNCTIONNAME;
  {$ENDIF SUPPORTS_FOR_IN}
  { STDTREEITRINTERFACENAME }
  function AddChild(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  function ChildrenCount: Integer;
  procedure DeleteChild(Index: Integer);
  procedure DeleteChildren;
  procedure ExtractChild(Index: Integer);
  procedure ExtractChildren;
  function GetChild(Index: Integer): TYPENAME;
  function HasChild(Index: Integer): Boolean;
  function HasParent: Boolean;
  function IndexOfChild(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
  function InsertChild(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  function Parent: TYPENAME;
  procedure SetChild(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME);
  { BINTREEITRINTERFACENAME }
  function HasLeft: Boolean;
  function HasRight: Boolean;
  function Left: TYPENAME;
  function Right: TYPENAME;
end;

PREORDERITRCLASSNAME = class(BASEITRCLASSNAME, STDITRINTERFACENAME, STDTREEITRINTERFACENAME, BINTREEITRINTERFACENAME,
  {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE} IJclIntfCloneable, IJclCloneable)
protected
  function CreateEmptyIterator: TJclAbstractIterator; override;
  function GetNextCursor: NODETYPENAME; override;
  function GetPreviousCursor: NODETYPENAME; override;
end;

INORDERITRCLASSNAME = class(BASEITRCLASSNAME, STDITRINTERFACENAME, STDTREEITRINTERFACENAME, BINTREEITRINTERFACENAME,
  {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE} IJclIntfCloneable, IJclCloneable)
protected
  function CreateEmptyIterator: TJclAbstractIterator; override;
  function GetNextCursor: NODETYPENAME; override;
  function GetPreviousCursor: NODETYPENAME; override;
end;

POSTORDERITRCLASSNAME = class(BASEITRCLASSNAME, STDITRINTERFACENAME, STDTREEITRINTERFACENAME, BINTREEITRINTERFACENAME,
  {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE} IJclIntfCloneable, IJclCloneable)
protected
  function CreateEmptyIterator: TJclAbstractIterator; override;
  function GetNextCursor: NODETYPENAME; override;
  function GetPreviousCursor: NODETYPENAME; override;
end;*)

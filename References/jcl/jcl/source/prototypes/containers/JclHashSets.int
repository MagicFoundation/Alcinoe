(*$JPPDEFINEMACRO JCLHASHSETTYPEINT(BUCKETTYPENAME, DYNARRAYTYPENAME)
BUCKETTYPENAME = class
public
  Size: Integer;
  Entries: DYNARRAYTYPENAME;
end;
*)
(*$JPPDEFINEMACRO JCLHASHSETINT(SELFCLASSNAME, ANCESTORCLASSNAME,
  BASECONTAINERINTERFACENAME, FLATCONTAINERINTERFACENAME, BUCKETTYPENAME,
  COLLECTIONINTERFACENAME, SETINTERFACENAME, ITRINTERFACENAME,
  EQUALITYCOMPARERINTERFACENAME, HASHCONVERTERINTERFACENAME, INTERFACEADDITIONAL,
  SECTIONADDITIONAL, COLLECTIONFLAGS, CONSTKEYWORD, PARAMETERNAME, TYPENAME, OWNERSHIPDECLARATION)
SELFCLASSNAME = class(ANCESTORCLASSNAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
  IJclIntfCloneable, IJclCloneable, IJclPackable, IJclGrowable, IJclBaseContainer,
  BASECONTAINERINTERFACENAME, FLATCONTAINERINTERFACENAME, EQUALITYCOMPARERINTERFACENAME, HASHCONVERTERINTERFACENAME,INTERFACEADDITIONAL
  COLLECTIONINTERFACENAME, SETINTERFACENAME)SECTIONADDITIONAL
private
  FBuckets: array of BUCKETTYPENAME;
  FHashToRangeFunction: TJclHashToRangeFunction;
protected
  procedure AssignDataTo(Dest: TJclAbstractContainerBase); override;
  procedure AssignPropertiesTo(Dest: TJclAbstractContainerBase); override;
public
  constructor Create(ACapacity: IntegerOWNERSHIPDECLARATION); overload;
  destructor Destroy; override;
  property HashToRangeFunction: TJclHashToRangeFunction read FHashToRangeFunction write FHashToRangeFunction;
  { IJclPackable }
  procedure Pack; override;
  procedure SetCapacity(Value: Integer); override;
  { COLLECTIONINTERFACENAME }
  function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function AddAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  procedure Clear;COLLECTIONFLAGS
  function CollectionEquals(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Contains(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function ContainsAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Extract(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function ExtractAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function First: ITRINTERFACENAME;COLLECTIONFLAGS
  function IsEmpty: Boolean;COLLECTIONFLAGS
  function Last: ITRINTERFACENAME;COLLECTIONFLAGS
  function Remove(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function RemoveAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function RetainAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Size: Integer;COLLECTIONFLAGS
  {$IFDEF SUPPORTS_FOR_IN}
  function GetEnumerator: ITRINTERFACENAME;COLLECTIONFLAGS
  {$ENDIF SUPPORTS_FOR_IN}
  { SETINTERFACENAME }
  procedure Intersect(const ACollection: COLLECTIONINTERFACENAME);
  procedure Subtract(const ACollection: COLLECTIONINTERFACENAME);
  procedure Union(const ACollection: COLLECTIONINTERFACENAME);
end;*)
(*$JPPDEFINEMACRO JCLHASHSETITRINT(SELFCLASSNAME, ITRINTERFACENAME, HASHSETCLASSNAME,
  CONSTKEYWORD, PARAMETERNAME, TYPENAME, GETTERFUNCTIONNAME, SETTERPROCEDURENAME)
SELFCLASSNAME = class(TJclAbstractIterator, ITRINTERFACENAME)
protected
  FBucketIndex: Integer;
  FItemIndex: Integer;
  FStart: TItrStart;
  FOwnHashSet: HASHSETCLASSNAME;
  procedure AssignPropertiesTo(Dest: TJclAbstractIterator); override;
  function CreateEmptyIterator: TJclAbstractIterator; override;
public
  constructor Create(AOwnHashSet: HASHSETCLASSNAME; ABucketIndex: Integer; AItemIndex: Integer; AValid: Boolean; AStart: TItrStart);
  { ITRINTERFACENAME }
  function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  procedure Extract;
  function GETTERFUNCTIONNAME: TYPENAME;
  function HasNext: Boolean;
  function HasPrevious: Boolean;
  function Insert(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  function IteratorEquals(const AIterator: ITRINTERFACENAME): Boolean;
  function Next: TYPENAME;
  function NextIndex: Integer;
  function Previous: TYPENAME;
  function PreviousIndex: Integer;
  procedure Remove;
  procedure Reset;
  procedure SETTERPROCEDURENAME(CONSTKEYWORDPARAMETERNAME: TYPENAME);
  {$IFDEF SUPPORTS_FOR_IN}
  function MoveNext: Boolean;
  property Current: TYPENAME read GETTERFUNCTIONNAME;
  {$ENDIF SUPPORTS_FOR_IN}
end;*)

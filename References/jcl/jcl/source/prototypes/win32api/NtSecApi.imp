type
  TLsaOpenPolicy = function (SystemName: PLSA_UNICODE_STRING;
    var ObjectAttributes: LSA_OBJECT_ATTRIBUTES; DesiredAccess: ACCESS_MASK;
    var PolicyHandle: LSA_HANDLE): NTSTATUS; stdcall;

var
  _LsaOpenPolicy: TLsaOpenPolicy = nil;

function LsaOpenPolicy(SystemName: PLSA_UNICODE_STRING;
  var ObjectAttributes: LSA_OBJECT_ATTRIBUTES; DesiredAccess: ACCESS_MASK;
  var PolicyHandle: LSA_HANDLE): NTSTATUS;
begin
  GetProcedureAddress(Pointer(@_LsaOpenPolicy), advapi32, 'LsaOpenPolicy');
  Result := _LsaOpenPolicy(SystemName, ObjectAttributes, DesiredAccess, PolicyHandle);
end;

type
  TLsaQueryInformationPolicy = function (PolicyHandle: LSA_HANDLE;
    InformationClass: POLICY_INFORMATION_CLASS; var Buffer: Pointer): NTSTATUS; stdcall;

var
  _LsaQueryInformationPolicy: TLsaQueryInformationPolicy = nil;

function LsaQueryInformationPolicy(PolicyHandle: LSA_HANDLE;
  InformationClass: POLICY_INFORMATION_CLASS; var Buffer: Pointer): NTSTATUS;
begin
  GetProcedureAddress(Pointer(@_LsaQueryInformationPolicy), advapi32, 'LsaQueryInformationPolicy');
  Result := _LsaQueryInformationPolicy(PolicyHandle, InformationClass, Buffer);
end;

type
  TLsaFreeMemory = function (Buffer: Pointer): NTSTATUS; stdcall;

var
  _LsaFreeMemory: TLsaFreeMemory = nil;

function LsaFreeMemory(Buffer: Pointer): NTSTATUS;
begin
  GetProcedureAddress(Pointer(@_LsaFreeMemory), advapi32, 'LsaFreeMemory');
  Result := _LsaFreeMemory(Buffer);
end;

type
  TLsaFreeReturnBuffer = function (Buffer: Pointer): NTSTATUS; stdcall;

var
  _LsaFreeReturnBuffer: TLsaFreeReturnBuffer = nil;

function LsaFreeReturnBuffer(Buffer: Pointer): NTSTATUS;
begin
  GetProcedureAddress(Pointer(@_LsaFreeReturnBuffer), advapi32, 'LsaFreeReturnBuffer');
  Result := _LsaFreeReturnBuffer(Buffer);
end;

type
  TLsaClose = function (ObjectHandle: LSA_HANDLE): NTSTATUS; stdcall;

var
  _LsaClose: TLsaClose = nil;

function LsaClose(ObjectHandle: LSA_HANDLE): NTSTATUS;
begin
  GetProcedureAddress(Pointer(@_LsaClose), advapi32, 'LsaClose');
  Result := _LsaClose(ObjectHandle);
end;

type
  TLsaNtStatusToWinError = function (Status: NTSTATUS): ULONG; stdcall;

var
  _LsaNtStatusToWinError: TLsaNtStatusToWinError = nil;

function LsaNtStatusToWinError(Status: NTSTATUS): ULONG;
begin
  GetProcedureAddress(Pointer(@_LsaNtStatusToWinError), advapi32, 'LsaNtStatusToWinError');
  Result := _LsaNtStatusToWinError(Status);
end;

unit Alcinoe.FMX.Styles;

interface

{$I Alcinoe.inc}

uses
  System.Generics.Collections,
  System.UITypes,
  FMX.Controls,
  Fmx.forms,
  Alcinoe.FMX.Dynamic.Layouts,
  Alcinoe.FMX.Dynamic.Controls,
  Alcinoe.FMX.Dynamic.Objects,
  Alcinoe.FMX.Dynamic.StdCtrls,
  Alcinoe.FMX.Layouts,
  Alcinoe.FMX.Dialogs,
  Alcinoe.FMX.Objects,
  Alcinoe.FMX.Edit,
  Alcinoe.FMX.StdCtrls;

Type

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  TALStyleManager = class(Tobject)
  private
    class function CreateInstance: TALStyleManager;
    class function GetInstance: TALStyleManager; static;
  protected
    class var FInstance: TALStyleManager;
  public
    type
      TCreateInstanceFunc = function: TALStyleManager;
    class var CreateInstanceFunc: TCreateInstanceFunc;
    class property Instance: TALStyleManager read GetInstance;
    class function HasInstance: Boolean; inline;
  private
    class var FSortOrderCounter: integer;
  protected
    class function GetNextSortOrder: integer;
  public
    type
      // -----------------
      // TDarkModeBehavior
      TDarkModeBehavior = (FollowSystem, AlwaysDark, AlwaysLight);
      // --------------
      // TTextStyleInfo
      TTextApplyStyleProc = Procedure(const AText: TALBaseText; const ARatio: Single = 1);
      TTextStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TTextApplyStyleProc;
        DefaultFontSize: Single;
        constructor create(const AApplyStyleProc: TTextApplyStyleProc; const ADefaultFontSize: Single);
      end;
      // --------------
      // TEditStyleInfo
      TEditApplyStyleProc = Procedure(const AEdit: TALBaseEdit; const ARatio: Single = 1);
      TEditStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TEditApplyStyleProc;
        DefaultFontSize: Single;
        constructor create(const AApplyStyleProc: TEditApplyStyleProc; const ADefaultFontSize: Single);
      end;
      // ----------------
      // TButtonStyleInfo
      TButtonApplyStyleProc = Procedure(const AButton: TALButton; const ARatio: Single = 1);
      TButtonStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TButtonApplyStyleProc;
        DefaultFontSize: Single;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TButtonApplyStyleProc; const ADefaultFontSize: Single; const ADefaultHeight: Single);
      end;
      // ----------------
      // TToggleButtonStyleInfo
      TToggleButtonApplyStyleProc = Procedure(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
      TToggleButtonStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TToggleButtonApplyStyleProc;
        DefaultFontSize: Single;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TToggleButtonApplyStyleProc; const ADefaultFontSize: Single; const ADefaultHeight: Single);
      end;
      // ------------------
      // TCheckBoxStyleInfo
      TCheckBoxApplyStyleProc = Procedure(const ACheckBox: TALBaseCheckBox; const ARatio: Single = 1);
      TCheckBoxStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TCheckBoxApplyStyleProc;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TCheckBoxApplyStyleProc; const ADefaultHeight: Single);
      end;
      // ---------------------
      // TRadioButtonStyleInfo
      TRadioButtonApplyStyleProc = Procedure(const ARadioButton: TALRadioButton; const ARatio: Single = 1);
      TRadioButtonStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TRadioButtonApplyStyleProc;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TRadioButtonApplyStyleProc; const ADefaultHeight: Single);
      end;
      // ----------------
      // TSwitchStyleInfo
      TSwitchApplyStyleProc = Procedure(const ASwitch: TALSwitch; const ARatio: Single = 1);
      TSwitchStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TSwitchApplyStyleProc;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TSwitchApplyStyleProc; const ADefaultHeight: Single);
      end;
      // ------------------
      // TTrackBarStyleInfo
      TTrackBarApplyStyleProc = Procedure(const ATrackBar: TALCustomTrack; const ARatio: Single = 1);
      TTrackBarStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TTrackBarApplyStyleProc;
        DefaultSize: Single;
        constructor create(const AApplyStyleProc: TTrackBarApplyStyleProc; const ADefaultSize: Single);
      end;
      // ------------------
      // TScrollBarStyleInfo
      TScrollBarApplyStyleProc = Procedure(const AScrollBar: TALCustomScrollBar; const ARatio: Single = 1);
      TScrollBarStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TScrollBarApplyStyleProc;
        DefaultSize: Single;
        constructor create(const AApplyStyleProc: TScrollBarApplyStyleProc; const ADefaultSize: Single);
      end;
      // ------------------
      // TScrollBoxStyleInfo
      TScrollBoxApplyStyleProc = Procedure(const AScrollBox: TALCustomScrollBox);
      TScrollBoxStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TScrollBoxApplyStyleProc;
        constructor create(const AApplyStyleProc: TScrollBoxApplyStyleProc);
      end;
      // -----------------------
      // TDialogManagerStyleInfo
      TDialogManagerApplyStyleProc = Procedure(const ADialogManager: TALDialogManager; const ARatio: Single = 1);
      TDialogManagerStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TDialogManagerApplyStyleProc;
        DefaultFontSize: Single;
        constructor create(const AApplyStyleProc: TDialogManagerApplyStyleProc; const ADefaultFontSize: Single);
      end;
      // ----------------
      // TDialogStyleInfo
      TDialogApplyStyleProc = Procedure(const ADialog: TALDialog; const ARatio: Single = 1);
      TDialogStyleInfo = record
      public
        SortOrder: Integer;
        ApplyStyleProc: TDialogApplyStyleProc;
        DefaultFontSize: Single;
        constructor create(const AApplyStyleProc: TDialogApplyStyleProc; const ADefaultFontSize: Single);
      end;
      // ----------------------------
      // TDynamicTextStyleInfo
      TDynamicTextApplyStyleProc = Procedure(const AText: TALDynamicBaseText; const ARatio: Single = 1);
      TDynamicTextStyleInfo = record
      public
        SortOrder: Integer;
        ApplyDynamicStyleProc: TDynamicTextApplyStyleProc;
        DefaultFontSize: Single;
        constructor create(const AApplyStyleProc: TDynamicTextApplyStyleProc; const ADefaultFontSize: Single);
      end;
      // ------------------------------
      // TDynamicButtonStyleInfo
      TDynamicButtonApplyStyleProc = Procedure(const AButton: TALDynamicButton; const ARatio: Single = 1);
      TDynamicButtonStyleInfo = record
      public
        SortOrder: Integer;
        ApplyDynamicStyleProc: TDynamicButtonApplyStyleProc;
        DefaultFontSize: Single;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TDynamicButtonApplyStyleProc; const ADefaultFontSize: Single; const ADefaultHeight: Single);
      end;
      // ------------------------------
      // TDynamicToggleButtonStyleInfo
      TDynamicToggleButtonApplyStyleProc = Procedure(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
      TDynamicToggleButtonStyleInfo = record
      public
        SortOrder: Integer;
        ApplyDynamicStyleProc: TDynamicToggleButtonApplyStyleProc;
        DefaultFontSize: Single;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TDynamicToggleButtonApplyStyleProc; const ADefaultFontSize: Single; const ADefaultHeight: Single);
      end;
      // --------------------------------
      // TDynamicCheckBoxStyleInfo
      TDynamicCheckBoxApplyStyleProc = Procedure(const ACheckBox: TALDynamicBaseCheckBox; const ARatio: Single = 1);
      TDynamicCheckBoxStyleInfo = record
      public
        SortOrder: Integer;
        ApplyDynamicStyleProc: TDynamicCheckBoxApplyStyleProc;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TDynamicCheckBoxApplyStyleProc; const ADefaultHeight: Single);
      end;
      // -----------------------------------
      // TDynamicRadioButtonStyleInfo
      TDynamicRadioButtonApplyStyleProc = Procedure(const ARadioButton: TALDynamicRadioButton; const ARatio: Single = 1);
      TDynamicRadioButtonStyleInfo = record
      public
        SortOrder: Integer;
        ApplyDynamicStyleProc: TDynamicRadioButtonApplyStyleProc;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TDynamicRadioButtonApplyStyleProc; const ADefaultHeight: Single);
      end;
      // ------------------------------
      // TDynamicSwitchStyleInfo
      TDynamicSwitchApplyStyleProc = Procedure(const ASwitch: TALDynamicSwitch; const ARatio: Single = 1);
      TDynamicSwitchStyleInfo = record
      public
        SortOrder: Integer;
        ApplyDynamicStyleProc: TDynamicSwitchApplyStyleProc;
        DefaultHeight: Single;
        constructor create(const AApplyStyleProc: TDynamicSwitchApplyStyleProc; const ADefaultHeight: Single);
      end;
      // --------------------------------
      // TDynamicTrackBarStyleInfo
      TDynamicTrackBarApplyStyleProc = Procedure(const ATrackBar: TALDynamicCustomTrack; const ARatio: Single = 1);
      TDynamicTrackBarStyleInfo = record
      public
        SortOrder: Integer;
        ApplyDynamicStyleProc: TDynamicTrackBarApplyStyleProc;
        DefaultSize: Single;
        constructor create(const AApplyStyleProc: TDynamicTrackBarApplyStyleProc; const ADefaultSize: Single);
      end;
      // ---------------------------------
      // TDynamicScrollBarStyleInfo
      TDynamicScrollBarApplyStyleProc = Procedure(const AScrollBar: TALDynamicCustomScrollBar; const ARatio: Single = 1);
      TDynamicScrollBarStyleInfo = record
      public
        SortOrder: Integer;
        ApplyDynamicStyleProc: TDynamicScrollBarApplyStyleProc;
        DefaultSize: Single;
        constructor create(const AApplyStyleProc: TDynamicScrollBarApplyStyleProc; const ADefaultSize: Single);
      end;
  private
    FLightColors: TDictionary<string, TPair<TAlphaColor, integer{SortOrder}>>;
    FDarkColors: TDictionary<string, TPair<TAlphaColor, integer{SortOrder}>>;
    FColors: TDictionary<string, TAlphaColor>;
    FFontFamilies: TDictionary<string, string>;
    FTextStyles: TDictionary<String, TTextStyleInfo>;
    FEditStyles: TDictionary<String, TEditStyleInfo>;
    FMemoStyles: TDictionary<String, TEditStyleInfo>;
    FButtonStyles: TDictionary<String, TButtonStyleInfo>;
    FToggleButtonStyles: TDictionary<String, TToggleButtonStyleInfo>;
    FCheckBoxStyles: TDictionary<String, TCheckBoxStyleInfo>;
    FRadioButtonStyles: TDictionary<String, TRadioButtonStyleInfo>;
    FSwitchStyles: TDictionary<String, TSwitchStyleInfo>;
    FTrackBarStyles: TDictionary<String, TTrackBarStyleInfo>;
    FRangeTrackBarStyles: TDictionary<String, TTrackBarStyleInfo>;
    FScrollBarStyles: TDictionary<String, TScrollBarStyleInfo>;
    FScrollBoxStyles: TDictionary<String, TScrollBoxStyleInfo>;
    FDialogManagerStyles: TDictionary<String, TDialogManagerStyleInfo>;
    FDialogStyles: TDictionary<String, TDialogStyleInfo>;
    //--
    FDynamicTextStyles: TDictionary<String, TDynamicTextStyleInfo>;
    FDynamicButtonStyles: TDictionary<String, TDynamicButtonStyleInfo>;
    FDynamicToggleButtonStyles: TDictionary<String, TDynamicToggleButtonStyleInfo>;
    FDynamicCheckBoxStyles: TDictionary<String, TDynamicCheckBoxStyleInfo>;
    FDynamicRadioButtonStyles: TDictionary<String, TDynamicRadioButtonStyleInfo>;
    FDynamicSwitchStyles: TDictionary<String, TDynamicSwitchStyleInfo>;
    FDynamicTrackBarStyles: TDictionary<String, TDynamicTrackBarStyleInfo>;
    FDynamicRangeTrackBarStyles: TDictionary<String, TDynamicTrackBarStyleInfo>;
    FDynamicScrollBarStyles: TDictionary<String, TDynamicScrollBarStyleInfo>;
    //--
    FIsDarkMode: Boolean;
    function GetSystemIsDarkMode: Boolean;
    function GetDarkModeBehavior: TDarkModeBehavior;
    procedure SetDarkModeBehavior(const AValue: TDarkModeBehavior);
  protected
    procedure InitStyles; virtual;
  public
    constructor Create; virtual;
    destructor Destroy; override;
    property DarkModeBehavior: TDarkModeBehavior read GetDarkModeBehavior write SetDarkModeBehavior;
    property IsDarkMode: Boolean read FIsDarkMode;
    procedure ApplyColorScheme(const AForm: TCustomForm; const AFormFillColorKey: String; const ASystemStatusBarBackgroundColorKey: String); virtual;
    procedure RefreshColors; virtual;
    //--
    procedure AddOrSetColor(const AName: String; Const AValue: TAlphaColor; Const AIsForDarkMode: Boolean);
    procedure AddOrSetFontFamily(const AName: String; Const AValue: String);
    procedure AddOrSetTextStyle(const AName: String; const AApplyStyleProc: TTextApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetEditStyle(const AName: String; const AApplyStyleProc: TEditApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetMemoStyle(const AName: String; const AApplyStyleProc: TEditApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetButtonStyle(const AName: String; const AApplyStyleProc: TButtonApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetButtonIconStyle(const AName: String; const AApplyStyleProc: TButtonApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetToggleButtonStyle(const AName: String; const AApplyStyleProc: TToggleButtonApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetToggleButtonIconStyle(const AName: String; const AApplyStyleProc: TToggleButtonApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetCheckBoxStyle(const AName: String; const AApplyStyleProc: TCheckBoxApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetRadioButtonStyle(const AName: String; const AApplyStyleProc: TRadioButtonApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetSwitchStyle(const AName: String; const AApplyStyleProc: TSwitchApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetTrackBarStyle(const AName: String; const AApplyStyleProc: TTrackBarApplyStyleProc; const ADefaultSize: Single);
    procedure AddOrSetRangeTrackBarStyle(const AName: String; const AApplyStyleProc: TTrackBarApplyStyleProc; const ADefaultSize: Single);
    procedure AddOrSetScrollBarStyle(const AName: String; const AApplyStyleProc: TScrollBarApplyStyleProc; const ADefaultSize: Single);
    procedure AddOrSetScrollBoxStyle(const AName: String; const AApplyStyleProc: TScrollBoxApplyStyleProc);
    procedure AddOrSetDialogManagerStyle(const AName: String; const AApplyStyleProc: TDialogManagerApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetDialogStyle(const AName: String; const AApplyStyleProc: TDialogApplyStyleProc; const ADefaultFontSize: Single);
    //--
    procedure AddOrSetDynamicTextStyle(const AName: String; const AApplyStyleProc: TDynamicTextApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetDynamicButtonStyle(const AName: String; const AApplyStyleProc: TDynamicButtonApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetDynamicButtonIconStyle(const AName: String; const AApplyStyleProc: TDynamicButtonApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetDynamicToggleButtonStyle(const AName: String; const AApplyStyleProc: TDynamicToggleButtonApplyStyleProc; const ADefaultFontSize: Single);
    procedure AddOrSetDynamicToggleButtonIconStyle(const AName: String; const AApplyStyleProc: TDynamicToggleButtonApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetDynamicCheckBoxStyle(const AName: String; const AApplyStyleProc: TDynamicCheckBoxApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetDynamicRadioButtonStyle(const AName: String; const AApplyStyleProc: TDynamicRadioButtonApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetDynamicSwitchStyle(const AName: String; const AApplyStyleProc: TDynamicSwitchApplyStyleProc; const ADefaultHeight: Single);
    procedure AddOrSetDynamicTrackBarStyle(const AName: String; const AApplyStyleProc: TDynamicTrackBarApplyStyleProc; const ADefaultSize: Single);
    procedure AddOrSetDynamicRangeTrackBarStyle(const AName: String; const AApplyStyleProc: TDynamicTrackBarApplyStyleProc; const ADefaultSize: Single);
    procedure AddOrSetDynamicScrollBarStyle(const AName: String; const AApplyStyleProc: TDynamicScrollBarApplyStyleProc; const ADefaultSize: Single);
    //--
    function GetColor(const AName: String): TAlphaColor;
    function GetFontFamily(const AName: String): String;
    procedure ApplyTextStyle(const AName: String; const AText: TALText; const AFontSize: Single); overload;
    procedure ApplyTextStyle(const AName: String; const AText: TALText); overload;
    procedure ApplyEditStyle(const AName: String; const AEdit: TALBaseEdit; const AFontSize: Single); overload;
    procedure ApplyEditStyle(const AName: String; const AEdit: TALBaseEdit); overload;
    procedure ApplyMemoStyle(const AName: String; const AMemo: TALBaseEdit; const AFontSize: Single); overload;
    procedure ApplyMemoStyle(const AName: String; const AMemo: TALBaseEdit); overload;
    procedure ApplyButtonStyle(const AName: String; const AButton: TALButton; const AFontSize: Single); overload;
    procedure ApplyButtonIconStyle(const AName: String; const AButton: TALButton; const AHeight: Single);
    procedure ApplyButtonStyle(const AName: String; const AButton: TALButton); overload;
    procedure ApplyToggleButtonStyle(const AName: String; const AToggleButton: TALToggleButton; const AFontSize: Single); overload;
    procedure ApplyToggleButtonIconStyle(const AName: String; const AToggleButton: TALToggleButton; const AHeight: Single);
    procedure ApplyToggleButtonStyle(const AName: String; const AToggleButton: TALToggleButton); overload;
    procedure ApplyCheckBoxStyle(const AName: String; const ACheckBox: TALCheckBox; const AHeight: Single); overload;
    procedure ApplyCheckBoxStyle(const AName: String; const ACheckBox: TALCheckBox); overload;
    procedure ApplyRadioButtonStyle(const AName: String; const ARadioButton: TALRadioButton; const AHeight: Single); overload;
    procedure ApplyRadioButtonStyle(const AName: String; const ARadioButton: TALRadioButton); overload;
    procedure ApplySwitchStyle(const AName: String; const ASwitch: TALSwitch; const AHeight: Single); overload;
    procedure ApplySwitchStyle(const AName: String; const ASwitch: TALSwitch); overload;
    procedure ApplyTrackBarStyle(const AName: String; const ATrackBar: TALCustomTrack; const ASize: Single); overload;
    procedure ApplyTrackBarStyle(const AName: String; const ATrackBar: TALCustomTrack); overload;
    procedure ApplyRangeTrackBarStyle(const AName: String; const ARangeTrackBar: TALCustomTrack; const ASize: Single); overload;
    procedure ApplyRangeTrackBarStyle(const AName: String; const ARangeTrackBar: TALCustomTrack); overload;
    procedure ApplyScrollBarStyle(const AName: String; const AScrollBar: TALCustomScrollBar; const ASize: Single); overload;
    procedure ApplyScrollBarStyle(const AName: String; const AScrollBar: TALCustomScrollBar); overload;
    procedure ApplyScrollBoxStyle(const AName: String; const AScrollBox: TALCustomScrollBox);
    procedure ApplyDialogManagerStyle(const AName: String; const ADialogManager: TALDialogManager; const AFontSize: Single); overload;
    procedure ApplyDialogManagerStyle(const AName: String; const ADialogManager: TALDialogManager); overload;
    procedure ApplyDialogStyle(const AName: String; const ADialog: TALDialog; const AFontSize: Single); overload;
    procedure ApplyDialogStyle(const AName: String; const ADialog: TALDialog); overload;
    //--
    procedure ApplyDynamicTextStyle(const AName: String; const AText: TALDynamicText; const AFontSize: Single); overload;
    procedure ApplyDynamicTextStyle(const AName: String; const AText: TALDynamicText); overload;
    procedure ApplyDynamicButtonStyle(const AName: String; const AButton: TALDynamicButton; const AFontSize: Single); overload;
    procedure ApplyDynamicButtonIconStyle(const AName: String; const AButton: TALDynamicButton; const AHeight: Single);
    procedure ApplyDynamicButtonStyle(const AName: String; const AButton: TALDynamicButton); overload;
    procedure ApplyDynamicToggleButtonStyle(const AName: String; const AToggleButton: TALDynamicToggleButton; const AFontSize: Single); overload;
    procedure ApplyDynamicToggleButtonIconStyle(const AName: String; const AToggleButton: TALDynamicToggleButton; const AHeight: Single);
    procedure ApplyDynamicToggleButtonStyle(const AName: String; const AToggleButton: TALDynamicToggleButton); overload;
    procedure ApplyDynamicCheckBoxStyle(const AName: String; const ACheckBox: TALDynamicCheckBox; const AHeight: Single); overload;
    procedure ApplyDynamicCheckBoxStyle(const AName: String; const ACheckBox: TALDynamicCheckBox); overload;
    procedure ApplyDynamicRadioButtonStyle(const AName: String; const ARadioButton: TALDynamicRadioButton; const AHeight: Single); overload;
    procedure ApplyDynamicRadioButtonStyle(const AName: String; const ARadioButton: TALDynamicRadioButton); overload;
    procedure ApplyDynamicSwitchStyle(const AName: String; const ASwitch: TALDynamicSwitch; const AHeight: Single); overload;
    procedure ApplyDynamicSwitchStyle(const AName: String; const ASwitch: TALDynamicSwitch); overload;
    procedure ApplyDynamicTrackBarStyle(const AName: String; const ATrackBar: TALDynamicCustomTrack; const ASize: Single); overload;
    procedure ApplyDynamicTrackBarStyle(const AName: String; const ATrackBar: TALDynamicCustomTrack); overload;
    procedure ApplyDynamicRangeTrackBarStyle(const AName: String; const ARangeTrackBar: TALDynamicCustomTrack; const ASize: Single); overload;
    procedure ApplyDynamicRangeTrackBarStyle(const AName: String; const ARangeTrackBar: TALDynamicCustomTrack); overload;
    procedure ApplyDynamicScrollBarStyle(const AName: String; const AScrollBar: TALDynamicCustomScrollBar; const ASize: Single); overload;
    procedure ApplyDynamicScrollBarStyle(const AName: String; const AScrollBar: TALDynamicCustomScrollBar); overload;
    //--
    function GetColorNames: TArray<String>;
    function GetFontFamilyNames: TArray<String>;
    function GetTextStyleNames: TArray<String>;
    function GetEditStyleNames: TArray<String>;
    function GetMemoStyleNames: TArray<String>;
    function GetButtonStyleNames: TArray<String>;
    function GetToggleButtonStyleNames: TArray<String>;
    function GetCheckBoxStyleNames: TArray<String>;
    function GetRadioButtonStyleNames: TArray<String>;
    function GetSwitchStyleNames: TArray<String>;
    function GetTrackBarStyleNames: TArray<String>;
    function GetRangeTrackBarStyleNames: TArray<String>;
    function GetScrollBarStyleNames: TArray<String>;
    function GetScrollBoxStyleNames: TArray<String>;
    function GetDialogManagerStyleNames: TArray<String>;
    function GetDialogStyleNames: TArray<String>;
  end;

implementation

uses
  System.Generics.Defaults,
  System.SysUtils,
  System.Types,
  System.Math,
  System.math.Vectors,
  FMX.Platform,
  FMX.types,
  FMX.Graphics,
  {$IF defined(ANDROID)}
  Androidapi.Helpers,
  Androidapi.JNI.App,
  Androidapi.JNI.GraphicsContentViewText,
  Androidapi.JNIBridge,
  Androidapi.JNI.JavaTypes,
  Alcinoe.AndroidApi.App,
  {$ENDIF}
  {$IF defined(IOS)}
  Macapi.Helpers,
  Macapi.ObjectiveC,
  iOSapi.Foundation,
  iOSapi.Helpers,
  iOSapi.UIKit,
  Alcinoe.iOSapi.UIKit,
  {$ENDIF}
  {$IF defined(ALDPK)}
  Vcl.Dialogs,
  {$ENDIF}
  Alcinoe.Common,
  Alcinoe.Localization,
  Alcinoe.StringUtils,
  Alcinoe.FMX.Ani,
  Alcinoe.FMX.Controls,
  Alcinoe.FMX.Memo,
  Alcinoe.FMX.UserPreferences,
  Alcinoe.FMX.Graphics;

{**********************************************************************************************************}
function ALGetStyleRatio(const ACaption: String; const AValue: Single; const ADefaultValue: Single): Single;
begin
  if ADefaultValue = 0 then exit(1);
  var LValueF: Single := AValue;
  {$IF defined(ALDPK)}
  While True do begin
    var LValueStr := InputBox(ACaption, '', ALFloatToStrW(ADefaultValue, ALDefaultFormatSettingsW));
    if ALTryStrToFloat(LValueStr,LValueF,ALDefaultFormatSettingsW) then break;
  end;
  {$ENDIF}
  Result := LValueF / ADefaultValue;
end;

const
  ALLineHeightMultipliers: array[10..60] of Single = (
    {10} 1.50, // 15/10
    {11} 1.45, // 16/11 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {12} 1.33, // 16/12 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {13} 1.38, // 18/13
    {14} 1.43, // 20/14 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {15} 1.47, // 22/15
    {16} 1.50, // 24/16 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {17} 1.47, // 25/17
    {18} 1.44, // 26/18
    {19} 1.42, // 27/19
    {20} 1.35, // 27/20
    {21} 1.33, // 28/21
    {22} 1.27, // 28/22 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {23} 1.30, // 30/23
    {24} 1.33, // 32/24 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {25} 1.32, // 33/25
    {26} 1.31, // 34/26
    {27} 1.30, // 35/27
    {28} 1.29, // 36/28 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {29} 1.28, // 37/29
    {30} 1.27, // 38/30
    {31} 1.26, // 39/31
    {32} 1.25, // 40/32 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {33} 1.24, // 41/33
    {34} 1.24, // 42/34
    {35} 1.23, // 43/35
    {36} 1.22, // 44/36 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {37} 1.22, // 45/37
    {38} 1.21, // 46/38
    {39} 1.21, // 47/39
    {40} 1.20, // 48/40
    {41} 1.20, // 49/41
    {42} 1.19, // 50/42
    {43} 1.19, // 51/43
    {44} 1.18, // 52/44
    {45} 1.16, // 52/45 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {46} 1.15, // 53/46
    {47} 1.15, // 54/47
    {48} 1.15, // 55/48
    {49} 1.14, // 56/49
    {50} 1.14, // 57/50
    {51} 1.14, // 58/51
    {52} 1.13, // 59/52
    {53} 1.13, // 60/53
    {54} 1.13, // 61/54
    {55} 1.13, // 62/55
    {56} 1.12, // 63/56
    {57} 1.12, // 64/57 - https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
    {58} 1.12, // 65/58
    {59} 1.12, // 66/59
    {60} 1.12); // 67/60

{***********************************************************************}
function ALEstimateLineHeightMultiplier(Const AFontSize: Single): Single;
begin
  // Excellent reference:
  // https://pimpmytype.com/line-length-line-height
  // There is no universal rule for ideal line height — it depends on many factors
  // such as line length, typeface, font size, device, and context.
  // This function provides an approximate estimation only.
  var LRoundFontSize := Round(AFontSize);
  if (LRoundFontSize >= Low(ALLineHeightMultipliers)) and (LRoundFontSize <= High(ALLineHeightMultipliers)) then
    Result := ALLineHeightMultipliers[LRoundFontSize]
  else
    Result := 0;
end;

{************************************************************************************************}
function ALEstimateLetterSpacing(Const AFontSize: Single; Const AFontWeight: TFontWeight): Single;
begin

  // https://practicaltypography.com/letterspacing.html
  // Use 5–12% extra space with caps, but not with lowercase
  // Capital letters usually appear at the beginning of a word or sentence, so
  // they’re designed to fit correctly next to lowercase letters. But when you
  // use capital letters together, that spacing looks too tight. That’s why you
  // always add 5–12% extra letterspacing to text in all caps or small caps.
  // This is particularly important at small sizes.

  // https://www.kevinpowell.co/article/letter-spacing-dos-and-donts/
  // DO: Add** letter-spacing to uppercase text
  // DO: Increase** letter-spacing for small text
  //     When text drops to smaller sizes (under 16px on the web, in general),
  //     it gets harder to read. Depending on the font, a small amount of
  //     letter-spacing can help.
  // DON’T: Play with the letter-spacing of your body text
  //        If the font you picked for you body looks a little too cramped and
  //        you feel that adding a little bit of letter-spacing would help make
  //        it more readable, my guess is you’ve picked a display font for your
  //        body.

  // Letter spacing highly depends on the selected font, so it's impossible to define
  // a universal value that works well in all cases. That's why I prefer to disable it for now.

  Result := 0;

  //case round(AFontSize) of
  //  57: begin
  //    if AFontWeight = TFontWeight.regular then Result := -0.25 // https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
  //    else if AFontWeight = TFontWeight.medium then Result := -0.25; // https://m3.material.io/styles/typography/type-scale-tokens#c6b074bb-8df8-4667-8fcf-8100f4dcda97
  //  end;
  //  16: begin
  //    // Emphasized type styles
  //    // https://m3.material.io/styles/typography/type-scale-tokens#a56472a3-f826-48f2-b32a-c07704f2fb89
  //    // here medium is with a font spacing of 0.5
  //    if AFontWeight = TFontWeight.regular then Result := 0.5 // https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
  //    else if AFontWeight = TFontWeight.medium then Result := 0.15 // https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
  //    else if AFontWeight = TFontWeight.bold then Result := 0.15; // https://m3.material.io/styles/typography/type-scale-tokens#c6b074bb-8df8-4667-8fcf-8100f4dcda97
  //  end;
  //  14: begin
  //    // Emphasized type styles
  //    // https://m3.material.io/styles/typography/type-scale-tokens#a56472a3-f826-48f2-b32a-c07704f2fb89
  //    // here medium is with a font spacing of 0.25
  //    if AFontWeight = TFontWeight.regular then Result := 0.25 // https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
  //    else if AFontWeight = TFontWeight.medium then Result := 0.1 // https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
  //    else if AFontWeight = TFontWeight.bold then Result := 0.1; // https://m3.material.io/styles/typography/type-scale-tokens#c6b074bb-8df8-4667-8fcf-8100f4dcda97
  //  end;
  //  12: begin
  //    // Emphasized type styles
  //    // https://m3.material.io/styles/typography/type-scale-tokens#a56472a3-f826-48f2-b32a-c07704f2fb89
  //    // here medium is with a font spacing of 0.4
  //    if AFontWeight = TFontWeight.regular then Result := 0.4 // https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
  //    else if AFontWeight = TFontWeight.medium then Result := 0.5 // https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
  //    else if AFontWeight = TFontWeight.bold then Result := 0.5; // https://m3.material.io/styles/typography/type-scale-tokens#c6b074bb-8df8-4667-8fcf-8100f4dcda97
  //  end;
  //  11: begin
  //    if AFontWeight = TFontWeight.medium then Result := 0.5 // https://m3.material.io/styles/typography/type-scale-tokens#a734c6ed-634c-4abb-adb2-35daf0aed06a
  //    else if AFontWeight = TFontWeight.bold then Result := 0.5; // https://m3.material.io/styles/typography/type-scale-tokens#c6b074bb-8df8-4667-8fcf-8100f4dcda97
  //  end;
  //end;

end;

/////////////
// CONTROL //
/////////////

{**********************************************************************************}
procedure ALResetControlStyle(const AControl: TALControl; const ARatio: Single = 1);
begin
  //With AControl do begin
    //BeginUpdate;
    //Try
      // --TALControl
      //Align
      //AutoAlignToPixel
      //AutoSize
      //DoubleBuffered
      //Pivot
      //Scale
      // --TControl
      //Anchors
      //CanFocus
      //CanParentFocus
      //ClipChildren
      //ClipParent
      //Cursor
      //DisabledOpacity
      //DragMode
      //EnableDragHighlight
      //Enabled
      //Hint
      //HitTest
      //Locked
      //Margins
      //Opacity
      //Padding
      //ParentShowHint
      //Position
      //RotationAngle
      //ShowHint
      //Size
      //StyleName
      //TabOrder
      //TabStop
      //Tag
      //TagFloat
      //TagObject
      //TagString
      //TouchTargetExpansion
      //Visible
    //Finally
      //EndUpdate;
    //End;
  //end;
end;

///////////
// SHAPE //
///////////

{****************************************************************************}
procedure ALResetShapeStyle(const AShape: TALShape; const ARatio: Single = 1);
begin
  With AShape do begin
    BeginUpdate;
    Try
      ALResetControlStyle(AShape, ARatio);
      Fill.Reset;
      Stroke.Reset;
      Stroke.Thickness := RoundTo(Stroke.DefaultThickness * ARatio, -2);
      Shadow.Reset;
    Finally
      EndUpdate;
    End;
  end;
end;

///////////////
// RECTANGLE //
///////////////

{********************************************************************************************}
procedure ALResetRectangleStyle(const ARectangle: TALBaseRectangle; const ARatio: Single = 1);
begin
  With ARectangle do begin
    BeginUpdate;
    Try
      ALResetShapeStyle(ARectangle, ARatio);
      //DoubleBuffered
      XRadius := ARectangle.DefaultXRadius;
      YRadius := ARectangle.DefaultYRadius;
      if XRadius > 0 then XRadius := RoundTo(XRadius * ARatio, -2);
      if YRadius > 0 then YRadius := RoundTo(YRadius * ARatio, -2);
      Corners := ARectangle.DefaultCorners;
      Sides := ARectangle.DefaultSides;
      //CacheIndex
      //CacheEngine
    Finally
      EndUpdate;
    End;
  end;
end;

////////////
// LAYOUT //
////////////

{*******************************************************************************}
procedure ALResetLayoutStyle(const ALayout: TALLayout; const ARatio: Single = 1);
begin
  //With ALayout do begin
    //BeginUpdate;
    //Try
      //ALResetControlStyle(AShape, ARatio);
    //Finally
      //EndUpdate;
    //End;
  //end;
end;

///////////
// IMAGE //
///////////

{****************************************************************************}
procedure ALResetImageStyle(const AImage: TALImage; const ARatio: Single = 1);
begin
  With AImage do begin
    BeginUpdate;
    Try
      ALResetControlStyle(AImage, ARatio);
      BackgroundColor := DefaultBackgroundColor;
      BackgroundColorKey := DefaultBackgroundColorKey;
      LoadingColor := DefaultLoadingColor;
      LoadingColorKey := DefaultLoadingColorKey;
      //ResourceName
      //MaskResourceName
      //ReadyAfterResourcesLoaded
      //WrapMode
      //ExifOrientationInfo
      //RotateAccordingToExifOrientation
      Corners := DefaultCorners;
      Sides := DefaultSides;
      XRadius := DefaultXRadius;
      YRadius := DefaultYRadius;
      if XRadius > 0 then XRadius := RoundTo(XRadius * ARatio, -2);
      if YRadius > 0 then YRadius := RoundTo(YRadius * ARatio, -2);
      BlurRadius := DefaultBlurRadius;
      //CacheIndex
      //LoadingCacheIndex
      //CacheEngine
      //CropCenter
      Stroke.Reset;
      Stroke.Thickness := RoundTo(Stroke.DefaultThickness * ARatio, -2);
      Shadow.Reset;
      //FadeInDuration
    Finally
      EndUpdate;
    End;
  end;
end;

//////////
// TEXT //
//////////

Type
  _TALBaseTextProtectedAccess = Class(TALBaseText);

{*****************************************************************************}
procedure ALResetTextStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
  With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      ALResetShapeStyle(AText, ARatio);
      //DoubleBuffered
      //CacheIndex
      //CacheEngine
      //AutoTranslate
      //Text
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Size := RoundTo(TextSettings.Font.DefaultSize * ARatio, -2);
      TextSettings.LineHeightMultiplier := ALEstimateLineHeightMultiplier(TextSettings.Font.Size);
      TextSettings.LetterSpacing := ALEstimateLetterSpacing(TextSettings.Font.Size, TextSettings.Font.Weight);
      //MaxWidth
      //MaxHeight
      XRadius := DefaultXRadius;
      YRadius := DefaultYRadius;
      if XRadius > 0 then XRadius := RoundTo(XRadius * ARatio, -2);
      if YRadius > 0 then YRadius := RoundTo(YRadius * ARatio, -2);
      Corners := AllCorners;
      Sides := AllSides;
    Finally
      EndUpdate;
    End;
  end;
end;

{**************************************************************************************************}
procedure ALApplyMaterial3TextDisplayLargeStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 57;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 64/TextSettings.font.Size;
      TextSettings.LetterSpacing := -0.25;
    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
procedure ALApplyMaterial3TextDisplayMediumStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 45;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 52/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{**************************************************************************************************}
procedure ALApplyMaterial3TextDisplaySmallStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 36;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 44/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
procedure ALApplyMaterial3TextHeadlineLargeStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 32;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 40/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{****************************************************************************************************}
procedure ALApplyMaterial3TextHeadlineMediumStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 28;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 36/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
procedure ALApplyMaterial3TextHeadlineSmallStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 24;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 32/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************************}
procedure ALApplyMaterial3TextTitleLargeStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 22;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 28/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{*************************************************************************************************}
procedure ALApplyMaterial3TextTitleMediumStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 16;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 24/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.15;
    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************************}
procedure ALApplyMaterial3TextTitleSmallStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 14;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 20/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.1;
    finally
      EndUpdate;
    end;
  end;
end;

{***********************************************************************************************}
procedure ALApplyMaterial3TextBodyLargeStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 16;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 24/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.5;
    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************************}
procedure ALApplyMaterial3TextBodyMediumStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 14;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 20/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.25;
    finally
      EndUpdate;
    end;
  end;
end;

{***********************************************************************************************}
procedure ALApplyMaterial3TextBodySmallStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 12;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 16/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.4;
    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************************}
procedure ALApplyMaterial3TextLabelLargeStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 14;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 20/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.1;
    finally
      EndUpdate;
    end;
  end;
end;

{*************************************************************************************************}
procedure ALApplyMaterial3TextLabelMediumStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 12;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 16/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.5;
    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************************}
procedure ALApplyMaterial3TextLabelSmallStyle(const AText: TALBaseText; const ARatio: Single = 1);
begin
   With _TALBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 11;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 16/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.5;
    finally
      EndUpdate;
    end;
  end;
end;

//////////
// EDIT //
//////////

{*****************************************************************************}
procedure ALResetEditStyle(const AEdit: TALBaseEdit; const ARatio: Single = 1);
begin
  With AEdit do begin
    BeginUpdate;
    Try
      ALResetRectangleStyle(AEdit, ARatio);
      if AEdit is TALEdit then TALEdit(AEdit).AutoSize := TALAutoSizeMode.Both
      else if AEdit is TALMemo then TALMemo(AEdit).AutoSizeLineCount := 0;
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion.Rect := ALScaleRect(TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
      TintColor := TalphaColors.null;
      TintColorKey := '';
      PromptTextcolor := TAlphaColors.null;
      PromptTextcolorKey := '';
      DefStyleAttr := '';
      DefStyleRes := '';
      //--
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Size := RoundTo(TextSettings.Font.DefaultSize * ARatio, -2);
      //--
      LPrevIsHtml := LabelTextSettings.IsHtml;
      LabelTextSettings.Reset;
      LabelTextSettings.IsHtml := LPrevIsHtml;
      LabelTextSettings.Font.Size := RoundTo(LabelTextSettings.Font.DefaultSize * ARatio, -2);
      LabelTextSettings.Margins.Rect := ALScaleRect(LabelTextSettings.Margins.DefaultValue, ARatio).RoundTo(-2);
      //--
      LPrevIsHtml := SupportingTextSettings.IsHtml;
      SupportingTextSettings.Reset;
      SupportingTextSettings.IsHtml := LPrevIsHtml;
      SupportingTextSettings.Font.Size := RoundTo(SupportingTextSettings.Font.DefaultSize * ARatio, -2);
      //SupportingTextSettings.Margins.Rect := ALScaleRect(SupportingTextSettings.Margins.DefaultValue, ARatio).RoundTo(-2);
      //--
      StateStyles.Reset;
    Finally
      EndUpdate;
    End;
  end;
end;

{****************************************************************************************}
//https://m3.material.io/components/text-fields/specs#f967d3f6-0139-43f7-8336-510022684fd1
procedure ALApplyMaterial3EditFilledStyle(const AEdit: TALBaseEdit; const ARatio: Single = 1);
begin
  With AEdit do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetEditStyle(AEdit, ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 12*ARatio{Top}, 16*ARatio{Right}, 12*ARatio{Bottom}).RoundTo(-2);
      Corners := [TCorner.TopLeft, Tcorner.TopRight];
      Sides := [TSide.Bottom];
      XRadius := RoundTo(4 * ARatio, -2);
      YRadius := RoundTo(4 * ARatio, -2);
      DefStyleAttr := 'Material3Edit';
      TintColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Fill.ColorKey := 'Material3.Color.SurfaceContainerHighest'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      Stroke.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      LabelTextSettings.Layout := TALEdit.TLabelTextLayout.Inline;
      LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      LabelTextSettings.Margins.Rect := TRectF.Create(0,-4*ARatio,0,4*ARatio).RoundTo(-2);
      SupportingTextSettings.Layout := TALEdit.TSupportingTextLayout.Inline;
      SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      SupportingTextSettings.Margins.Rect := TRectF.Create(0,4*ARatio,0,0).RoundTo(-2);
      PromptTextColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha04'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Stroke.assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Disabled.LabelTextSettings.Inherit := False;
      StateStyles.Disabled.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.SupportingTextSettings.Assign(SupportingTextSettings);
      StateStyles.Disabled.SupportingTextSettings.Inherit := False;
      StateStyles.Disabled.SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.PromptTextcolorKey := StateStyles.Disabled.LabelTextSettings.Font.ColorKey;
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Stroke.assign(Stroke);
      StateStyles.Hovered.Stroke.Inherit := False;
      StateStyles.Hovered.Stroke.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Focused--
      StateStyles.Focused.Stroke.assign(Stroke);
      StateStyles.Focused.Stroke.Inherit := False;
      StateStyles.Focused.Stroke.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Focused.Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Focused.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Focused.LabelTextSettings.Inherit := False;
      StateStyles.Focused.LabelTextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Focused.PromptTextcolorKey := StateStyles.Focused.LabelTextSettings.Font.ColorKey;

    finally
      EndUpdate;
    end;
  end;
end;

{****************************************************************************************}
//https://m3.material.io/components/text-fields/specs#e4964192-72ad-414f-85b4-4b4357abb83c
procedure ALApplyMaterial3EditOutlinedStyle(const AEdit: TALBaseEdit; const ARatio: Single = 1);
begin
  With AEdit do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetEditStyle(AEdit, ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 16*ARatio{Top}, 16*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      XRadius := RoundTo(4 * ARatio, -2);
      YRadius := RoundTo(4 * ARatio, -2);
      DefStyleAttr := 'Material3Edit';
      TintColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Fill.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF
      Stroke.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      LabelTextSettings.Layout := TALEdit.TLabelTextLayout.floating;
      LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      LabelTextSettings.Margins.Rect := TRectF.Create(0,0,0,-6*ARatio).RoundTo(-2);
      SupportingTextSettings.Layout := TALEdit.TSupportingTextLayout.Inline;
      SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      SupportingTextSettings.Margins.Rect := TRectF.Create(0,4*ARatio,0,0).RoundTo(-2);
      PromptTextColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Stroke.assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Disabled.LabelTextSettings.Inherit := False;
      StateStyles.Disabled.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.SupportingTextSettings.Assign(SupportingTextSettings);
      StateStyles.Disabled.SupportingTextSettings.Inherit := False;
      StateStyles.Disabled.SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.PromptTextcolorKey := StateStyles.Disabled.LabelTextSettings.Font.ColorKey;
      //--Hovered--
      StateStyles.Hovered.Stroke.assign(Stroke);
      StateStyles.Hovered.Stroke.Inherit := False;
      StateStyles.Hovered.Stroke.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Hovered.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Hovered.LabelTextSettings.Inherit := False;
      StateStyles.Hovered.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Hovered.PromptTextcolorKey := StateStyles.Hovered.LabelTextSettings.Font.ColorKey;
      //--Focused--
      StateStyles.Focused.Stroke.assign(Stroke);
      StateStyles.Focused.Stroke.Inherit := False;
      StateStyles.Focused.Stroke.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Focused.Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Focused.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Focused.LabelTextSettings.Inherit := False;
      StateStyles.Focused.LabelTextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Focused.PromptTextcolorKey := StateStyles.Focused.LabelTextSettings.Font.ColorKey;

    finally
      EndUpdate;
    end;
  end;
end;

{****************************************************************************************}
//https://m3.material.io/components/text-fields/specs#f967d3f6-0139-43f7-8336-510022684fd1
procedure ALApplyMaterial3EditHybridStyle(const AEdit: TALBaseEdit; const ARatio: Single = 1);
begin
  With AEdit do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetEditStyle(AEdit, ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 16*ARatio{Top}, 16*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      XRadius := RoundTo(4 * ARatio, -2);
      YRadius := RoundTo(4 * ARatio, -2);
      DefStyleAttr := 'Material3Edit';
      TintColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Fill.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF
      Stroke.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      LabelTextSettings.Layout := TALEdit.TLabelTextLayout.Inline;
      LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      LabelTextSettings.Margins.Rect := TRectF.Create(0,-4*ARatio,0,4*ARatio).RoundTo(-2);
      SupportingTextSettings.Layout := TALEdit.TSupportingTextLayout.Inline;
      SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      SupportingTextSettings.Margins.Rect := TRectF.Create(0,4*ARatio,0,0).RoundTo(-2);
      PromptTextColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Stroke.assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Disabled.LabelTextSettings.Inherit := False;
      StateStyles.Disabled.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.SupportingTextSettings.Assign(SupportingTextSettings);
      StateStyles.Disabled.SupportingTextSettings.Inherit := False;
      StateStyles.Disabled.SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.PromptTextcolorKey := StateStyles.Disabled.LabelTextSettings.Font.ColorKey;
      //--Hovered--
      StateStyles.Hovered.Stroke.assign(Stroke);
      StateStyles.Hovered.Stroke.Inherit := False;
      StateStyles.Hovered.Stroke.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Hovered.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Hovered.LabelTextSettings.Inherit := False;
      StateStyles.Hovered.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Hovered.PromptTextcolorKey := StateStyles.Hovered.LabelTextSettings.Font.ColorKey;
      //--Focused--
      StateStyles.Focused.Stroke.assign(Stroke);
      StateStyles.Focused.Stroke.Inherit := False;
      StateStyles.Focused.Stroke.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Focused.Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Focused.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Focused.LabelTextSettings.Inherit := False;
      StateStyles.Focused.LabelTextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Focused.PromptTextcolorKey := StateStyles.Focused.LabelTextSettings.Font.ColorKey;

    finally
      EndUpdate;
    end;
  end;
end;

{****************************************************************************************}
//https://m3.material.io/components/text-fields/specs#f967d3f6-0139-43f7-8336-510022684fd1
procedure ALApplyMaterial3EditFilledErrorStyle(const AEdit: TALBaseEdit; const ARatio: Single = 1);
begin
  With AEdit do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetEditStyle(AEdit, ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 12*ARatio{Top}, 16*ARatio{Right}, 12*ARatio{Bottom}).RoundTo(-2);
      Corners := [TCorner.TopLeft, Tcorner.TopRight];
      Sides := [TSide.Bottom];
      XRadius := RoundTo(4 * ARatio, -2);
      YRadius := RoundTo(4 * ARatio, -2);
      DefStyleAttr := 'Material3EditError';
      TintColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      Fill.ColorKey := 'Material3.Color.SurfaceContainerHighest'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      Stroke.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      LabelTextSettings.Layout := TALEdit.TLabelTextLayout.Inline;
      LabelTextSettings.Font.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      LabelTextSettings.Margins.Rect := TRectF.Create(0,-4*ARatio,0,4*ARatio).RoundTo(-2);
      SupportingTextSettings.Layout := TALEdit.TSupportingTextLayout.Inline;
      SupportingTextSettings.Font.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      SupportingTextSettings.Margins.Rect := TRectF.Create(0,4*ARatio,0,0).RoundTo(-2);
      PromptTextColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha04'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Stroke.assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Disabled.LabelTextSettings.Inherit := False;
      StateStyles.Disabled.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.SupportingTextSettings.Assign(SupportingTextSettings);
      StateStyles.Disabled.SupportingTextSettings.Inherit := False;
      StateStyles.Disabled.SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.PromptTextcolorKey := StateStyles.Disabled.LabelTextSettings.Font.ColorKey;
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Stroke.assign(Stroke);
      StateStyles.Hovered.Stroke.Inherit := False;
      StateStyles.Hovered.Stroke.ColorKey := 'Material3.Color.OnErrorContainer'; // md.sys.color.on-error-container / md.ref.palette.error30 / #8C1D18
      StateStyles.Hovered.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Hovered.LabelTextSettings.Inherit := False;
      StateStyles.Hovered.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnErrorContainer'; // md.sys.color.on-error-container / md.ref.palette.error30 / #8C1D18
      StateStyles.Hovered.PromptTextcolorKey := StateStyles.Hovered.LabelTextSettings.Font.ColorKey;
      //--Focused--
      StateStyles.Focused.Stroke.assign(Stroke);
      StateStyles.Focused.Stroke.Inherit := False;
      StateStyles.Focused.Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Focused.PromptTextcolorKey := LabelTextSettings.Font.ColorKey;

    finally
      EndUpdate;
    end;
  end;
end;

{****************************************************************************************}
//https://m3.material.io/components/text-fields/specs#e4964192-72ad-414f-85b4-4b4357abb83c
procedure ALApplyMaterial3EditOutlinedErrorStyle(const AEdit: TALBaseEdit; const ARatio: Single = 1);
begin
  With AEdit do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetEditStyle(AEdit, ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 16*ARatio{Top}, 16*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      XRadius := RoundTo(4 * ARatio, -2);
      YRadius := RoundTo(4 * ARatio, -2);
      DefStyleAttr := 'Material3EditError';
      TintColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      Fill.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF
      Stroke.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      LabelTextSettings.Layout := TALEdit.TLabelTextLayout.floating;
      LabelTextSettings.Font.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      LabelTextSettings.Margins.Rect := TRectF.Create(0,0,0,-6*ARatio).RoundTo(-2);
      SupportingTextSettings.Layout := TALEdit.TSupportingTextLayout.Inline;
      SupportingTextSettings.Font.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      SupportingTextSettings.Margins.Rect := TRectF.Create(0,4*ARatio,0,0).RoundTo(-2);
      PromptTextColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Stroke.assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Disabled.LabelTextSettings.Inherit := False;
      StateStyles.Disabled.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.SupportingTextSettings.Assign(SupportingTextSettings);
      StateStyles.Disabled.SupportingTextSettings.Inherit := False;
      StateStyles.Disabled.SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.PromptTextcolorKey := StateStyles.Disabled.LabelTextSettings.Font.ColorKey;
      //--Hovered--
      StateStyles.Hovered.Stroke.assign(Stroke);
      StateStyles.Hovered.Stroke.Inherit := False;
      StateStyles.Hovered.Stroke.ColorKey := 'Material3.Color.OnErrorContainer'; // md.sys.color.on-error-container / md.ref.palette.error30 / #8C1D18
      StateStyles.Hovered.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Hovered.LabelTextSettings.Inherit := False;
      StateStyles.Hovered.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnErrorContainer'; // md.sys.color.on-error-container / md.ref.palette.error30 / #8C1D18
      StateStyles.Hovered.PromptTextcolorKey := StateStyles.Hovered.LabelTextSettings.Font.ColorKey;
      //--Focused--
      StateStyles.Focused.Stroke.assign(Stroke);
      StateStyles.Focused.Stroke.Inherit := False;
      StateStyles.Focused.Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Focused.PromptTextcolorKey := LabelTextSettings.Font.ColorKey;

    finally
      EndUpdate;
    end;
  end;
end;

{****************************************************************************************}
//https://m3.material.io/components/text-fields/specs#f967d3f6-0139-43f7-8336-510022684fd1
procedure ALApplyMaterial3EditHybridErrorStyle(const AEdit: TALBaseEdit; const ARatio: Single = 1);
begin
  With AEdit do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetEditStyle(AEdit, ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 16*ARatio{Top}, 16*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      XRadius := RoundTo(4 * ARatio, -2);
      YRadius := RoundTo(4 * ARatio, -2);
      DefStyleAttr := 'Material3EditError';
      TintColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      Fill.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF
      Stroke.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      LabelTextSettings.Layout := TALEdit.TLabelTextLayout.Inline;
      LabelTextSettings.Font.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      LabelTextSettings.Margins.Rect := TRectF.Create(0,-4*ARatio,0,4*ARatio).RoundTo(-2);
      SupportingTextSettings.Layout := TALEdit.TSupportingTextLayout.Inline;
      SupportingTextSettings.Font.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      SupportingTextSettings.Margins.Rect := TRectF.Create(0,4*ARatio,0,0).RoundTo(-2);
      PromptTextColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Stroke.assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Disabled.LabelTextSettings.Inherit := False;
      StateStyles.Disabled.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.SupportingTextSettings.Assign(SupportingTextSettings);
      StateStyles.Disabled.SupportingTextSettings.Inherit := False;
      StateStyles.Disabled.SupportingTextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.PromptTextcolorKey := StateStyles.Disabled.LabelTextSettings.Font.ColorKey;
      //--Hovered--
      StateStyles.Hovered.Stroke.assign(Stroke);
      StateStyles.Hovered.Stroke.Inherit := False;
      StateStyles.Hovered.Stroke.ColorKey := 'Material3.Color.OnErrorContainer'; // md.sys.color.on-error-container / md.ref.palette.error30 / #8C1D18
      StateStyles.Hovered.LabelTextSettings.Assign(LabelTextSettings);
      StateStyles.Hovered.LabelTextSettings.Inherit := False;
      StateStyles.Hovered.LabelTextSettings.Font.ColorKey := 'Material3.Color.OnErrorContainer'; // md.sys.color.on-error-container / md.ref.palette.error30 / #8C1D18
      StateStyles.Hovered.PromptTextcolorKey := StateStyles.Hovered.LabelTextSettings.Font.ColorKey;
      //--Focused--
      StateStyles.Focused.Stroke.assign(Stroke);
      StateStyles.Focused.Stroke.Inherit := False;
      StateStyles.Focused.Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Focused.PromptTextcolorKey := LabelTextSettings.Font.ColorKey;

    finally
      EndUpdate;
    end;
  end;
end;

////////////
// BUTTON //
////////////

{*******************************************************************************}
procedure ALResetButtonStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try
      ALResetTextStyle(AButton, ARatio);
      AutoSize := TALAutoSizeMode.Both;
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion.Rect := ALScaleRect(TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.Reset;
    Finally
      EndUpdate;
    End;
  end;
end;

{********************************************************************************************************************************************************}
procedure ALApplyMaterial3ExpressiveButtonShapeAndTransition(const AButton: TALButton; const ANormalRadius, APressedRadius: Single; const ARatio: Single);
begin
  With AButton do begin
    BeginUpdate;
    Try

      var LNormalRadius: Single := ANormalRadius;
      var LPressedRadius: Single := APressedRadius;
      if LNormalRadius > 0 then LNormalRadius := RoundTo(LNormalRadius * ARatio, -2);
      if LPressedRadius > 0 then LPressedRadius := RoundTo(LPressedRadius * ARatio, -2);

      //--Enabled (default)--
      XRadius := LNormalRadius;
      YRadius := LNormalRadius;
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialExpressiveDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Hovered--
      //--Pressed--
      StateStyles.Pressed.XRadius := LPressedRadius;
      StateStyles.Pressed.YRadius := LPressedRadius;
      //--Focused--

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#cbfd91a6-d688-4be7-9a69-672549de3ea9
procedure ALApplyMaterial3ButtonFilledStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Shadow.Inherit := False;
      StateStyles.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonFilledStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonFilledStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonFilledStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonFilledStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonFilledStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonFilledXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFilledXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#4a0c06da-0b2f-47de-a583-97e0ae80b5a5
procedure ALApplyMaterial3ButtonOutlinedStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.Color := Talphacolors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      TextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Stroke.Assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      StateStyles.Focused.Stroke.assign(Stroke);
      StateStyles.Focused.Stroke.inherit := False;
      StateStyles.Focused.Stroke.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#4a0c06da-0b2f-47de-a583-97e0ae80b5a5
procedure ALApplyMaterial3ExpressiveButtonOutlinedStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALApplyMaterial3ButtonOutlinedStyle(AButton, ARatio);
      Stroke.ColorKey := 'Material3.Color.OutlineVariant'; // md.sys.color.outline-variant / md.ref.palette.neutral-variant80 / #CAC4D0
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      //--Disabled--
      StateStyles.Disabled.Stroke.Reset;
      //--Hovered--
      //--Pressed--
      //--Focused--
      StateStyles.Focused.Stroke.reset;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonOutlinedXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonOutlinedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#398d84eb-fc8a-4c8a-bfb4-82d2e85dee4d
procedure ALApplyMaterial3ButtonTextStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 10*ARatio{Top}, 12*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.Color := Talphacolors.Null;
      Fill.ColorKey := '';
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTextStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTextStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTextStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTextStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTextStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTextXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTextXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ButtonElevatedStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SurfaceContainerLow'; // md.sys.color.surface-container-low / md.ref.palette.neutral96 / #F7F2FA
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      Shadow.blur := RoundTo(2 * ARatio, -2);
      Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Shadow.inherit := False;
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Shadow.Inherit := False;
      StateStyles.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Hovered.Shadow.blur := RoundTo(3 * ARatio, -2);
      StateStyles.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonElevatedStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonElevatedStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonElevatedStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonElevatedStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonElevatedStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonElevatedXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonElevatedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#6ce8b926-87c4-4600-9bec-5deb4aaa65d8
procedure ALApplyMaterial3ButtonTonalStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALResetButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Shadow.Inherit := False;
      StateStyles.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTonalStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTonalStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTonalStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTonalStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonTonalStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveButtonTonalXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonTonalXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ButtonIconFilledStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetButtonStyle(AButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Fill.ImageTintColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXSmallWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledSmallWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledMediumWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledLargeWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconFilledStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconFilledXLargeWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconFilledXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#ba97cf8a-2112-47dc-af87-2e32aabccdde
procedure ALApplyMaterial3ButtonIconTonalStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetButtonStyle(AButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      Fill.ImageTintColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXSmallWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalSmallWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalMediumWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalLargeWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconTonalStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconTonalXLargeWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconTonalXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#05e02b7f-ebf2-4f02-9709-8230db3702b4
procedure ALApplyMaterial3ButtonIconOutlinedStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetButtonStyle(AButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.Color := TalphaColorRec.Null;
      Fill.ColorKey := '';
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Fill.ResourceName := LPrevResourceName;
      Stroke.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ResourceName := LPrevResourceName;
      StateStyles.Disabled.Stroke.Assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#4a0c06da-0b2f-47de-a583-97e0ae80b5a5
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALApplyMaterial3ButtonIconOutlinedStyle(AButton, ARatio);
      Stroke.ColorKey := 'Material3.Color.OutlineVariant'; // md.sys.color.outline-variant / md.ref.palette.neutral-variant80 / #CAC4D0
      //--Disabled--
      StateStyles.Disabled.Stroke.Reset;
      //--Hovered--
      //--Pressed--
      //--Focused--

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedSmallWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedMediumWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedLargeWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{****************************************************************************************************}
procedure ALApplyMaterial3ButtonIconStandardStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetButtonStyle(AButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ResourceName := LPrevResourceName;
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXSmallWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardSmallWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardMediumWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardLargeWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeNarrowStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeNarrowRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeNarrowSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeWideStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ButtonIconStandardStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeWideRoundStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveButtonIconStandardXLargeWideSquareStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonIconStandardXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABStyle(const AButton: TALButton; const AContainerColorKey, AIconColorKey: String; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetButtonStyle(AButton);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := RoundTo(16 * ARatio, -2);
      YRadius := RoundTo(16 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio,16*ARatio,16*ARatio,16*ARatio).RoundTo(-2);
      Fill.ColorKey := AContainerColorKey;
      Fill.ImageTintColorKey := AIconColorKey;
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      Shadow.blur := RoundTo(6 * ARatio, -2);
      Shadow.OffsetY := RoundTo(4 * ARatio, -2);
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialExpressiveDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := AIconColorKey;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Shadow.Inherit := False;
      StateStyles.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Hovered.Shadow.blur := RoundTo(8 * ARatio, -2);
      StateStyles.Hovered.Shadow.OffsetY := RoundTo(5 * ARatio, -2);
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := AIconColorKey;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := AIconColorKey;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalPrimarySmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveButtonFABStyle(AButton, 'Material3.Color.PrimaryContainer', 'Material3.Color.OnPrimaryContainer', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalPrimaryMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABTonalPrimarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalPrimaryLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABTonalPrimarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalSecondarySmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveButtonFABStyle(AButton, 'Material3.Color.SecondaryContainer', 'Material3.Color.OnSecondaryContainer', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalSecondaryMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABTonalSecondarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalSecondaryLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABTonalSecondarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalTertiarySmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveButtonFABStyle(AButton, 'Material3.Color.TertiaryContainer', 'Material3.Color.OnTertiaryContainer', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalTertiaryMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABTonalTertiarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTonalTertiaryLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABTonalTertiarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABPrimarySmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveButtonFABStyle(AButton, 'Material3.Color.Primary', 'Material3.Color.OnPrimary', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABPrimaryMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABPrimarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABPrimaryLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABPrimarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABSecondarySmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveButtonFABStyle(AButton, 'Material3.Color.Secondary', 'Material3.Color.OnSecondary', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABSecondaryMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABSecondarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABSecondaryLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABSecondarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTertiarySmallStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveButtonFABStyle(AButton, 'Material3.Color.Tertiary', 'Material3.Color.OnTertiary', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTertiaryMediumStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABTertiarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveButtonFABTertiaryLargeStyle(const AButton: TALButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveButtonFABTertiarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

//////////////////
// TOGGLEBUTTON //
//////////////////

{*************************************************************************************************}
procedure ALResetToggleButtonStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try
      ALResetTextStyle(AToggleButton, ARatio);
      AutoSize := TALAutoSizeMode.Both;
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion.Rect := ALScaleRect(TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.Reset;
    Finally
      EndUpdate;
    End;
  end;
end;

{******************************************************************************************************************************************************************************************}
procedure ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(const AToggleButton: TALToggleButton; const ANormalRadius, APressedRadius, ACheckedRadius: Single; const ARatio: Single);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      var LNormalRadius: Single := ANormalRadius;
      var LPressedRadius: Single := APressedRadius;
      var LCheckedRadius: Single := ACheckedRadius;
      if LNormalRadius > 0 then LNormalRadius := RoundTo(LNormalRadius * ARatio, -2);
      if LPressedRadius > 0 then LPressedRadius := RoundTo(LPressedRadius * ARatio, -2);
      if LCheckedRadius > 0 then LCheckedRadius := RoundTo(LCheckedRadius * ARatio, -2);

      //--Enabled (default)--
      XRadius := LNormalRadius;
      YRadius := LNormalRadius;
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialExpressiveDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.XRadius := LCheckedRadius;
      StateStyles.Checked.Default.YRadius := LCheckedRadius;

      //--Hovered (UnChecked)--
      //--Hovered (Checked)--

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.XRadius := LPressedRadius;
      StateStyles.UnChecked.Pressed.YRadius := LPressedRadius;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.XRadius := LPressedRadius;
      StateStyles.Checked.Pressed.YRadius := LPressedRadius;

      //--Focused (UnChecked)--
      //--Focused (Checked)--

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#cbfd91a6-d688-4be7-9a69-672549de3ea9
procedure ALApplyMaterial3ExpressiveToggleButtonFilledStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetToggleButtonStyle(AToggleButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SurfaceContainer'; // md.sys.color.surface-container / md.ref.palette.neutral94 / #F3EDF7
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Default.TextSettings.Inherit := False;
      StateStyles.Checked.Default.TextSettings.Font.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.UnChecked.Disabled.TextSettings.Inherit := False;
      StateStyles.UnChecked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Disabled.TextSettings.Inherit := False;
      StateStyles.Checked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.UnChecked.Hovered.Shadow.Inherit := False;
      StateStyles.UnChecked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.UnChecked.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.UnChecked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Checked.Hovered.Shadow.Inherit := False;
      StateStyles.Checked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Checked.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.UseContentColor := True;
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledXSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledXSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledXSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledMediumStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledStyle(AToggleButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledMediumRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledMediumSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledStyle(AToggleButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledXLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledStyle(AToggleButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledXLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonFilledXLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonFilledXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#4a0c06da-0b2f-47de-a583-97e0ae80b5a5
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetToggleButtonStyle(AToggleButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.Color := Talphacolors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.OutlineVariant'; // md.sys.color.outline-variant / md.ref.palette.neutral-variant80 / #CAC4D0
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.InverseSurface'; // md.sys.color.inverse-surface / md.ref.palette.neutral20 / #322F35
      StateStyles.Checked.Default.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Default.TextSettings.Inherit := False;
      StateStyles.Checked.Default.TextSettings.Font.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.UnChecked.Disabled.TextSettings.Inherit := False;
      StateStyles.UnChecked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.fill.Assign(Fill);
      StateStyles.Checked.Disabled.fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Disabled.TextSettings.Inherit := False;
      StateStyles.Checked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.UseContentColor := True;
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedXSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedXSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedXSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedMediumStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedStyle(AToggleButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedMediumRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedMediumSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedStyle(AToggleButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedXLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedStyle(AToggleButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedXLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonOutlinedXLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonOutlinedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetToggleButtonStyle(AToggleButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SurfaceContainerLow'; // md.sys.color.surface-container-low / md.ref.palette.neutral96 / #F7F2FA
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      Shadow.blur := RoundTo(2 * ARatio, -2);
      Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Primary'; //  md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Default.TextSettings.Inherit := False;
      StateStyles.Checked.Default.TextSettings.Font.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.UnChecked.Disabled.TextSettings.Inherit := False;
      StateStyles.UnChecked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Shadow.inherit := False;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Disabled.TextSettings.Inherit := False;
      StateStyles.Checked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Shadow.inherit := False;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.UnChecked.Hovered.Shadow.Inherit := False;
      StateStyles.UnChecked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.UnChecked.Hovered.Shadow.blur := RoundTo(3 * ARatio, -2);
      StateStyles.UnChecked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Checked.Hovered.Shadow.Inherit := False;
      StateStyles.Checked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Checked.Hovered.Shadow.blur := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.UseContentColor := True;
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedXSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedXSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedXSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedMediumStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedStyle(AToggleButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedMediumRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedMediumSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedStyle(AToggleButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedXLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedStyle(AToggleButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedXLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonElevatedXLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonElevatedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#6ce8b926-87c4-4600-9bec-5deb4aaa65d8
procedure ALApplyMaterial3ExpressiveToggleButtonTonalStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALResetToggleButtonStyle(AToggleButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Secondary'; // md.sys.color.secondary / md.ref.palette.secondary40 / #625B71
      StateStyles.Checked.Default.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Default.TextSettings.Inherit := False;
      StateStyles.Checked.Default.TextSettings.Font.ColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.UnChecked.Disabled.TextSettings.Inherit := False;
      StateStyles.UnChecked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Disabled.TextSettings.Inherit := False;
      StateStyles.Checked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.UnChecked.Hovered.Shadow.Inherit := False;
      StateStyles.UnChecked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.UnChecked.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.UnChecked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Checked.Hovered.Shadow.Inherit := False;
      StateStyles.Checked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Checked.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.UseContentColor := True;
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalXSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalXSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalXSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalMediumStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalStyle(AToggleButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalMediumRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalMediumSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalStyle(AToggleButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalXLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalStyle(AToggleButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalXLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveToggleButtonTonalXLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonTonalXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := AToggleButton.Fill.ResourceName;
      ALResetToggleButtonStyle(AToggleButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ColorKey := 'Material3.Color.SurfaceContainer'; // md.sys.color.surface-container / md.ref.palette.neutral94 / #F3EDF7
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.Fill.ImageTintColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ResourceName := LPrevResourceName;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#ba97cf8a-2112-47dc-af87-2e32aabccdde
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := AToggleButton.Fill.ResourceName;
      ALResetToggleButtonStyle(AToggleButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      Fill.ImageTintColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Secondary'; // md.sys.color.secondary / md.ref.palette.secondary40 / #625B71
      StateStyles.Checked.Default.Fill.ImageTintColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ResourceName := LPrevResourceName;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#05e02b7f-ebf2-4f02-9709-8230db3702b4
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := AToggleButton.Fill.ResourceName;
      ALResetToggleButtonStyle(AToggleButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.Color := TalphaColorRec.Null;
      Fill.ColorKey := '';
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Fill.ResourceName := LPrevResourceName;
      Stroke.ColorKey := 'Material3.Color.OutlineVariant'; // md.sys.color.outline-variant / md.ref.palette.neutral-variant80 / #CAC4D0
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.InverseSurface'; // md.sys.color.inverse-surface / md.ref.palette.neutral20 / #322F35
      StateStyles.Checked.Default.Fill.ImageTintColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ResourceName := LPrevResourceName;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{********************************************************************************************************************************}
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := AToggleButton.Fill.ResourceName;
      ALResetToggleButtonStyle(AToggleButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ResourceName := LPrevResourceName;
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ImageTintColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ResourceName := LPrevResourceName;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeNarrowStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeNarrowRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeNarrowSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeWideStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeWideRoundStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeWideSquareStyle(const AToggleButton: TALToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

//////////////
// CHECKBOX //
//////////////

type
  TALBaseCheckBoxStateStylesProtectedAccess = class(TALBaseCheckBox.TStateStyles);

{*****************************************************************************************}
procedure ALResetCheckBoxStyle(const ACheckBox: TALBaseCheckBox; const ARatio: Single = 1);
begin
  With ACheckBox do begin
    BeginUpdate;
    Try
      ALResetShapeStyle(ACheckBox, ARatio);
      var LSize := DefaultSize;
      LSize.Height := RoundTo(LSize.Height * ARatio, -2);
      LSize.Width := RoundTo(LSize.Width * ARatio, -2);
      Size.Size := LSize;
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion.Rect := ALScaleRect(TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
      XRadius := DefaultXRadius;
      YRadius := DefaultYRadius;
      if XRadius > 0 then XRadius := RoundTo(XRadius * ARatio, -2);
      if YRadius > 0 then YRadius := RoundTo(YRadius * ARatio, -2);
      Checkmark.Reset;
      Checkmark.Margins.Rect := ALScaleRect(Checkmark.Margins.DefaultValue, ARatio).RoundTo(-2);
      CheckMark.Thickness := RoundTo(CheckMark.DefaultThickness * ARatio, -2);
      StateStyles.Reset;
      StateStyles.Checked.Hovered.statelayer.margins.rect := ALScaleRect(StateStyles.Checked.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.Checked.Pressed.statelayer.margins.rect := ALScaleRect(StateStyles.Checked.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.Checked.Focused.statelayer.margins.rect := ALScaleRect(StateStyles.Checked.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.UnChecked.Hovered.statelayer.margins.rect := ALScaleRect(StateStyles.UnChecked.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.UnChecked.Pressed.statelayer.margins.rect := ALScaleRect(StateStyles.UnChecked.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.UnChecked.Focused.statelayer.margins.rect := ALScaleRect(StateStyles.UnChecked.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
    Finally
      EndUpdate;
    End;
  end;
end;

{*************************************************************************************}
//https://m3.material.io/components/checkbox/specs#fd29f662-6e61-4c1f-9b97-1145c3b33075
procedure ALApplyMaterial3CheckBoxStyle(const ACheckBox: TALBaseCheckBox; const ARatio: Single = 1);
begin
  With ACheckBox do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetCheckBoxStyle(ACheckBox, ARatio);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := RoundTo(2 * ARatio, -2);
      YRadius := RoundTo(2 * ARatio, -2);
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      CheckMark.Color := TAlphaColors.Null; // $FF1D1B20 / md.sys.color.on-surface / md.ref.palette.neutral10
      CheckMark.ColorKey := ''; // $FF1D1B20 / md.sys.color.on-surface / md.ref.palette.neutral10
      TALBaseCheckBoxStateStylesProtectedAccess(StateStyles).Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      TALBaseCheckBoxStateStylesProtectedAccess(StateStyles).Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.Fill.Assign(Fill);
      StateStyles.Checked.Default.Fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.Stroke.Assign(Stroke);
      StateStyles.Checked.Default.Stroke.Inherit := False;
      StateStyles.Checked.Default.Stroke.Thickness := 0;
      StateStyles.Checked.Default.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Default.CheckMark.Inherit := False;
      StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Stroke.assign(Stroke);
      StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12;

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12;
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12;

    finally
      EndUpdate;
    end;
  end;
end;

{*************************************************************************************}
//https://m3.material.io/components/checkbox/specs#fd29f662-6e61-4c1f-9b97-1145c3b33075
procedure ALApplyMaterial3CheckBoxErrorStyle(const ACheckBox: TALBaseCheckBox; const ARatio: Single = 1);
begin
  With ACheckBox do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetCheckBoxStyle(ACheckBox, ARatio);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := RoundTo(2 * ARatio, -2);
      YRadius := RoundTo(2 * ARatio, -2);
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      CheckMark.Color := TAlphaColors.Null; // $FFB3261E / md.sys.color.error / md.ref.palette.error40
      CheckMark.ColorKey := ''; // $FFB3261E / md.sys.color.error / md.ref.palette.error40
      TALBaseCheckBoxStateStylesProtectedAccess(StateStyles).Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      TALBaseCheckBoxStateStylesProtectedAccess(StateStyles).Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.Fill.Assign(Fill);
      StateStyles.Checked.Default.Fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Default.Stroke.Assign(Stroke);
      StateStyles.Checked.Default.Stroke.Inherit := False;
      StateStyles.Checked.Default.Stroke.Thickness := 0;
      StateStyles.Checked.Default.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Default.CheckMark.Inherit := False;
      StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.OnError'; // md.sys.color.on-error / md.ref.palette.error100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Stroke.assign(Stroke);
      StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12;

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12;
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12;

    finally
      EndUpdate;
    end;
  end;
end;

/////////////////
// RADIOBUTTON //
/////////////////

{**********************************************************************************************}
procedure ALResetRadioButtonStyle(const ARadioButton: TALRadioButton; const ARatio: Single = 1);
begin
  ALResetCheckBoxStyle(ARadioButton, ARatio);
end;

{*****************************************************************************************}
//https://m3.material.io/components/radio-button/specs#4eca59b9-dfb5-4ca4-9c76-8e664fb02137
procedure ALApplyMaterial3RadioButtonStyle(const ARadioButton: TALRadioButton; const ARatio: Single = 1);
begin
  With ARadioButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetRadioButtonStyle(ARadioButton, ARatio);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      CheckMark.Color := TAlphaColors.Null; // $FF1D1B20 / md.sys.color.on-surface / md.ref.palette.neutral10
      CheckMark.ColorKey := ''; // $FF1D1B20 / md.sys.color.on-surface / md.ref.palette.neutral10
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.Stroke.Assign(Stroke);
      StateStyles.Checked.Default.Stroke.Inherit := False;
      StateStyles.Checked.Default.Stroke.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Default.CheckMark.Inherit := False;
      StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Stroke.assign(Stroke);
      StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Stroke.assign(Stroke);
      StateStyles.Checked.Disabled.Stroke.Inherit := False;
      StateStyles.Checked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12;

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12;
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/radio-button/specs#4eca59b9-dfb5-4ca4-9c76-8e664fb02137
procedure ALApplyMaterial3RadioButtonErrorStyle(const ARadioButton: TALRadioButton; const ARatio: Single = 1);
begin
  With ARadioButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetRadioButtonStyle(ARadioButton, ARatio);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion.Rect := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      CheckMark.Color := TAlphaColors.Null; // $FFB3261E / md.sys.color.error / md.ref.palette.error40
      CheckMark.ColorKey := ''; // $FFB3261E / md.sys.color.error / md.ref.palette.error40
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Default.CheckMark.Inherit := False;
      StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Stroke.assign(Stroke);
      StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Stroke.assign(Stroke);
      StateStyles.Checked.Disabled.Stroke.Inherit := False;
      StateStyles.Checked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12;

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12;
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12;

    finally
      EndUpdate;
    end;
  end;
end;

////////////
// SWITCH //
////////////

{*******************************************************************************}
procedure ALResetSwitchStyle(const ASwitch: TALSwitch; const ARatio: Single = 1);
begin
  With ASwitch do begin
    BeginUpdate;
    Try
      var LSize := DefaultSize;
      LSize.Height := RoundTo(LSize.Height * ARatio, -2);
      LSize.Width := RoundTo(LSize.Width * ARatio, -2);
      Size.Size := LSize;
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion.Rect := ALScaleRect(TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
      //--
      ALResetShapeStyle(Track, ARatio);
      Track.Margins.Rect := ALScaleRect(Track.Margins.DefaultValue, ARatio).RoundTo(-2);
      Track.Padding.Rect := ALScaleRect(Track.Padding.DefaultValue, ARatio).RoundTo(-2);
      Track.TouchTargetExpansion.Rect := ALScaleRect(Track.TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
      Track.XRadius := Track.DefaultXRadius;
      Track.YRadius := Track.DefaultYRadius;
      if Track.XRadius > 0 then Track.XRadius := RoundTo(Track.XRadius * ARatio, -2);
      if Track.YRadius > 0 then Track.YRadius := RoundTo(Track.YRadius * ARatio, -2);
      Track.StateStyles.Reset;
      Track.StateStyles.Checked.Hovered.statelayer.margins.rect := ALScaleRect(Track.StateStyles.Checked.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.Checked.Pressed.statelayer.margins.rect := ALScaleRect(Track.StateStyles.Checked.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.Checked.Focused.statelayer.margins.rect := ALScaleRect(Track.StateStyles.Checked.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.UnChecked.Hovered.statelayer.margins.rect := ALScaleRect(Track.StateStyles.UnChecked.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.UnChecked.Pressed.statelayer.margins.rect := ALScaleRect(Track.StateStyles.UnChecked.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.UnChecked.Focused.statelayer.margins.rect := ALScaleRect(Track.StateStyles.UnChecked.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      //--
      ALResetCheckBoxStyle(Thumb, ARatio);
      Thumb.Margins.Rect := ALScaleRect(Thumb.Margins.DefaultValue, ARatio).RoundTo(-2);
      Thumb.Width := Height - Thumb.Margins.Top - Thumb.Margins.bottom;
    Finally
      EndUpdate;
    End;
  end;
end;

{***********************************************************************************}
//https://m3.material.io/components/switch/specs#e27a8630-f5e0-481a-ad24-0e8ebb8a8619
procedure ALApplyMaterial3SwitchStyle(const ASwitch: TALSwitch; const ARatio: Single = 1);
begin
  With ASwitch do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetSwitchStyle(ASwitch, ARatio);

      //--Default (UnChecked)--
      Track.StateStyles.UnChecked.Default.Stroke.Assign(Track.Stroke);
      Track.StateStyles.UnChecked.Default.Stroke.Inherit := False;
      Track.StateStyles.UnChecked.Default.Stroke.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      Track.StateStyles.UnChecked.Default.Stroke.Thickness := RoundTo(2 * ARatio, -2);
      Track.StateStyles.UnChecked.Default.fill.Assign(Track.fill);
      Track.StateStyles.UnChecked.Default.fill.Inherit := False;
      Track.StateStyles.UnChecked.Default.fill.ColorKey := 'Material3.Color.SurfaceContainerHighest'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      //--
      Thumb.StateStyles.UnChecked.Default.fill.Assign(Thumb.fill);
      Thumb.StateStyles.UnChecked.Default.fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Default.fill.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      Thumb.StateStyles.UnChecked.Default.Fill.BackgroundMargins.Rect := TRectF.Create(4*ARatio,4*ARatio,4*ARatio,4*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Default.CheckMark.Assign(Thumb.CheckMark);
      Thumb.StateStyles.UnChecked.Default.CheckMark.Inherit := False;
      Thumb.StateStyles.UnChecked.Default.CheckMark.Color := TAlphacolors.Null; // TALStyleManager.Instance.GetColor('Material3.Color.SurfaceContainerHighest'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      Thumb.StateStyles.UnChecked.Default.CheckMark.ColorKey := ''; // TALStyleManager.Instance.GetColor('Material3.Color.SurfaceContainerHighest'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      //--Default (Checked)--
      Track.StateStyles.Checked.Default.fill.Assign(Track.fill);
      Track.StateStyles.Checked.Default.fill.Inherit := False;
      Track.StateStyles.Checked.Default.fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      //--
      Thumb.StateStyles.Checked.Default.fill.Assign(Thumb.fill);
      Thumb.StateStyles.Checked.Default.fill.Inherit := False;
      Thumb.StateStyles.Checked.Default.fill.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      Thumb.StateStyles.Checked.Default.CheckMark.Assign(Thumb.CheckMark);
      Thumb.StateStyles.Checked.Default.CheckMark.Inherit := False;
      Thumb.StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.OnPrimaryContainer'; // md.sys.color.on-primary-container / md.ref.palette.primary30 / #4F378B

      //--Disabled (UnChecked)--
      Track.StateStyles.UnChecked.Disabled.Opacity := 1;
      Track.StateStyles.UnChecked.Disabled.Stroke.Assign(Track.Stroke);
      Track.StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      Track.StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Track.StateStyles.UnChecked.Disabled.Stroke.Thickness := RoundTo(2 * ARatio, -2);
      Track.StateStyles.UnChecked.Disabled.fill.Assign(Track.fill);
      Track.StateStyles.UnChecked.Disabled.fill.Inherit := False;
      Track.StateStyles.UnChecked.Disabled.fill.ColorKey := 'Material3.Color.SurfaceContainerHighest.Alpha12'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      //--
      Thumb.StateStyles.UnChecked.Disabled.Opacity := 1;
      Thumb.StateStyles.UnChecked.Disabled.fill.Assign(Thumb.fill);
      Thumb.StateStyles.UnChecked.Disabled.fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Thumb.StateStyles.UnChecked.Disabled.Fill.BackgroundMargins.Rect := TRectF.Create(4*ARatio,4*ARatio,4*ARatio,4*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Disabled.CheckMark.Assign(Thumb.CheckMark);
      Thumb.StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      Thumb.StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.SurfaceContainerHighest.Alpha38'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      //--Disabled (Checked)--
      Track.StateStyles.Checked.Disabled.Opacity := 1;
      Track.StateStyles.Checked.Disabled.fill.Assign(Track.fill);
      Track.StateStyles.Checked.Disabled.fill.Inherit := False;
      Track.StateStyles.Checked.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--
      Thumb.StateStyles.Checked.Disabled.Opacity := 1;
      Thumb.StateStyles.Checked.Disabled.fill.Assign(Thumb.fill);
      Thumb.StateStyles.Checked.Disabled.fill.Inherit := False;
      Thumb.StateStyles.Checked.Disabled.fill.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF
      Thumb.StateStyles.Checked.Disabled.CheckMark.Assign(Thumb.CheckMark);
      Thumb.StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      Thumb.StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      Thumb.StateStyles.UnChecked.Hovered.fill.Assign(Thumb.StateStyles.UnChecked.Default.fill);
      Thumb.StateStyles.UnChecked.Hovered.fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Hovered.fill.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Thumb.StateStyles.UnChecked.Hovered.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Thumb.StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      Thumb.StateStyles.Checked.Hovered.fill.Assign(Thumb.StateStyles.Checked.Default.fill);
      Thumb.StateStyles.Checked.Hovered.fill.Inherit := False;
      Thumb.StateStyles.Checked.Hovered.fill.ColorKey := 'Material3.Color.PrimaryContainer'; // md.sys.color.primary-container / md.ref.palette.primary90 / #EADDFF
      Thumb.StateStyles.Checked.Hovered.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Thumb.StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      Thumb.StateStyles.UnChecked.Pressed.Fill.Assign(Thumb.StateStyles.UnChecked.Default.fill);
      Thumb.StateStyles.UnChecked.Pressed.Fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Pressed.fill.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Thumb.StateStyles.UnChecked.Pressed.Fill.BackgroundMargins.Rect := TRectF.Create(-2*ARatio,-2*ARatio,-2*ARatio,-2*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Pressed.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Thumb.StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      Thumb.StateStyles.Checked.Pressed.Fill.Assign(Thumb.StateStyles.Checked.Default.fill);
      Thumb.StateStyles.Checked.Pressed.Fill.Inherit := False;
      Thumb.StateStyles.Checked.Pressed.fill.ColorKey := 'Material3.Color.PrimaryContainer'; // md.sys.color.primary-container / md.ref.palette.primary90 / #EADDFF
      Thumb.StateStyles.Checked.Pressed.Fill.BackgroundMargins.Rect := TRectF.Create(-2*ARatio,-2*ARatio,-2*ARatio,-2*ARatio).RoundTo(-2);
      Thumb.StateStyles.Checked.Pressed.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Thumb.StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      Thumb.StateStyles.UnChecked.Focused.fill.Assign(Thumb.StateStyles.UnChecked.Default.fill);
      Thumb.StateStyles.UnChecked.Focused.fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Focused.fill.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Thumb.StateStyles.UnChecked.Focused.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Thumb.StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      Thumb.StateStyles.Checked.Focused.fill.Assign(Thumb.StateStyles.Checked.Default.fill);
      Thumb.StateStyles.Checked.Focused.fill.Inherit := False;
      Thumb.StateStyles.Checked.Focused.fill.ColorKey := 'Material3.Color.PrimaryContainer'; // md.sys.color.primary-container / md.ref.palette.primary90 / #EADDFF
      Thumb.StateStyles.Checked.Focused.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Thumb.StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

//////////////
// TRACKBAR //
//////////////

type
  _TALCustomTrackProtectedAccess = class(TALCustomTrack);

{****************************************************************************************}
procedure ALResetTrackBarStyle(const ATrackBar: TALCustomTrack; const ARatio: Single = 1);

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function SwapTopBottomWithLeftRight(Const ARect: TrectF): TRectF;
  Begin
    Result.Left := ARect.Top;
    Result.Top := ARect.Left;
    Result.Right := ARect.Bottom;
    Result.Bottom := ARect.Right;
  End;

begin
  With _TALCustomTrackProtectedAccess(ATrackBar) do begin
    BeginUpdate;
    Try
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
        Height := RoundTo(DefaultSize.Height * ARatio, -2);
        //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
        Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
        TouchTargetExpansion.Rect := ALScaleRect(TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
      end
      else begin
        Width := RoundTo(DefaultSize.Height * ARatio, -2);
        //Margins.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2));
        Padding.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2));
        TouchTargetExpansion.Rect := SwapTopBottomWithLeftRight(ALScaleRect(TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2));
      end;
      //--
      if InactiveTrack <> nil then begin
        If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
          InactiveTrack.Margins.Rect := ALScaleRect(InactiveTrack.Margins.DefaultValue, ARatio).RoundTo(-2);
          InactiveTrack.Padding.Rect := ALScaleRect(InactiveTrack.Padding.DefaultValue, ARatio).RoundTo(-2);
          InactiveTrack.TouchTargetExpansion.Rect := ALScaleRect(InactiveTrack.TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
        end
        else begin
          InactiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(ALScaleRect(InactiveTrack.Margins.DefaultValue, ARatio).RoundTo(-2));
          InactiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(ALScaleRect(InactiveTrack.Padding.DefaultValue, ARatio).RoundTo(-2));
          InactiveTrack.TouchTargetExpansion.Rect := SwapTopBottomWithLeftRight(ALScaleRect(InactiveTrack.TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2));
        end;
        InactiveTrack.XRadius := InactiveTrack.DefaultXRadius;
        InactiveTrack.YRadius := InactiveTrack.DefaultYRadius;
        if InactiveTrack.XRadius > 0 then InactiveTrack.XRadius := RoundTo(InactiveTrack.XRadius * ARatio, -2);
        if InactiveTrack.YRadius > 0 then InactiveTrack.YRadius := RoundTo(InactiveTrack.YRadius * ARatio, -2);
        InactiveTrack.Corners := AllCorners;
        InactiveTrack.Opacity := 1;
        InactiveTrack.Fill.Reset;
        InactiveTrack.Stroke.Reset;
        InactiveTrack.Stroke.Thickness := RoundTo(InactiveTrack.Stroke.DefaultThickness * ARatio, -2);
        InactiveTrack.Shadow.Reset;
        InactiveTrack.stopIndicator.Reset;
        InactiveTrack.stopIndicator.Size := RoundTo(InactiveTrack.stopIndicator.DefaultSize * ARatio, -2);
        InactiveTrack.StateStyles.Reset;
      end;
      //--
      if ActiveTrack <> nil then begin
        If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
          ActiveTrack.Margins.Rect := ALScaleRect(ActiveTrack.Margins.DefaultValue, ARatio).RoundTo(-2);
          ActiveTrack.Padding.Rect := ALScaleRect(ActiveTrack.Padding.DefaultValue, ARatio).RoundTo(-2);
          ActiveTrack.TouchTargetExpansion.Rect := ALScaleRect(ActiveTrack.TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
        end
        else begin
          ActiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(ALScaleRect(ActiveTrack.Margins.DefaultValue, ARatio).RoundTo(-2));
          ActiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(ALScaleRect(ActiveTrack.Padding.DefaultValue, ARatio).RoundTo(-2));
          ActiveTrack.TouchTargetExpansion.Rect := SwapTopBottomWithLeftRight(ALScaleRect(ActiveTrack.TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2));
        end;
        ActiveTrack.XRadius := ActiveTrack.DefaultXRadius;
        ActiveTrack.YRadius := ActiveTrack.DefaultYRadius;
        if ActiveTrack.XRadius > 0 then ActiveTrack.XRadius := RoundTo(ActiveTrack.XRadius * ARatio, -2);
        if ActiveTrack.YRadius > 0 then ActiveTrack.YRadius := RoundTo(ActiveTrack.YRadius * ARatio, -2);
        ActiveTrack.Corners := AllCorners;
        ActiveTrack.Opacity := 1;
        ActiveTrack.Fill.Reset;
        ActiveTrack.Stroke.Reset;
        ActiveTrack.Stroke.Thickness := RoundTo(ActiveTrack.Stroke.DefaultThickness * ARatio, -2);
        ActiveTrack.Shadow.Reset;
        ActiveTrack.stopIndicator.Reset;
        ActiveTrack.stopIndicator.Size := RoundTo(ActiveTrack.stopIndicator.DefaultSize * ARatio, -2);
        ActiveTrack.StateStyles.Reset;
      end;
      //--
      if Thumb <> nil then begin
        If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
          Thumb.Margins.Rect := ALScaleRect(Thumb.Margins.DefaultValue, ARatio).RoundTo(-2);
          Thumb.Padding.Rect := ALScaleRect(Thumb.Padding.DefaultValue, ARatio).RoundTo(-2);
          Thumb.TouchTargetExpansion.Rect := ALScaleRect(Thumb.TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
          Thumb.Width := ATrackBar.Height - ATrackBar.Padding.Top - ATrackBar.Padding.Bottom - Thumb.Margins.Top - Thumb.Margins.Bottom
        end
        else begin
          Thumb.Margins.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Thumb.Margins.DefaultValue, ARatio).RoundTo(-2));
          Thumb.Padding.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Thumb.Padding.DefaultValue, ARatio).RoundTo(-2));
          Thumb.TouchTargetExpansion.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Thumb.TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2));
          Thumb.Height := ATrackBar.Width - ATrackBar.Padding.left - ATrackBar.Padding.right - Thumb.Margins.left - Thumb.Margins.right;
        end;
        Thumb.XRadius := Thumb.DefaultXRadius;
        Thumb.YRadius := Thumb.DefaultYRadius;
        if Thumb.XRadius > 0 then Thumb.XRadius := RoundTo(Thumb.XRadius * ARatio, -2);
        if Thumb.YRadius > 0 then Thumb.YRadius := RoundTo(Thumb.YRadius * ARatio, -2);
        Thumb.Corners := AllCorners;
        Thumb.Opacity := 1;
        Thumb.Fill.Reset;
        Thumb.Stroke.Reset;
        Thumb.Stroke.Thickness := RoundTo(Thumb.Stroke.DefaultThickness * ARatio, -2);
        Thumb.Shadow.Reset;
        Thumb.StateStyles.Reset;
        Thumb.StateStyles.Hovered.statelayer.margins.rect := ALScaleRect(Thumb.StateStyles.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
        Thumb.StateStyles.Pressed.statelayer.margins.rect := ALScaleRect(Thumb.StateStyles.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
        Thumb.StateStyles.Focused.statelayer.margins.rect := ALScaleRect(Thumb.StateStyles.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      end;
      //--
      if ValueIndicator <> nil then begin
        //ValueIndicator.Margins.Rect := ALScaleRect(ValueIndicator.Margins.DefaultValue, ARatio).RoundTo(-2);
        ValueIndicator.Padding.Rect := ALScaleRect(ValueIndicator.Padding.DefaultValue, ARatio).RoundTo(-2);
        ValueIndicator.TouchTargetExpansion.Rect := ALScaleRect(ValueIndicator.TouchTargetExpansion.DefaultValue, ARatio).RoundTo(-2);
        ValueIndicator.XRadius := ValueIndicator.DefaultXRadius;
        ValueIndicator.YRadius := ValueIndicator.DefaultYRadius;
        if ValueIndicator.XRadius > 0 then ValueIndicator.XRadius := RoundTo(ValueIndicator.XRadius * ARatio, -2);
        if ValueIndicator.YRadius > 0 then ValueIndicator.YRadius := RoundTo(ValueIndicator.YRadius * ARatio, -2);
        ValueIndicator.Animation := TValueIndicator.TAnimation.ScaleInOut;
        ValueIndicator.AutoSize := TALAutoSizeMode.Both;
        ValueIndicator.Corners := AllCorners;
        ValueIndicator.Sides := AllSides;
        ValueIndicator.Opacity := 1;
        ValueIndicator.Fill.Reset;
        ValueIndicator.Stroke.Reset;
        ValueIndicator.Stroke.Thickness := RoundTo(ValueIndicator.Stroke.DefaultThickness * ARatio, -2);
        ValueIndicator.Shadow.Reset;
        ValueIndicator.TextSettings.Reset;
      end;
    Finally
      EndUpdate;
    End;
  end;
end;

{*************************************************************************************}
//https://m3.material.io/components/TrackBar/specs#e27a8630-f5e0-481a-ad24-0e8ebb8a8619
procedure ALApplyMaterial3TrackBarStyle(const ATrackBar: TALCustomTrack; const ARatio: Single = 1);
begin
  With _TALCustomTrackProtectedAccess(ATrackBar) do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetTrackBarStyle(ATrackBar, ARatio);
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
        Height := RoundTo(44 * ARatio, -2);
        InactiveTrack.Margins.Rect := TRectF.Create(0,14*ARatio,0,14*ARatio).RoundTo(-2);
        ActiveTrack.Margins.Rect := TRectF.Create(0,14*ARatio,0,14*ARatio).RoundTo(-2);
        InactiveTrack.Padding.Rect := TRectF.Create(6*ARatio,0,6*ARatio,0).RoundTo(-2);
        ActiveTrack.Padding.Rect := TRectF.Create(6*ARatio,0,6*ARatio,0).RoundTo(-2);
      end
      else begin
        Width := RoundTo(44 * ARatio, -2);
        InactiveTrack.Margins.Rect := TRectF.Create(14*ARatio,0,14*ARatio,0).RoundTo(-2);
        ActiveTrack.Margins.Rect := TRectF.Create(14*ARatio,0,14*ARatio,0).RoundTo(-2);
        InactiveTrack.Padding.Rect := TRectF.Create(0,6*ARatio,0,6*ARatio).RoundTo(-2);
        ActiveTrack.Padding.Rect := TRectF.Create(0,6*ARatio,0,6*ARatio).RoundTo(-2);
      end;
      InactiveTrack.XRadius := -50;
      InactiveTrack.YRadius := -50;
      ActiveTrack.XRadius := -50;
      ActiveTrack.YRadius := -50;
      InactiveTrack.Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      ActiveTrack.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      InactiveTrack.StopIndicator.Size := RoundTo(4 * ARatio, -2);
      ActiveTrack.StopIndicator.Size := RoundTo(4 * ARatio, -2);
      InactiveTrack.StopIndicator.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      ActiveTrack.StopIndicator.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      ValueIndicator.TextSettings.Font.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      ValueIndicator.TextSettings.Font.Size := RoundTo(14 * ARatio, -2);
      ValueIndicator.padding.Rect := TRectF.create(16 * ARatio{Left}, 12 * ARatio{Top}, 16 * ARatio{Right}, 12 * ARatio{Bottom}).RoundTo(-2);
      ValueIndicator.Fill.ColorKey := 'Material3.Color.InverseSurface'; // md.sys.color.inverse-surface / md.ref.palette.neutral20 / #322F35
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
        Thumb.Margins.Rect := TRectF.Create(6*ARatio,0,6*ARatio,0).RoundTo(-2);
        Thumb.TouchTargetExpansion.Rect := TRectF.Create(22*ARatio,2*ARatio,22*ARatio,2*ARatio).RoundTo(-2);
        Thumb.Width := RoundTo(4 * ARatio, -2)
      end
      else begin
        Thumb.Margins.Rect := TRectF.Create(0,6*ARatio,0,6*ARatio).RoundTo(-2);
        Thumb.TouchTargetExpansion.Rect := TRectF.Create(2*ARatio,22*ARatio,2*ARatio,22*ARatio).RoundTo(-2);
        Thumb.Height := RoundTo(4 * ARatio, -2);
      end;
      Thumb.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Thumb.Stroke.Color := TalphaColors.Null;
      Thumb.Stroke.ColorKey := '';

      //--Disabled--
      InactiveTrack.StateStyles.Disabled.Opacity := 1;
      ActiveTrack.StateStyles.Disabled.Opacity := 1;
      //--
      InactiveTrack.StateStyles.Disabled.fill.Assign(InactiveTrack.Fill);
      InactiveTrack.StateStyles.Disabled.fill.Inherit := False;
      InactiveTrack.StateStyles.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--
      ActiveTrack.StateStyles.Disabled.fill.Assign(ActiveTrack.Fill);
      ActiveTrack.StateStyles.Disabled.fill.Inherit := False;
      ActiveTrack.StateStyles.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--
      InactiveTrack.StateStyles.Disabled.StopIndicator.Assign(InactiveTrack.StopIndicator);
      InactiveTrack.StateStyles.Disabled.StopIndicator.Inherit := False;
      InactiveTrack.StateStyles.Disabled.StopIndicator.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--
      ActiveTrack.StateStyles.Disabled.StopIndicator.Assign(ActiveTrack.StopIndicator);
      ActiveTrack.StateStyles.Disabled.StopIndicator.Inherit := False;
      ActiveTrack.StateStyles.Disabled.StopIndicator.ColorKey := 'Material3.Color.InverseOnSurface.Alpha66'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      //--
      Thumb.StateStyles.Disabled.Opacity := 1;
      Thumb.StateStyles.Disabled.fill.Assign(Thumb.Fill);
      Thumb.StateStyles.Disabled.fill.Inherit := False;
      Thumb.StateStyles.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered--

      //--Pressed--
      Thumb.StateStyles.Pressed.fill.Assign(Thumb.Fill);
      Thumb.StateStyles.Pressed.fill.Inherit := False;
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
        Thumb.StateStyles.Pressed.fill.BackgroundMargins.Rect := TRectF.Create(1*ARatio,0,1*ARatio,0).RoundTo(-2)
      else
        Thumb.StateStyles.Pressed.fill.BackgroundMargins.Rect := TRectF.Create(0,1*ARatio,0,1*ARatio).RoundTo(-2);

      //--Focused--
      Thumb.StateStyles.Focused.fill.Assign(Thumb.Fill);
      Thumb.StateStyles.Focused.fill.Inherit := False;
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
        Thumb.StateStyles.Focused.fill.BackgroundMargins.Rect := TRectF.Create(1*ARatio,0,1*ARatio,0).RoundTo(-2)
      else
        Thumb.StateStyles.Focused.fill.BackgroundMargins.Rect := TRectF.Create(0,1*ARatio,0,1*ARatio).RoundTo(-2);

    finally
      EndUpdate;
    end;
  end;
end;

///////////////
// SCROLLBAR //
///////////////

{**********************************************************************************************}
procedure ALResetScrollBarStyle(const AScrollBar: TALCustomScrollBar; const ARatio: Single = 1);
begin
  ALResetTrackBarStyle(AScrollBar, ARatio);
end;

{**************************************************************************************}
//https://m3.material.io/components/ScrollBar/specs#e27a8630-f5e0-481a-ad24-0e8ebb8a8619
procedure ALApplyMaterial3ScrollBarStyle(const AScrollBar: TALCustomScrollBar; const ARatio: Single = 1);
begin
  With _TALCustomTrackProtectedAccess(AScrollBar) do begin
    BeginUpdate;
    Try
      ALResetScrollBarStyle(AScrollBar, ARatio);
      Thumb.Fill.ColorKey := 'Material3.Color.OnSurface.alpha30';
      //--Disabled--
      //--Hovered--
      Thumb.StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurface';
      Thumb.StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      Thumb.StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurface';
      Thumb.StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      Thumb.StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurface';
      Thumb.StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
    finally
      EndUpdate;
    end;
  end;
end;

///////////////
// SCROLLBOX //
///////////////

type
  _TALCustomScrollBoxProtectedAccess = class(TALCustomScrollBox);

{********************************************************************}
procedure ALResetScrollBoxStyle(const AScrollBox: TALCustomScrollBox);
begin
  With _TALCustomScrollBoxProtectedAccess(AScrollBox) do begin
    BeginUpdate;
    Try
      ALResetRectangleStyle(AScrollBox);
      if HScrollBar <> nil then ALResetScrollBarStyle(HScrollBar);
      if VScrollBar <> nil then ALResetScrollBarStyle(VScrollBar);
    Finally
      EndUpdate;
    End;
  end;
end;

{*****************************************************************************}
procedure ALApplyMaterial3ScrollBoxStyle(const AScrollBox: TALCustomScrollBox);
begin
  With _TALCustomScrollBoxProtectedAccess(AScrollBox) do begin
    BeginUpdate;
    Try
      ALResetRectangleStyle(AScrollBox);
      if HScrollBar <> nil then ALApplyMaterial3ScrollBarStyle(HScrollBar);
      if VScrollBar <> nil then ALApplyMaterial3ScrollBarStyle(VScrollBar);
    finally
      EndUpdate;
    end;
  end;
end;

///////////////////
// DIALOGMANAGER //
///////////////////

{****************************************************************************************************}
procedure ALResetDialogManagerStyle(const ADialogManager: TALDialogManager; const ARatio: Single = 1);
begin
  With ADialogManager do begin

    // DefaultScrim
    ALResetRectangleStyle(DefaultScrim, ARatio);
    DefaultScrim.Align := TALAlignLayout.Contents;
    DefaultScrim.Fill.Color := $52000000; {Alpha = 32%}
    DefaultScrim.Stroke.Color := TAlphaColors.Null;
    DefaultScrim.Stroke.ColorKey := '';

    // DefaultContainer
    ALResetRectangleStyle(DefaultContainer);
    DefaultContainer.Padding.Rect := TRectF.Create(24*ARatio{Left}, 24*ARatio{Top}, 24*ARatio{Right}, 24*ARatio{Bottom}).RoundTo(-2);
    DefaultContainer.AutoSize := TALAutoSizeMode.Both;
    DefaultContainer.Align := TALAlignLayout.Center;
    DefaultContainer.Fill.Color := $FFFFFFFF;
    DefaultContainer.Fill.ColorKey := '';
    DefaultContainer.Stroke.Color := TAlphaColors.Null;
    DefaultContainer.Stroke.ColorKey := '';
    DefaultContainer.XRadius := RoundTo(28 * ARatio, -2);
    DefaultContainer.YRadius := RoundTo(28 * ARatio, -2);

    // DefaultIcon
    ALResetImageStyle(DefaultIcon);
    if CompareValue(ARatio, 1.10, TEpsilon.scale) > 0 then begin
      DefaultIcon.Width := RoundTo(32, -2);
      DefaultIcon.Height := RoundTo(32, -2);
    end
    else begin
      DefaultIcon.Width := RoundTo(24 * ARatio, -2);
      DefaultIcon.Height := RoundTo(24 * ARatio, -2);
    end;
    DefaultIcon.Align := TALAlignLayout.TopCenter;

    // DefaultHeadline
    var LRatio: Single := 24 / DefaultHeadline.Textsettings.Font.DefaultSize;
    ALResetTextStyle(DefaultHeadline, LRatio);
    if CompareValue(ARatio, 1, TEpsilon.scale) > 0 then DefaultHeadline.TextSettings.Font.Weight := TFontWeight.Medium;
    DefaultHeadline.Margins.Top := RoundTo(16 * ARatio, -2);
    DefaultHeadline.AutoSize := TALAutoSizeMode.Both;
    DefaultHeadline.Align := TALAlignLayout.TopLeft;

    // DefaultContent
    DefaultContent.Align := TALAlignLayout.TopLeft;
    DefaultContent.Margins.Rect := TRectF.Create(-24*ARatio{Left}, 16*ARatio{Top}, -24*ARatio{Right}, 0{Bottom}).RoundTo(-2);

    // DefaultMessage
    LRatio := 14 / DefaultMessage.Textsettings.Font.DefaultSize;
    ALResetTextStyle(DefaultMessage, LRatio * ARatio);
    DefaultMessage.Margins.Rect := TRectF.Create(24*ARatio{Left}, 0{Top}, 24*ARatio{Right}, 0{Bottom}).RoundTo(-2);
    DefaultMessage.AutoSize := TALAutoSizeMode.Both;
    DefaultMessage.Align := TALAlignLayout.TopLeft;

    // DefaultOptionLayout
    ALResetLayoutStyle(DefaultOptionLayout);
    DefaultOptionLayout.Margins.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 0{Bottom}).RoundTo(-2);
    DefaultOptionLayout.TagFloat := 12 * LRatio; // The padding top of the first item (except message) and padding bottom of the last item (except message)
    DefaultOptionLayout.AutoSize := TALAutoSizeMode.Both;
    DefaultOptionLayout.Align := TALAlignLayout.TopLeft;

    // DefaultRadioButton
    LRatio := (20 + ((14 * ARatio) - 14) / 2) / DefaultRadioButton.DefaultSize.Height;
    ALResetRadioButtonStyle(DefaultRadioButton, LRatio);
    DefaultRadioButton.Align := TALAlignLayout.MostLeftCenter;

    // DefaultCheckBox
    LRatio := (18 + ((14 * ARatio) - 14) / 2) / DefaultCheckBox.DefaultSize.Height;
    ALResetCheckBoxStyle(DefaultCheckBox, LRatio);
    DefaultCheckBox.Align := TALAlignLayout.MostLeftCenter;

    // DefaultInlineButton
    LRatio := 14 / DefaultInlineButton.Textsettings.Font.DefaultSize;
    ALResetButtonStyle(DefaultInlineButton, LRatio * ARatio);
    DefaultInlineButton.Margins.Rect := TRectF.Create(
                                          24*ARatio{Left},
                                          12*ARatio{Top},
                                          24*ARatio{Right},
                                          0{Bottom}).RoundTo(-2);
    DefaultInlineButton.TagFloat := 0; // The padding top of the first item (except message) and padding bottom of the last item (except message)
    DefaultInlineButton.AutoSize := TALAutoSizeMode.Both;
    DefaultInlineButton.Align := TALAlignLayout.TopLeft;

    // DefaultEdit
    LRatio := 16 / DefaultEdit.Textsettings.Font.DefaultSize;
    ALResetEditStyle(DefaultEdit, LRatio * ARatio);
    DefaultEdit.Margins.Rect := TRectF.Create(0{Left}, 16*ARatio{Top}, 0{Right}, 0{Bottom}).RoundTo(-2);
    DefaultEdit.AutoSize := TALAutoSizeMode.Both;
    DefaultEdit.Align := TALAlignLayout.TopLeft;

    // DefaultMemo
    LRatio := 16 / DefaultMemo.Textsettings.Font.DefaultSize;
    ALResetEditStyle(DefaultMemo, LRatio * ARatio);
    DefaultMemo.Margins.Rect := TRectF.Create(0{Left}, 16*ARatio{Top}, 0{Right}, 0{Bottom}).RoundTo(-2);
    DefaultMemo.AutoSizeLineCount := 3;
    DefaultMemo.Align := TALAlignLayout.TopLeft;

    // DefaultLabel
    LRatio := 14 / DefaultLabel.Textsettings.Font.DefaultSize;
    ALResetTextStyle(DefaultLabel, LRatio * ARatio);
    DefaultLabel.Margins.Left := RoundTo(12 * ARatio, -2);
    DefaultLabel.AutoSize := TALAutoSizeMode.Both;
    DefaultLabel.Align := TALAlignLayout.LeftCenter;
    DefaultLabel.HitTest := true;
    DefaultLabel.Cursor := crHandPoint;
    DefaultLabel.TouchTargetExpansion.Rect := TRectF.Create(6*ARatio{Left}, 6*ARatio{Top}, 6*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);

    // DefaultFooterBar
    ALResetRectangleStyle(DefaultFooterBar, ARatio);
    DefaultFooterBar.Margins.Top := RoundTo(24{* ARatio}, -2);
    DefaultFooterBar.AutoSize := TALAutoSizeMode.Both;
    DefaultFooterBar.Align := TALAlignLayout.TopRight;
    DefaultFooterBar.Fill.Color := TalphaColors.Null;
    DefaultFooterBar.Fill.ColorKey := '';
    DefaultFooterBar.Stroke.Color := TAlphaColors.Null;
    DefaultFooterBar.Stroke.ColorKey := '';

    // DefaultFooterButton
    LRatio := 14 / DefaultFooterButton.Textsettings.Font.DefaultSize;
    ALResetButtonStyle(DefaultFooterButton, LRatio);
    DefaultFooterButton.Margins.Left := RoundTo(8 * ARatio, -2);
    DefaultFooterButton.Align := TALAlignLayout.RightCenter;

  end;
end;

{************************************************************************************}
//https://m3.material.io/components/dialogs/specs#8e0c5daf-d82a-4963-8759-94769997de9f
procedure ALApplyMaterial3DialogManagerStyle(const ADialogManager: TALDialogManager; const ARatio: Single = 1);
begin
  With ADialogManager do begin

    // Default
    ALResetDialogManagerStyle(ADialogManager, ARatio);

    // DefaultScrim
    // https://m3.material.io/styles/elevation/applying-elevation#eb0451aa-61b5-4c35-8d5f-f5b434f63654
    DefaultScrim.Fill.ColorKey := 'Material3.Color.Scrim.Alpha32'; // Scrims use the scrim color role at an opacity of 32%.

    // DefaultContainer
    DefaultContainer.Fill.ColorKey := 'Material3.Color.SurfaceContainerHigh'; // md.sys.color.surface-container-high / md.ref.palette.neutral92 / #ECE6F0
    DefaultContainer.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
    DefaultContainer.Shadow.blur := RoundTo(6 * ARatio, -2);
    DefaultContainer.Shadow.OffsetY := RoundTo(2 * ARatio, -2);

    // DefaultIcon
    DefaultIcon.TintColorKey := 'Material3.Color.Secondary'; // md.sys.color.secondary / md.ref.palette.secondary40 / #625B71

    // DefaultHeadline
    DefaultHeadline.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

    // DefaultContent
    ALApplyMaterial3ScrollBoxStyle(DefaultContent);

    // DefaultMessage
    DefaultMessage.TextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F

    // DefaultOptionLayout

    // DefaultRadioButton
    var LRatio := (20 + ((14 * ARatio) - 14) / 2) / DefaultRadioButton.DefaultSize.Height;
    ALApplyMaterial3RadioButtonStyle(DefaultRadioButton, LRatio);

    // DefaultCheckBox
    LRatio := (18 + ((14 * ARatio) - 14) / 2) / DefaultCheckBox.DefaultSize.Height;
    ALApplyMaterial3CheckBoxStyle(DefaultCheckBox, LRatio);

    // DefaultInlineButton
    LRatio := 14 / DefaultInlineButton.Textsettings.Font.DefaultSize;
    ALApplyMaterial3ButtonTextStyle(DefaultInlineButton, LRatio * ARatio);
    DefaultInlineButton.Margins.Rect := TRectF.Create(
                                          (24*ARatio) - (DefaultInlineButton.Padding.Left){Left},
                                          12*ARatio{Top},
                                          (24*ARatio) - (DefaultInlineButton.Padding.Right){Right},
                                          -12*ARatio{Bottom}).RoundTo(-2);
    DefaultInlineButton.TextSettings.Font.ColorKey := DefaultMessage.TextSettings.Font.ColorKey;
    DefaultInlineButton.TextSettings.Font.Weight := TFontWeight.Regular;

    // DefaultEdit
    LRatio := 14 / DefaultEdit.Textsettings.Font.DefaultSize;
    ALApplyMaterial3EditHybridStyle(DefaultEdit, LRatio * ARatio);

    // DefaultMemo
    LRatio := 14 / DefaultMemo.Textsettings.Font.DefaultSize;
    ALApplyMaterial3EditHybridStyle(DefaultMemo, LRatio * ARatio);

    // DefaultLabel
    DefaultLabel.TextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F

    // DefaultFooterBar

    // DefaultFooterButton
    LRatio := 14 / DefaultFooterButton.Textsettings.Font.DefaultSize;
    ALApplyMaterial3ButtonTextStyle(DefaultFooterButton, LRatio * ARatio);

  end;
end;

{$REGION 'Auto-generated by <ALCINOE>\Tools\CodeBuilder (1)'}

////////////////////
// DynamicCONTROL //
////////////////////

{************************************************************************************************}
procedure ALResetDynamicControlStyle(const AControl: TALDynamicControl; const ARatio: Single = 1);
begin
  //With AControl do begin
    //BeginUpdate;
    //Try
      // --TALDynamicControl
      //Align
      //AutoAlignToPixel
      //AutoSize
      //DoubleBuffered
      //Pivot
      //Scale
      // --TControl
      //Anchors
      //CanFocus
      //CanParentFocus
      //ClipChildren
      //ClipParent
      //Cursor
      //DisabledOpacity
      //DragMode
      //EnableDragHighlight
      //Enabled
      //Hint
      //HitTest
      //Locked
      //Margins
      //Opacity
      //Padding
      //ParentShowHint
      //Position
      //RotationAngle
      //ShowHint
      //Size
      //StyleName
      //TabOrder
      //TabStop
      //Tag
      //TagFloat
      //TagObject
      //TagString
      //TouchTargetExpansion
      //Visible
    //Finally
      //EndUpdate;
    //End;
  //end;
end;

//////////////////
// DynamicSHAPE //
//////////////////

{******************************************************************************************}
procedure ALResetDynamicShapeStyle(const AShape: TALDynamicShape; const ARatio: Single = 1);
begin
  With AShape do begin
    BeginUpdate;
    Try
      ALResetDynamicControlStyle(AShape, ARatio);
      Fill.Reset;
      Stroke.Reset;
      Stroke.Thickness := RoundTo(Stroke.DefaultThickness * ARatio, -2);
      Shadow.Reset;
    Finally
      EndUpdate;
    End;
  end;
end;

//////////////////////
// DynamicRECTANGLE //
//////////////////////

{**********************************************************************************************************}
procedure ALResetDynamicRectangleStyle(const ARectangle: TALDynamicBaseRectangle; const ARatio: Single = 1);
begin
  With ARectangle do begin
    BeginUpdate;
    Try
      ALResetDynamicShapeStyle(ARectangle, ARatio);
      //DoubleBuffered
      XRadius := ARectangle.DefaultXRadius;
      YRadius := ARectangle.DefaultYRadius;
      if XRadius > 0 then XRadius := RoundTo(XRadius * ARatio, -2);
      if YRadius > 0 then YRadius := RoundTo(YRadius * ARatio, -2);
      Corners := ARectangle.DefaultCorners;
      Sides := ARectangle.DefaultSides;
      //CacheIndex
      //CacheEngine
    Finally
      EndUpdate;
    End;
  end;
end;

///////////////////
// DynamicLAYOUT //
///////////////////

{*********************************************************************************************}
procedure ALResetDynamicLayoutStyle(const ALayout: TALDynamicLayout; const ARatio: Single = 1);
begin
  //With ALayout do begin
    //BeginUpdate;
    //Try
      //ALResetDynamicControlStyle(AShape, ARatio);
    //Finally
      //EndUpdate;
    //End;
  //end;
end;

//////////////////
// DynamicIMAGE //
//////////////////

{******************************************************************************************}
procedure ALResetDynamicImageStyle(const AImage: TALDynamicImage; const ARatio: Single = 1);
begin
  With AImage do begin
    BeginUpdate;
    Try
      ALResetDynamicControlStyle(AImage, ARatio);
      BackgroundColor := DefaultBackgroundColor;
      BackgroundColorKey := DefaultBackgroundColorKey;
      LoadingColor := DefaultLoadingColor;
      LoadingColorKey := DefaultLoadingColorKey;
      //ResourceName
      //MaskResourceName
      //ReadyAfterResourcesLoaded
      //WrapMode
      //ExifOrientationInfo
      //RotateAccordingToExifOrientation
      Corners := DefaultCorners;
      Sides := DefaultSides;
      XRadius := DefaultXRadius;
      YRadius := DefaultYRadius;
      if XRadius > 0 then XRadius := RoundTo(XRadius * ARatio, -2);
      if YRadius > 0 then YRadius := RoundTo(YRadius * ARatio, -2);
      BlurRadius := DefaultBlurRadius;
      //CacheIndex
      //LoadingCacheIndex
      //CacheEngine
      //CropCenter
      Stroke.Reset;
      Stroke.Thickness := RoundTo(Stroke.DefaultThickness * ARatio, -2);
      Shadow.Reset;
      //FadeInDuration
    Finally
      EndUpdate;
    End;
  end;
end;

/////////////////
// DynamicTEXT //
/////////////////

Type
  _TALDynamicBaseTextProtectedAccess = Class(TALDynamicBaseText);

{*******************************************************************************************}
procedure ALResetDynamicTextStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
  With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      ALResetDynamicShapeStyle(AText, ARatio);
      //DoubleBuffered
      //CacheIndex
      //CacheEngine
      //AutoTranslate
      //Text
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Size := RoundTo(TextSettings.Font.DefaultSize * ARatio, -2);
      TextSettings.LineHeightMultiplier := ALEstimateLineHeightMultiplier(TextSettings.Font.Size);
      TextSettings.LetterSpacing := ALEstimateLetterSpacing(TextSettings.Font.Size, TextSettings.Font.Weight);
      //MaxWidth
      //MaxHeight
      XRadius := DefaultXRadius;
      YRadius := DefaultYRadius;
      if XRadius > 0 then XRadius := RoundTo(XRadius * ARatio, -2);
      if YRadius > 0 then YRadius := RoundTo(YRadius * ARatio, -2);
      Corners := AllCorners;
      Sides := AllSides;
    Finally
      EndUpdate;
    End;
  end;
end;

{****************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextDisplayLargeStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 57;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 64/TextSettings.font.Size;
      TextSettings.LetterSpacing := -0.25;
    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextDisplayMediumStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 45;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 52/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{****************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextDisplaySmallStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 36;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 44/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextHeadlineLargeStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 32;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 40/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{******************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextHeadlineMediumStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 28;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 36/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextHeadlineSmallStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 24;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 32/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{**************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextTitleLargeStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 22;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 28/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0;
    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextTitleMediumStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 16;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 24/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.15;
    finally
      EndUpdate;
    end;
  end;
end;

{**************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextTitleSmallStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 14;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 20/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.1;
    finally
      EndUpdate;
    end;
  end;
end;

{*************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextBodyLargeStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 16;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 24/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.5;
    finally
      EndUpdate;
    end;
  end;
end;

{**************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextBodyMediumStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 14;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 20/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.25;
    finally
      EndUpdate;
    end;
  end;
end;

{*************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextBodySmallStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 12;
      TextSettings.Font.Weight := TFontWeight.Regular;
      TextSettings.LineHeightMultiplier := 16/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.4;
    finally
      EndUpdate;
    end;
  end;
end;

{**************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextLabelLargeStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 14;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 20/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.1;
    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextLabelMediumStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 12;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 16/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.5;
    finally
      EndUpdate;
    end;
  end;
end;

{**************************************************************************************************************}
procedure ALApplyMaterial3DynamicTextLabelSmallStyle(const AText: TALDynamicBaseText; const ARatio: Single = 1);
begin
   With _TALDynamicBaseTextProtectedAccess(AText) do begin
    BeginUpdate;
    Try
      var LPrevFontColor := TextSettings.Font.Color;
      var LPrevIsHtml := TextSettings.IsHtml;
      TextSettings.Reset;
      TextSettings.IsHtml := LPrevIsHtml;
      TextSettings.Font.Color := LPrevFontColor;
      TextSettings.Font.Size := 11;
      TextSettings.Font.Weight := TFontWeight.Medium;
      TextSettings.LineHeightMultiplier := 16/TextSettings.font.Size;
      TextSettings.LetterSpacing := 0.5;
    finally
      EndUpdate;
    end;
  end;
end;

///////////////////
// DynamicBUTTON //
///////////////////

{*********************************************************************************************}
procedure ALResetDynamicButtonStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try
      ALResetDynamicTextStyle(AButton, ARatio);
      AutoSize := TALAutoSizeMode.Both;
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
      StateStyles.Reset;
    Finally
      EndUpdate;
    End;
  end;
end;

{**********************************************************************************************************************************************************************}
procedure ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(const AButton: TALDynamicButton; const ANormalRadius, APressedRadius: Single; const ARatio: Single);
begin
  With AButton do begin
    BeginUpdate;
    Try

      var LNormalRadius: Single := ANormalRadius;
      var LPressedRadius: Single := APressedRadius;
      if LNormalRadius > 0 then LNormalRadius := RoundTo(LNormalRadius * ARatio, -2);
      if LPressedRadius > 0 then LPressedRadius := RoundTo(LPressedRadius * ARatio, -2);

      //--Enabled (default)--
      XRadius := LNormalRadius;
      YRadius := LNormalRadius;
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialExpressiveDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Hovered--
      //--Pressed--
      StateStyles.Pressed.XRadius := LPressedRadius;
      StateStyles.Pressed.YRadius := LPressedRadius;
      //--Focused--

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#cbfd91a6-d688-4be7-9a69-672549de3ea9
procedure ALApplyMaterial3DynamicButtonFilledStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Shadow.Inherit := False;
      StateStyles.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonFilledStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonFilledStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonFilledStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonFilledStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonFilledStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonFilledXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFilledXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#4a0c06da-0b2f-47de-a583-97e0ae80b5a5
procedure ALApplyMaterial3DynamicButtonOutlinedStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.Color := Talphacolors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      TextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Stroke.Assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      StateStyles.Focused.Stroke.assign(Stroke);
      StateStyles.Focused.Stroke.inherit := False;
      StateStyles.Focused.Stroke.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#4a0c06da-0b2f-47de-a583-97e0ae80b5a5
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALApplyMaterial3DynamicButtonOutlinedStyle(AButton, ARatio);
      Stroke.ColorKey := 'Material3.Color.OutlineVariant'; // md.sys.color.outline-variant / md.ref.palette.neutral-variant80 / #CAC4D0
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      //--Disabled--
      StateStyles.Disabled.Stroke.Reset;
      //--Hovered--
      //--Pressed--
      //--Focused--
      StateStyles.Focused.Stroke.reset;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonOutlinedXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonOutlinedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#398d84eb-fc8a-4c8a-bfb4-82d2e85dee4d
procedure ALApplyMaterial3DynamicButtonTextStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 10*ARatio{Top}, 12*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.Color := Talphacolors.Null;
      Fill.ColorKey := '';
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTextStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTextStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTextStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTextStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTextStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTextXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTextXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3DynamicButtonElevatedStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SurfaceContainerLow'; // md.sys.color.surface-container-low / md.ref.palette.neutral96 / #F7F2FA
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      Shadow.blur := RoundTo(2 * ARatio, -2);
      Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Shadow.inherit := False;
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Shadow.Inherit := False;
      StateStyles.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Hovered.Shadow.blur := RoundTo(3 * ARatio, -2);
      StateStyles.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonElevatedStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonElevatedStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonElevatedStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonElevatedStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonElevatedStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonElevatedXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonElevatedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#6ce8b926-87c4-4600-9bec-5deb4aaa65d8
procedure ALApplyMaterial3DynamicButtonTonalStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALResetDynamicButtonStyle(AButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Disabled.TextSettings.Inherit := False;
      StateStyles.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Shadow.Inherit := False;
      StateStyles.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Pressed--
      StateStyles.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.UseContentColor := True;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTonalStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTonalStyle(AButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTonalStyle(AButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTonalStyle(AButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonTonalStyle(AButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicButtonTonalXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonTonalXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3DynamicButtonIconFilledStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetDynamicButtonStyle(AButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Fill.ImageTintColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconFilledStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#ba97cf8a-2112-47dc-af87-2e32aabccdde
procedure ALApplyMaterial3DynamicButtonIconTonalStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetDynamicButtonStyle(AButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      Fill.ImageTintColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconTonalStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#05e02b7f-ebf2-4f02-9709-8230db3702b4
procedure ALApplyMaterial3DynamicButtonIconOutlinedStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetDynamicButtonStyle(AButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.Color := TalphaColorRec.Null;
      Fill.ColorKey := '';
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Fill.ResourceName := LPrevResourceName;
      Stroke.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ResourceName := LPrevResourceName;
      StateStyles.Disabled.Stroke.Assign(Stroke);
      StateStyles.Disabled.Stroke.Inherit := False;
      StateStyles.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#4a0c06da-0b2f-47de-a583-97e0ae80b5a5
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALApplyMaterial3DynamicButtonIconOutlinedStyle(AButton, ARatio);
      Stroke.ColorKey := 'Material3.Color.OutlineVariant'; // md.sys.color.outline-variant / md.ref.palette.neutral-variant80 / #CAC4D0
      //--Disabled--
      StateStyles.Disabled.Stroke.Reset;
      //--Hovered--
      //--Pressed--
      //--Focused--

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{******************************************************************************************************************}
procedure ALApplyMaterial3DynamicButtonIconStandardStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetDynamicButtonStyle(AButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ResourceName := LPrevResourceName;
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Disabled--
      StateStyles.Disabled.Opacity := 1;
      StateStyles.Disabled.Fill.Assign(Fill);
      StateStyles.Disabled.Fill.Inherit := False;
      StateStyles.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -25{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -20{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 12{ANormalRadius}, 8{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -22{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 16{ANormalRadius}, 12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -17{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeNarrowStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeNarrowRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeNarrowSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeNarrowStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeWideStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3DynamicButtonIconStandardStyle(AButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeWideRoundStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, -50{ANormalRadius}, -12{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeWideSquareStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeWideStyle(AButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicButtonShapeAndTransition(AButton, 28{ANormalRadius}, 16{APressedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABStyle(const AButton: TALDynamicButton; const AContainerColorKey, AIconColorKey: String; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := Abutton.Fill.ResourceName;
      ALResetDynamicButtonStyle(AButton);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := RoundTo(16 * ARatio, -2);
      YRadius := RoundTo(16 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio,16*ARatio,16*ARatio,16*ARatio).RoundTo(-2);
      Fill.ColorKey := AContainerColorKey;
      Fill.ImageTintColorKey := AIconColorKey;
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      Shadow.blur := RoundTo(6 * ARatio, -2);
      Shadow.OffsetY := RoundTo(4 * ARatio, -2);
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialExpressiveDefaultEffects;
      StateStyles.Transition.Duration := 0.2;
      //--Hovered--
      StateStyles.Hovered.StateLayer.ColorKey := AIconColorKey;
      StateStyles.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Hovered.Shadow.Inherit := False;
      StateStyles.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Hovered.Shadow.blur := RoundTo(8 * ARatio, -2);
      StateStyles.Hovered.Shadow.OffsetY := RoundTo(5 * ARatio, -2);
      //--Pressed--
      StateStyles.Pressed.StateLayer.ColorKey := AIconColorKey;
      StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      StateStyles.Focused.StateLayer.ColorKey := AIconColorKey;
      StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalPrimarySmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveDynamicButtonFABStyle(AButton, 'Material3.Color.PrimaryContainer', 'Material3.Color.OnPrimaryContainer', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalPrimaryMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABTonalPrimarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalPrimaryLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABTonalPrimarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalSecondarySmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveDynamicButtonFABStyle(AButton, 'Material3.Color.SecondaryContainer', 'Material3.Color.OnSecondaryContainer', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalSecondaryMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABTonalSecondarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalSecondaryLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABTonalSecondarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalTertiarySmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveDynamicButtonFABStyle(AButton, 'Material3.Color.TertiaryContainer', 'Material3.Color.OnTertiaryContainer', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalTertiaryMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABTonalTertiarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTonalTertiaryLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABTonalTertiarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABPrimarySmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveDynamicButtonFABStyle(AButton, 'Material3.Color.Primary', 'Material3.Color.OnPrimary', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABPrimaryMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABPrimarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABPrimaryLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABPrimarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABSecondarySmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveDynamicButtonFABStyle(AButton, 'Material3.Color.Secondary', 'Material3.Color.OnSecondary', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABSecondaryMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABSecondarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABSecondaryLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABSecondarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTertiarySmallStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  ALApplyMaterial3ExpressiveDynamicButtonFABStyle(AButton, 'Material3.Color.Tertiary', 'Material3.Color.OnTertiary', ARatio);
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTertiaryMediumStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABTertiarySmallStyle(AButton, (80/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(26*ARatio,26*ARatio,26*ARatio,26*ARatio).RoundTo(-2);
      XRadius := RoundTo(20 * ARatio, -2);
      YRadius := RoundTo(20 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

{***************************************************************************************************}
//https://m3.material.io/components/floating-action-button/specs#254b0f17-a5b9-4adf-b182-99f834ac9c7d
procedure ALApplyMaterial3ExpressiveDynamicButtonFABTertiaryLargeStyle(const AButton: TALDynamicButton; const ARatio: Single = 1);
begin
  With AButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicButtonFABTertiarySmallStyle(AButton, (96/56) * ARatio);
      Fill.ImageMargins.Rect := TRectF.Create(30*ARatio,30*ARatio,30*ARatio,30*ARatio).RoundTo(-2);
      XRadius := RoundTo(28 * ARatio, -2);
      YRadius := RoundTo(28 * ARatio, -2);

    finally
      EndUpdate;
    end;
  end;
end;

/////////////////////////
// DynamicTOGGLEBUTTON //
/////////////////////////

{***************************************************************************************************************}
procedure ALResetDynamicToggleButtonStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try
      ALResetDynamicTextStyle(AToggleButton, ARatio);
      AutoSize := TALAutoSizeMode.Both;
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
      StateStyles.Reset;
    Finally
      EndUpdate;
    End;
  end;
end;

{********************************************************************************************************************************************************************************************************}
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(const AToggleButton: TALDynamicToggleButton; const ANormalRadius, APressedRadius, ACheckedRadius: Single; const ARatio: Single);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      var LNormalRadius: Single := ANormalRadius;
      var LPressedRadius: Single := APressedRadius;
      var LCheckedRadius: Single := ACheckedRadius;
      if LNormalRadius > 0 then LNormalRadius := RoundTo(LNormalRadius * ARatio, -2);
      if LPressedRadius > 0 then LPressedRadius := RoundTo(LPressedRadius * ARatio, -2);
      if LCheckedRadius > 0 then LCheckedRadius := RoundTo(LCheckedRadius * ARatio, -2);

      //--Enabled (default)--
      XRadius := LNormalRadius;
      YRadius := LNormalRadius;
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialExpressiveDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.XRadius := LCheckedRadius;
      StateStyles.Checked.Default.YRadius := LCheckedRadius;

      //--Hovered (UnChecked)--
      //--Hovered (Checked)--

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.XRadius := LPressedRadius;
      StateStyles.UnChecked.Pressed.YRadius := LPressedRadius;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.XRadius := LPressedRadius;
      StateStyles.Checked.Pressed.YRadius := LPressedRadius;

      //--Focused (UnChecked)--
      //--Focused (Checked)--

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#cbfd91a6-d688-4be7-9a69-672549de3ea9
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicToggleButtonStyle(AToggleButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SurfaceContainer'; // md.sys.color.surface-container / md.ref.palette.neutral94 / #F3EDF7
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Default.TextSettings.Inherit := False;
      StateStyles.Checked.Default.TextSettings.Font.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.UnChecked.Disabled.TextSettings.Inherit := False;
      StateStyles.UnChecked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Disabled.TextSettings.Inherit := False;
      StateStyles.Checked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.UnChecked.Hovered.Shadow.Inherit := False;
      StateStyles.UnChecked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.UnChecked.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.UnChecked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Checked.Hovered.Shadow.Inherit := False;
      StateStyles.Checked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Checked.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.UseContentColor := True;
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledMediumStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledStyle(AToggleButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledMediumRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledMediumSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledStyle(AToggleButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledStyle(AToggleButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#4a0c06da-0b2f-47de-a583-97e0ae80b5a5
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicToggleButtonStyle(AToggleButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.Color := Talphacolors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.OutlineVariant'; // md.sys.color.outline-variant / md.ref.palette.neutral-variant80 / #CAC4D0
      TextSettings.Font.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.InverseSurface'; // md.sys.color.inverse-surface / md.ref.palette.neutral20 / #322F35
      StateStyles.Checked.Default.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Default.TextSettings.Inherit := False;
      StateStyles.Checked.Default.TextSettings.Font.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.UnChecked.Disabled.TextSettings.Inherit := False;
      StateStyles.UnChecked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.fill.Assign(Fill);
      StateStyles.Checked.Disabled.fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Disabled.TextSettings.Inherit := False;
      StateStyles.Checked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.UseContentColor := True;
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedMediumStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedStyle(AToggleButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedMediumRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedMediumSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedStyle(AToggleButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedStyle(AToggleButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicToggleButtonStyle(AToggleButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SurfaceContainerLow'; // md.sys.color.surface-container-low / md.ref.palette.neutral96 / #F7F2FA
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      Shadow.blur := RoundTo(2 * ARatio, -2);
      Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Primary'; //  md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Default.TextSettings.Inherit := False;
      StateStyles.Checked.Default.TextSettings.Font.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.UnChecked.Disabled.TextSettings.Inherit := False;
      StateStyles.UnChecked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Shadow.inherit := False;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Disabled.TextSettings.Inherit := False;
      StateStyles.Checked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Shadow.inherit := False;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.UnChecked.Hovered.Shadow.Inherit := False;
      StateStyles.UnChecked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.UnChecked.Hovered.Shadow.blur := RoundTo(3 * ARatio, -2);
      StateStyles.UnChecked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Checked.Hovered.Shadow.Inherit := False;
      StateStyles.Checked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Checked.Hovered.Shadow.blur := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.UseContentColor := True;
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedMediumStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedStyle(AToggleButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedMediumRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedMediumSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedStyle(AToggleButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedStyle(AToggleButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#6ce8b926-87c4-4600-9bec-5deb4aaa65d8
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALResetDynamicToggleButtonStyle(AToggleButton, ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 10*ARatio{Top}, 24*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      XRadius := -50;
      YRadius := -50;
      Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      Stroke.Color := Talphacolors.Null;
      Stroke.ColorKey := '';
      TextSettings.Font.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Secondary'; // md.sys.color.secondary / md.ref.palette.secondary40 / #625B71
      StateStyles.Checked.Default.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Default.TextSettings.Inherit := False;
      StateStyles.Checked.Default.TextSettings.Font.ColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.UnChecked.Disabled.TextSettings.Inherit := False;
      StateStyles.UnChecked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.TextSettings.Assign(TextSettings);
      StateStyles.Checked.Disabled.TextSettings.Inherit := False;
      StateStyles.Checked.Disabled.TextSettings.Font.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.UnChecked.Hovered.Shadow.Inherit := False;
      StateStyles.UnChecked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.UnChecked.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.UnChecked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.UseContentColor := True;
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;
      StateStyles.Checked.Hovered.Shadow.Inherit := False;
      StateStyles.Checked.Hovered.Shadow.ColorKey := 'Material3.Color.Shadow.Alpha50'; // md.sys.color.shadow / md.ref.palette.neutral0 / #000000
      StateStyles.Checked.Hovered.Shadow.blur := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Hovered.Shadow.OffsetY := RoundTo(1 * ARatio, -2);

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.UseContentColor := True;
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.UseContentColor := True;
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.UseContentColor := True;
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(12*ARatio{Left}, 6*ARatio{Top}, 12*ARatio{Right}, 6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalStyle(AToggleButton, (14/14) * ARatio);
      padding.Rect := TRectF.Create(16*ARatio{Left}, 10*ARatio{Top}, 16*ARatio{Right}, 10*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalMediumStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalStyle(AToggleButton, (16/14) * ARatio);
      padding.Rect := TRectF.Create(24*ARatio{Left}, 16*ARatio{Top}, 24*ARatio{Right}, 16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Medium;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalMediumRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalMediumSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalStyle(AToggleButton, (24/14) * ARatio);
      padding.Rect := TRectF.Create(48*ARatio{Left}, 32*ARatio{Top}, 48*ARatio{Right}, 32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalStyle(AToggleButton, (32/14) * ARatio);
      padding.Rect := TRectF.Create(64*ARatio{Left}, 48*ARatio{Top}, 64*ARatio{Right}, 48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      TextSettings.font.Weight := TFontWeight.Regular;

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{************************************************************************************}
//https://m3.material.io/components/buttons/specs#c75be779-5a59-4748-98d4-e47fc888d0b1
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := AToggleButton.Fill.ResourceName;
      ALResetDynamicToggleButtonStyle(AToggleButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ColorKey := 'Material3.Color.SurfaceContainer'; // md.sys.color.surface-container / md.ref.palette.neutral94 / #F3EDF7
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.Fill.ImageTintColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ResourceName := LPrevResourceName;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#ba97cf8a-2112-47dc-af87-2e32aabccdde
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := AToggleButton.Fill.ResourceName;
      ALResetDynamicToggleButtonStyle(AToggleButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      Fill.ImageTintColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      Fill.ResourceName := LPrevResourceName;
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Secondary'; // md.sys.color.secondary / md.ref.palette.secondary40 / #625B71
      StateStyles.Checked.Default.Fill.ImageTintColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ResourceName := LPrevResourceName;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSecondary'; // md.sys.color.on-secondary / md.ref.palette.secondary100 / #FFFFFF
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#05e02b7f-ebf2-4f02-9709-8230db3702b4
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := AToggleButton.Fill.ResourceName;
      ALResetDynamicToggleButtonStyle(AToggleButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.Color := TalphaColorRec.Null;
      Fill.ColorKey := '';
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Fill.ResourceName := LPrevResourceName;
      Stroke.ColorKey := 'Material3.Color.OutlineVariant'; // md.sys.color.outline-variant / md.ref.palette.neutral-variant80 / #CAC4D0
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.InverseSurface'; // md.sys.color.inverse-surface / md.ref.palette.neutral20 / #322F35
      StateStyles.Checked.Default.Fill.ImageTintColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ResourceName := LPrevResourceName;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{**********************************************************************************************************************************************}
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      var LPrevResourceName := AToggleButton.Fill.ResourceName;
      ALResetDynamicToggleButtonStyle(AToggleButton);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := -50;
      YRadius := -50;
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio,8*ARatio,8*ARatio,8*ARatio).RoundTo(-2);
      Fill.ResourceName := LPrevResourceName;
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Fill.ImageTintColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Stroke.Color := TALphaColors.Null;
      Stroke.ColorKey := '';
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.fill.Assign(Fill);
      StateStyles.Checked.Default.fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ImageTintColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Fill.Assign(Fill);
      StateStyles.UnChecked.Disabled.Fill.Inherit := False;
      StateStyles.UnChecked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.Fill.ResourceName := LPrevResourceName;
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ImageTintColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.Fill.ResourceName := LPrevResourceName;

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(32 * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(6*ARatio{Left},6*ARatio{Top},6*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(28{32-2-2} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},6*ARatio{Top},4*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (32/40) * ARatio);
      Width := RoundTo(40{32+4+4} * ARatio, -2);
      Height := RoundTo(32 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(10*ARatio{Left},6*ARatio{Top},10*ARatio{Right},6*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -25{APressedRadius}, -38{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -38{ANormalRadius}, -25{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(40 * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(8*ARatio{Left},8*ARatio{Top},8*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(32{40-4-4} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(4*ARatio{Left},8*ARatio{Top},4*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (40/40) * ARatio);
      Width := RoundTo(52{40+6+6} * ARatio, -2);
      Height := RoundTo(40 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(14*ARatio{Left},8*ARatio{Top},14*ARatio{Right},8*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -20{APressedRadius}, -30{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -30{ANormalRadius}, -20{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(56 * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},16*ARatio{Top},16*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(48{56-4-4} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(12*ARatio{Left},16*ARatio{Top},12*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (56/40) * ARatio);
      Width := RoundTo(72{56+8+8} * ARatio, -2);
      Height := RoundTo(56 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(24*ARatio{Left},16*ARatio{Top},24*ARatio{Right},16*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(1 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -22{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -22{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(96 * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},32*ARatio{Top},32*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(64{96-16-16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(16*ARatio{Left},32*ARatio{Top},16*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (96/40) * ARatio);
      Width := RoundTo(128{96+16+16} * ARatio, -2);
      Height := RoundTo(96 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},32*ARatio{Top},48*ARatio{Right},32*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -17{APressedRadius}, -29{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -29{ANormalRadius}, -17{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(136 * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(48*ARatio{Left},48*ARatio{Top},48*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeNarrowStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(104{136-16-16} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(32*ARatio{Left},48*ARatio{Top},32*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeNarrowRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeNarrowSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeNarrowStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeWideStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardStyle(AToggleButton, (136/40) * ARatio);
      Width := RoundTo(184{136+24+24} * ARatio, -2);
      Height := RoundTo(136 * ARatio, -2);
      Fill.ImageMargins.Rect := TRectF.Create(72*ARatio{Left},48*ARatio{Top},72*ARatio{Right},48*ARatio{Bottom}).RoundTo(-2);
      Stroke.Thickness := RoundTo(3 * ARatio, -2);
      StateStyles.Checked.Default.fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.UnChecked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;
      StateStyles.Checked.Disabled.Fill.ImageMargins.Rect := Fill.ImageMargins.Rect;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeWideRoundStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -50{ANormalRadius}, -12{APressedRadius}, -21{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/icon-buttons/specs#5309610a-4515-44f9-830d-880e2a2240a2
procedure ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeWideSquareStyle(const AToggleButton: TALDynamicToggleButton; const ARatio: Single = 1);
begin
  With AToggleButton do begin
    BeginUpdate;
    Try

      ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeWideStyle(AToggleButton, ARatio);
      ALApplyMaterial3ExpressiveDynamicToggleButtonShapeAndTransition(AToggleButton, -21{ANormalRadius}, -12{APressedRadius}, -50{ACheckedRadius}, ARatio);

    finally
      EndUpdate;
    end;
  end;
end;

/////////////////////
// DynamicCHECKBOX //
/////////////////////

type
  TALDynamicBaseCheckBoxStateStylesProtectedAccess = class(TALDynamicBaseCheckBox.TStateStyles);

{*******************************************************************************************************}
procedure ALResetDynamicCheckBoxStyle(const ACheckBox: TALDynamicBaseCheckBox; const ARatio: Single = 1);
begin
  With ACheckBox do begin
    BeginUpdate;
    Try
      ALResetDynamicShapeStyle(ACheckBox, ARatio);
      var LSize := DefaultSize;
      LSize.Height := RoundTo(LSize.Height * ARatio, -2);
      LSize.Width := RoundTo(LSize.Width * ARatio, -2);
      SetSize(LSize);
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
      XRadius := DefaultXRadius;
      YRadius := DefaultYRadius;
      if XRadius > 0 then XRadius := RoundTo(XRadius * ARatio, -2);
      if YRadius > 0 then YRadius := RoundTo(YRadius * ARatio, -2);
      Checkmark.Reset;
      Checkmark.Margins.Rect := ALScaleRect(Checkmark.Margins.DefaultValue, ARatio).RoundTo(-2);
      CheckMark.Thickness := RoundTo(CheckMark.DefaultThickness * ARatio, -2);
      StateStyles.Reset;
      StateStyles.Checked.Hovered.statelayer.margins.rect := ALScaleRect(StateStyles.Checked.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.Checked.Pressed.statelayer.margins.rect := ALScaleRect(StateStyles.Checked.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.Checked.Focused.statelayer.margins.rect := ALScaleRect(StateStyles.Checked.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.UnChecked.Hovered.statelayer.margins.rect := ALScaleRect(StateStyles.UnChecked.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.UnChecked.Pressed.statelayer.margins.rect := ALScaleRect(StateStyles.UnChecked.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      StateStyles.UnChecked.Focused.statelayer.margins.rect := ALScaleRect(StateStyles.UnChecked.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
    Finally
      EndUpdate;
    End;
  end;
end;

{*************************************************************************************}
//https://m3.material.io/components/checkbox/specs#fd29f662-6e61-4c1f-9b97-1145c3b33075
procedure ALApplyMaterial3DynamicCheckBoxStyle(const ACheckBox: TALDynamicBaseCheckBox; const ARatio: Single = 1);
begin
  With ACheckBox do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicCheckBoxStyle(ACheckBox, ARatio);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := RoundTo(2 * ARatio, -2);
      YRadius := RoundTo(2 * ARatio, -2);
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      CheckMark.Color := TAlphaColors.Null; // $FF1D1B20 / md.sys.color.on-surface / md.ref.palette.neutral10
      CheckMark.ColorKey := ''; // $FF1D1B20 / md.sys.color.on-surface / md.ref.palette.neutral10
      TALDynamicBaseCheckBoxStateStylesProtectedAccess(StateStyles).Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      TALDynamicBaseCheckBoxStateStylesProtectedAccess(StateStyles).Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.Fill.Assign(Fill);
      StateStyles.Checked.Default.Fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.Stroke.Assign(Stroke);
      StateStyles.Checked.Default.Stroke.Inherit := False;
      StateStyles.Checked.Default.Stroke.Thickness := 0;
      StateStyles.Checked.Default.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Default.CheckMark.Inherit := False;
      StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Stroke.assign(Stroke);
      StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12;

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12;
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12;

    finally
      EndUpdate;
    end;
  end;
end;

{*************************************************************************************}
//https://m3.material.io/components/checkbox/specs#fd29f662-6e61-4c1f-9b97-1145c3b33075
procedure ALApplyMaterial3DynamicCheckBoxErrorStyle(const ACheckBox: TALDynamicBaseCheckBox; const ARatio: Single = 1);
begin
  With ACheckBox do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicCheckBoxStyle(ACheckBox, ARatio);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      XRadius := RoundTo(2 * ARatio, -2);
      YRadius := RoundTo(2 * ARatio, -2);
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      CheckMark.Color := TAlphaColors.Null; // $FFB3261E / md.sys.color.error / md.ref.palette.error40
      CheckMark.ColorKey := ''; // $FFB3261E / md.sys.color.error / md.ref.palette.error40
      TALDynamicBaseCheckBoxStateStylesProtectedAccess(StateStyles).Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      TALDynamicBaseCheckBoxStateStylesProtectedAccess(StateStyles).Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.Fill.Assign(Fill);
      StateStyles.Checked.Default.Fill.Inherit := False;
      StateStyles.Checked.Default.Fill.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Default.Stroke.Assign(Stroke);
      StateStyles.Checked.Default.Stroke.Inherit := False;
      StateStyles.Checked.Default.Stroke.Thickness := 0;
      StateStyles.Checked.Default.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Default.CheckMark.Inherit := False;
      StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.OnError'; // md.sys.color.on-error / md.ref.palette.error100 / #FFFFFF

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Stroke.assign(Stroke);
      StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Fill.Assign(Fill);
      StateStyles.Checked.Disabled.Fill.Inherit := False;
      StateStyles.Checked.Disabled.Fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12;

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12;
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12;

    finally
      EndUpdate;
    end;
  end;
end;

////////////////////////
// DynamicRADIOBUTTON //
////////////////////////

{************************************************************************************************************}
procedure ALResetDynamicRadioButtonStyle(const ARadioButton: TALDynamicRadioButton; const ARatio: Single = 1);
begin
  ALResetDynamicCheckBoxStyle(ARadioButton, ARatio);
end;

{*****************************************************************************************}
//https://m3.material.io/components/radio-button/specs#4eca59b9-dfb5-4ca4-9c76-8e664fb02137
procedure ALApplyMaterial3DynamicRadioButtonStyle(const ARadioButton: TALDynamicRadioButton; const ARatio: Single = 1);
begin
  With ARadioButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicRadioButtonStyle(ARadioButton, ARatio);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      CheckMark.Color := TAlphaColors.Null; // $FF1D1B20 / md.sys.color.on-surface / md.ref.palette.neutral10
      CheckMark.ColorKey := ''; // $FF1D1B20 / md.sys.color.on-surface / md.ref.palette.neutral10
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.Stroke.Assign(Stroke);
      StateStyles.Checked.Default.Stroke.Inherit := False;
      StateStyles.Checked.Default.Stroke.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Default.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Default.CheckMark.Inherit := False;
      StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Stroke.assign(Stroke);
      StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Stroke.assign(Stroke);
      StateStyles.Checked.Disabled.Stroke.Inherit := False;
      StateStyles.Checked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12;

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12;
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12;

    finally
      EndUpdate;
    end;
  end;
end;

{*****************************************************************************************}
//https://m3.material.io/components/radio-button/specs#4eca59b9-dfb5-4ca4-9c76-8e664fb02137
procedure ALApplyMaterial3DynamicRadioButtonErrorStyle(const ARadioButton: TALDynamicRadioButton; const ARatio: Single = 1);
begin
  With ARadioButton do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicRadioButtonStyle(ARadioButton, ARatio);
      var LDelta := RoundTo(max(0, (48 - Height) / 2) * ARatio, -2);
      TouchTargetExpansion := TRectf.Create(LDelta,LDelta,LDelta,LDelta);
      Fill.Color := TalphaColors.Null;
      Fill.ColorKey := '';
      Stroke.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      Stroke.Thickness := RoundTo(2 * ARatio, -2);
      CheckMark.Color := TAlphaColors.Null; // $FFB3261E / md.sys.color.error / md.ref.palette.error40
      CheckMark.ColorKey := ''; // $FFB3261E / md.sys.color.error / md.ref.palette.error40
      StateStyles.Transition.InterpolationType := TALInterpolationType.MaterialStandardDefaultEffects;
      StateStyles.Transition.Duration := 0.2;

      //--Default (UnChecked)--
      //--Default (Checked)--
      StateStyles.Checked.Default.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Default.CheckMark.Inherit := False;
      StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E

      //--Disabled (UnChecked)--
      StateStyles.UnChecked.Disabled.Opacity := 1;
      StateStyles.UnChecked.Disabled.Stroke.assign(Stroke);
      StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.UnChecked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--Disabled (Checked)--
      StateStyles.Checked.Disabled.Opacity := 1;
      StateStyles.Checked.Disabled.Stroke.assign(Stroke);
      StateStyles.Checked.Disabled.Stroke.Inherit := False;
      StateStyles.Checked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      StateStyles.Checked.Disabled.CheckMark.Assign(CheckMark);
      StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12;
      //--Pressed (Checked)--
      StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12;

      //--Focused (UnChecked)--
      StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12;
      //--Focused (Checked)--
      StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Error'; // md.sys.color.error / md.ref.palette.error40 / #B3261E
      StateStyles.Checked.Focused.StateLayer.Opacity := 0.12;

    finally
      EndUpdate;
    end;
  end;
end;

///////////////////
// DynamicSWITCH //
///////////////////

{*********************************************************************************************}
procedure ALResetDynamicSwitchStyle(const ASwitch: TALDynamicSwitch; const ARatio: Single = 1);
begin
  With ASwitch do begin
    BeginUpdate;
    Try
      var LSize := DefaultSize;
      LSize.Height := RoundTo(LSize.Height * ARatio, -2);
      LSize.Width := RoundTo(LSize.Width * ARatio, -2);
      SetSize(LSize);
      //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
      Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
      TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
      //--
      ALResetDynamicShapeStyle(Track, ARatio);
      Track.Margins.Rect := ALScaleRect(Track.Margins.DefaultValue, ARatio).RoundTo(-2);
      Track.Padding.Rect := ALScaleRect(Track.Padding.DefaultValue, ARatio).RoundTo(-2);
      Track.TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
      Track.XRadius := Track.DefaultXRadius;
      Track.YRadius := Track.DefaultYRadius;
      if Track.XRadius > 0 then Track.XRadius := RoundTo(Track.XRadius * ARatio, -2);
      if Track.YRadius > 0 then Track.YRadius := RoundTo(Track.YRadius * ARatio, -2);
      Track.StateStyles.Reset;
      Track.StateStyles.Checked.Hovered.statelayer.margins.rect := ALScaleRect(Track.StateStyles.Checked.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.Checked.Pressed.statelayer.margins.rect := ALScaleRect(Track.StateStyles.Checked.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.Checked.Focused.statelayer.margins.rect := ALScaleRect(Track.StateStyles.Checked.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.UnChecked.Hovered.statelayer.margins.rect := ALScaleRect(Track.StateStyles.UnChecked.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.UnChecked.Pressed.statelayer.margins.rect := ALScaleRect(Track.StateStyles.UnChecked.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      Track.StateStyles.UnChecked.Focused.statelayer.margins.rect := ALScaleRect(Track.StateStyles.UnChecked.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      //--
      ALResetDynamicCheckBoxStyle(Thumb, ARatio);
      Thumb.Margins.Rect := ALScaleRect(Thumb.Margins.DefaultValue, ARatio).RoundTo(-2);
      Thumb.Width := Height - Thumb.Margins.Top - Thumb.Margins.bottom;
    Finally
      EndUpdate;
    End;
  end;
end;

{***********************************************************************************}
//https://m3.material.io/components/switch/specs#e27a8630-f5e0-481a-ad24-0e8ebb8a8619
procedure ALApplyMaterial3DynamicSwitchStyle(const ASwitch: TALDynamicSwitch; const ARatio: Single = 1);
begin
  With ASwitch do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicSwitchStyle(ASwitch, ARatio);

      //--Default (UnChecked)--
      Track.StateStyles.UnChecked.Default.Stroke.Assign(Track.Stroke);
      Track.StateStyles.UnChecked.Default.Stroke.Inherit := False;
      Track.StateStyles.UnChecked.Default.Stroke.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      Track.StateStyles.UnChecked.Default.Stroke.Thickness := RoundTo(2 * ARatio, -2);
      Track.StateStyles.UnChecked.Default.fill.Assign(Track.fill);
      Track.StateStyles.UnChecked.Default.fill.Inherit := False;
      Track.StateStyles.UnChecked.Default.fill.ColorKey := 'Material3.Color.SurfaceContainerHighest'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      //--
      Thumb.StateStyles.UnChecked.Default.fill.Assign(Thumb.fill);
      Thumb.StateStyles.UnChecked.Default.fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Default.fill.ColorKey := 'Material3.Color.Outline'; // md.sys.color.outline / md.ref.palette.neutral-variant50 / #79747E
      Thumb.StateStyles.UnChecked.Default.Fill.BackgroundMargins.Rect := TRectF.Create(4*ARatio,4*ARatio,4*ARatio,4*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Default.CheckMark.Assign(Thumb.CheckMark);
      Thumb.StateStyles.UnChecked.Default.CheckMark.Inherit := False;
      Thumb.StateStyles.UnChecked.Default.CheckMark.Color := TAlphacolors.Null; // TALStyleManager.Instance.GetColor('Material3.Color.SurfaceContainerHighest'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      Thumb.StateStyles.UnChecked.Default.CheckMark.ColorKey := ''; // TALStyleManager.Instance.GetColor('Material3.Color.SurfaceContainerHighest'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      //--Default (Checked)--
      Track.StateStyles.Checked.Default.fill.Assign(Track.fill);
      Track.StateStyles.Checked.Default.fill.Inherit := False;
      Track.StateStyles.Checked.Default.fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      //--
      Thumb.StateStyles.Checked.Default.fill.Assign(Thumb.fill);
      Thumb.StateStyles.Checked.Default.fill.Inherit := False;
      Thumb.StateStyles.Checked.Default.fill.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      Thumb.StateStyles.Checked.Default.CheckMark.Assign(Thumb.CheckMark);
      Thumb.StateStyles.Checked.Default.CheckMark.Inherit := False;
      Thumb.StateStyles.Checked.Default.CheckMark.ColorKey := 'Material3.Color.OnPrimaryContainer'; // md.sys.color.on-primary-container / md.ref.palette.primary30 / #4F378B

      //--Disabled (UnChecked)--
      Track.StateStyles.UnChecked.Disabled.Opacity := 1;
      Track.StateStyles.UnChecked.Disabled.Stroke.Assign(Track.Stroke);
      Track.StateStyles.UnChecked.Disabled.Stroke.Inherit := False;
      Track.StateStyles.UnChecked.Disabled.Stroke.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Track.StateStyles.UnChecked.Disabled.Stroke.Thickness := RoundTo(2 * ARatio, -2);
      Track.StateStyles.UnChecked.Disabled.fill.Assign(Track.fill);
      Track.StateStyles.UnChecked.Disabled.fill.Inherit := False;
      Track.StateStyles.UnChecked.Disabled.fill.ColorKey := 'Material3.Color.SurfaceContainerHighest.Alpha12'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      //--
      Thumb.StateStyles.UnChecked.Disabled.Opacity := 1;
      Thumb.StateStyles.UnChecked.Disabled.fill.Assign(Thumb.fill);
      Thumb.StateStyles.UnChecked.Disabled.fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Thumb.StateStyles.UnChecked.Disabled.Fill.BackgroundMargins.Rect := TRectF.Create(4*ARatio,4*ARatio,4*ARatio,4*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Disabled.CheckMark.Assign(Thumb.CheckMark);
      Thumb.StateStyles.UnChecked.Disabled.CheckMark.Inherit := False;
      Thumb.StateStyles.UnChecked.Disabled.CheckMark.ColorKey := 'Material3.Color.SurfaceContainerHighest.Alpha38'; // md.sys.color.surface-container-highest / md.ref.palette.neutral90 / #E6E0E9
      //--Disabled (Checked)--
      Track.StateStyles.Checked.Disabled.Opacity := 1;
      Track.StateStyles.Checked.Disabled.fill.Assign(Track.fill);
      Track.StateStyles.Checked.Disabled.fill.Inherit := False;
      Track.StateStyles.Checked.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--
      Thumb.StateStyles.Checked.Disabled.Opacity := 1;
      Thumb.StateStyles.Checked.Disabled.fill.Assign(Thumb.fill);
      Thumb.StateStyles.Checked.Disabled.fill.Inherit := False;
      Thumb.StateStyles.Checked.Disabled.fill.ColorKey := 'Material3.Color.Surface'; // md.sys.color.surface / md.ref.palette.neutral98 / #FEF7FF
      Thumb.StateStyles.Checked.Disabled.CheckMark.Assign(Thumb.CheckMark);
      Thumb.StateStyles.Checked.Disabled.CheckMark.Inherit := False;
      Thumb.StateStyles.Checked.Disabled.CheckMark.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered (UnChecked)--
      Thumb.StateStyles.UnChecked.Hovered.fill.Assign(Thumb.StateStyles.UnChecked.Default.fill);
      Thumb.StateStyles.UnChecked.Hovered.fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Hovered.fill.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Thumb.StateStyles.UnChecked.Hovered.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Thumb.StateStyles.UnChecked.Hovered.StateLayer.Opacity := 0.08;
      //--Hovered (Checked)--
      Thumb.StateStyles.Checked.Hovered.fill.Assign(Thumb.StateStyles.Checked.Default.fill);
      Thumb.StateStyles.Checked.Hovered.fill.Inherit := False;
      Thumb.StateStyles.Checked.Hovered.fill.ColorKey := 'Material3.Color.PrimaryContainer'; // md.sys.color.primary-container / md.ref.palette.primary90 / #EADDFF
      Thumb.StateStyles.Checked.Hovered.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.Checked.Hovered.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Thumb.StateStyles.Checked.Hovered.StateLayer.Opacity := 0.08;

      //--Pressed (UnChecked)--
      Thumb.StateStyles.UnChecked.Pressed.Fill.Assign(Thumb.StateStyles.UnChecked.Default.fill);
      Thumb.StateStyles.UnChecked.Pressed.Fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Pressed.fill.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Thumb.StateStyles.UnChecked.Pressed.Fill.BackgroundMargins.Rect := TRectF.Create(-2*ARatio,-2*ARatio,-2*ARatio,-2*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Pressed.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Thumb.StateStyles.UnChecked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Pressed (Checked)--
      Thumb.StateStyles.Checked.Pressed.Fill.Assign(Thumb.StateStyles.Checked.Default.fill);
      Thumb.StateStyles.Checked.Pressed.Fill.Inherit := False;
      Thumb.StateStyles.Checked.Pressed.fill.ColorKey := 'Material3.Color.PrimaryContainer'; // md.sys.color.primary-container / md.ref.palette.primary90 / #EADDFF
      Thumb.StateStyles.Checked.Pressed.Fill.BackgroundMargins.Rect := TRectF.Create(-2*ARatio,-2*ARatio,-2*ARatio,-2*ARatio).RoundTo(-2);
      Thumb.StateStyles.Checked.Pressed.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.Checked.Pressed.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Thumb.StateStyles.Checked.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

      //--Focused (UnChecked)--
      Thumb.StateStyles.UnChecked.Focused.fill.Assign(Thumb.StateStyles.UnChecked.Default.fill);
      Thumb.StateStyles.UnChecked.Focused.fill.Inherit := False;
      Thumb.StateStyles.UnChecked.Focused.fill.ColorKey := 'Material3.Color.OnSurfaceVariant'; // md.sys.color.on-surface-variant / md.ref.palette.neutral-variant30 / #49454F
      Thumb.StateStyles.UnChecked.Focused.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.UnChecked.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurface'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      Thumb.StateStyles.UnChecked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused (Checked)--
      Thumb.StateStyles.Checked.Focused.fill.Assign(Thumb.StateStyles.Checked.Default.fill);
      Thumb.StateStyles.Checked.Focused.fill.Inherit := False;
      Thumb.StateStyles.Checked.Focused.fill.ColorKey := 'Material3.Color.PrimaryContainer'; // md.sys.color.primary-container / md.ref.palette.primary90 / #EADDFF
      Thumb.StateStyles.Checked.Focused.StateLayer.Margins.Rect := TRectF.Create(-8*ARatio,-8*ARatio,-8*ARatio,-8*ARatio).RoundTo(-2);
      Thumb.StateStyles.Checked.Focused.StateLayer.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Thumb.StateStyles.Checked.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast

    finally
      EndUpdate;
    end;
  end;
end;

/////////////////////
// DynamicTRACKBAR //
/////////////////////

type
  _TALDynamicCustomTrackProtectedAccess = class(TALDynamicCustomTrack);

{******************************************************************************************************}
procedure ALResetDynamicTrackBarStyle(const ATrackBar: TALDynamicCustomTrack; const ARatio: Single = 1);

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function SwapTopBottomWithLeftRight(Const ARect: TrectF): TRectF;
  Begin
    Result.Left := ARect.Top;
    Result.Top := ARect.Left;
    Result.Right := ARect.Bottom;
    Result.Bottom := ARect.Right;
  End;

begin
  With _TALDynamicCustomTrackProtectedAccess(ATrackBar) do begin
    BeginUpdate;
    Try
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
        Height := RoundTo(DefaultSize.Height * ARatio, -2);
        //Margins.Rect := ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2);
        Padding.Rect := ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2);
        TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
      end
      else begin
        Width := RoundTo(DefaultSize.Height * ARatio, -2);
        //Margins.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Margins.DefaultValue, ARatio).RoundTo(-2));
        Padding.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Padding.DefaultValue, ARatio).RoundTo(-2));
        TouchTargetExpansion := SwapTopBottomWithLeftRight(ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2));
      end;
      //--
      if InactiveTrack <> nil then begin
        If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
          InactiveTrack.Margins.Rect := ALScaleRect(InactiveTrack.Margins.DefaultValue, ARatio).RoundTo(-2);
          InactiveTrack.Padding.Rect := ALScaleRect(InactiveTrack.Padding.DefaultValue, ARatio).RoundTo(-2);
          InactiveTrack.TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
        end
        else begin
          InactiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(ALScaleRect(InactiveTrack.Margins.DefaultValue, ARatio).RoundTo(-2));
          InactiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(ALScaleRect(InactiveTrack.Padding.DefaultValue, ARatio).RoundTo(-2));
          InactiveTrack.TouchTargetExpansion := SwapTopBottomWithLeftRight(ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2));
        end;
        InactiveTrack.XRadius := InactiveTrack.DefaultXRadius;
        InactiveTrack.YRadius := InactiveTrack.DefaultYRadius;
        if InactiveTrack.XRadius > 0 then InactiveTrack.XRadius := RoundTo(InactiveTrack.XRadius * ARatio, -2);
        if InactiveTrack.YRadius > 0 then InactiveTrack.YRadius := RoundTo(InactiveTrack.YRadius * ARatio, -2);
        InactiveTrack.Corners := AllCorners;
        InactiveTrack.Opacity := 1;
        InactiveTrack.Fill.Reset;
        InactiveTrack.Stroke.Reset;
        InactiveTrack.Stroke.Thickness := RoundTo(InactiveTrack.Stroke.DefaultThickness * ARatio, -2);
        InactiveTrack.Shadow.Reset;
        InactiveTrack.stopIndicator.Reset;
        InactiveTrack.stopIndicator.Size := RoundTo(InactiveTrack.stopIndicator.DefaultSize * ARatio, -2);
        InactiveTrack.StateStyles.Reset;
      end;
      //--
      if ActiveTrack <> nil then begin
        If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
          ActiveTrack.Margins.Rect := ALScaleRect(ActiveTrack.Margins.DefaultValue, ARatio).RoundTo(-2);
          ActiveTrack.Padding.Rect := ALScaleRect(ActiveTrack.Padding.DefaultValue, ARatio).RoundTo(-2);
          ActiveTrack.TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
        end
        else begin
          ActiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(ALScaleRect(ActiveTrack.Margins.DefaultValue, ARatio).RoundTo(-2));
          ActiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(ALScaleRect(ActiveTrack.Padding.DefaultValue, ARatio).RoundTo(-2));
          ActiveTrack.TouchTargetExpansion := SwapTopBottomWithLeftRight(ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2));
        end;
        ActiveTrack.XRadius := ActiveTrack.DefaultXRadius;
        ActiveTrack.YRadius := ActiveTrack.DefaultYRadius;
        if ActiveTrack.XRadius > 0 then ActiveTrack.XRadius := RoundTo(ActiveTrack.XRadius * ARatio, -2);
        if ActiveTrack.YRadius > 0 then ActiveTrack.YRadius := RoundTo(ActiveTrack.YRadius * ARatio, -2);
        ActiveTrack.Corners := AllCorners;
        ActiveTrack.Opacity := 1;
        ActiveTrack.Fill.Reset;
        ActiveTrack.Stroke.Reset;
        ActiveTrack.Stroke.Thickness := RoundTo(ActiveTrack.Stroke.DefaultThickness * ARatio, -2);
        ActiveTrack.Shadow.Reset;
        ActiveTrack.stopIndicator.Reset;
        ActiveTrack.stopIndicator.Size := RoundTo(ActiveTrack.stopIndicator.DefaultSize * ARatio, -2);
        ActiveTrack.StateStyles.Reset;
      end;
      //--
      if Thumb <> nil then begin
        If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
          Thumb.Margins.Rect := ALScaleRect(Thumb.Margins.DefaultValue, ARatio).RoundTo(-2);
          Thumb.Padding.Rect := ALScaleRect(Thumb.Padding.DefaultValue, ARatio).RoundTo(-2);
          Thumb.TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
          Thumb.Width := ATrackBar.Height - ATrackBar.Padding.Top - ATrackBar.Padding.Bottom - Thumb.Margins.Top - Thumb.Margins.Bottom
        end
        else begin
          Thumb.Margins.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Thumb.Margins.DefaultValue, ARatio).RoundTo(-2));
          Thumb.Padding.Rect := SwapTopBottomWithLeftRight(ALScaleRect(Thumb.Padding.DefaultValue, ARatio).RoundTo(-2));
          Thumb.TouchTargetExpansion := SwapTopBottomWithLeftRight(ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2));
          Thumb.Height := ATrackBar.Width - ATrackBar.Padding.left - ATrackBar.Padding.right - Thumb.Margins.left - Thumb.Margins.right;
        end;
        Thumb.XRadius := Thumb.DefaultXRadius;
        Thumb.YRadius := Thumb.DefaultYRadius;
        if Thumb.XRadius > 0 then Thumb.XRadius := RoundTo(Thumb.XRadius * ARatio, -2);
        if Thumb.YRadius > 0 then Thumb.YRadius := RoundTo(Thumb.YRadius * ARatio, -2);
        Thumb.Corners := AllCorners;
        Thumb.Opacity := 1;
        Thumb.Fill.Reset;
        Thumb.Stroke.Reset;
        Thumb.Stroke.Thickness := RoundTo(Thumb.Stroke.DefaultThickness * ARatio, -2);
        Thumb.Shadow.Reset;
        Thumb.StateStyles.Reset;
        Thumb.StateStyles.Hovered.statelayer.margins.rect := ALScaleRect(Thumb.StateStyles.Hovered.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
        Thumb.StateStyles.Pressed.statelayer.margins.rect := ALScaleRect(Thumb.StateStyles.Pressed.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
        Thumb.StateStyles.Focused.statelayer.margins.rect := ALScaleRect(Thumb.StateStyles.Focused.statelayer.margins.DefaultValue, ARatio).RoundTo(-2);
      end;
      //--
      if ValueIndicator <> nil then begin
        //ValueIndicator.Margins.Rect := ALScaleRect(ValueIndicator.Margins.DefaultValue, ARatio).RoundTo(-2);
        ValueIndicator.Padding.Rect := ALScaleRect(ValueIndicator.Padding.DefaultValue, ARatio).RoundTo(-2);
        ValueIndicator.TouchTargetExpansion := ALScaleRect(TRectF.Empty, ARatio).RoundTo(-2);
        ValueIndicator.XRadius := ValueIndicator.DefaultXRadius;
        ValueIndicator.YRadius := ValueIndicator.DefaultYRadius;
        if ValueIndicator.XRadius > 0 then ValueIndicator.XRadius := RoundTo(ValueIndicator.XRadius * ARatio, -2);
        if ValueIndicator.YRadius > 0 then ValueIndicator.YRadius := RoundTo(ValueIndicator.YRadius * ARatio, -2);
        ValueIndicator.Animation := TValueIndicator.TAnimation.ScaleInOut;
        ValueIndicator.AutoSize := TALAutoSizeMode.Both;
        ValueIndicator.Corners := AllCorners;
        ValueIndicator.Sides := AllSides;
        ValueIndicator.Opacity := 1;
        ValueIndicator.Fill.Reset;
        ValueIndicator.Stroke.Reset;
        ValueIndicator.Stroke.Thickness := RoundTo(ValueIndicator.Stroke.DefaultThickness * ARatio, -2);
        ValueIndicator.Shadow.Reset;
        ValueIndicator.TextSettings.Reset;
      end;
    Finally
      EndUpdate;
    End;
  end;
end;

{*************************************************************************************}
//https://m3.material.io/components/TrackBar/specs#e27a8630-f5e0-481a-ad24-0e8ebb8a8619
procedure ALApplyMaterial3DynamicTrackBarStyle(const ATrackBar: TALDynamicCustomTrack; const ARatio: Single = 1);
begin
  With _TALDynamicCustomTrackProtectedAccess(ATrackBar) do begin
    BeginUpdate;
    Try

      //--Enabled (default)--
      ALResetDynamicTrackBarStyle(ATrackBar, ARatio);
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
        Height := RoundTo(44 * ARatio, -2);
        InactiveTrack.Margins.Rect := TRectF.Create(0,14*ARatio,0,14*ARatio).RoundTo(-2);
        ActiveTrack.Margins.Rect := TRectF.Create(0,14*ARatio,0,14*ARatio).RoundTo(-2);
        InactiveTrack.Padding.Rect := TRectF.Create(6*ARatio,0,6*ARatio,0).RoundTo(-2);
        ActiveTrack.Padding.Rect := TRectF.Create(6*ARatio,0,6*ARatio,0).RoundTo(-2);
      end
      else begin
        Width := RoundTo(44 * ARatio, -2);
        InactiveTrack.Margins.Rect := TRectF.Create(14*ARatio,0,14*ARatio,0).RoundTo(-2);
        ActiveTrack.Margins.Rect := TRectF.Create(14*ARatio,0,14*ARatio,0).RoundTo(-2);
        InactiveTrack.Padding.Rect := TRectF.Create(0,6*ARatio,0,6*ARatio).RoundTo(-2);
        ActiveTrack.Padding.Rect := TRectF.Create(0,6*ARatio,0,6*ARatio).RoundTo(-2);
      end;
      InactiveTrack.XRadius := -50;
      InactiveTrack.YRadius := -50;
      ActiveTrack.XRadius := -50;
      ActiveTrack.YRadius := -50;
      InactiveTrack.Fill.ColorKey := 'Material3.Color.SecondaryContainer'; // md.sys.color.secondary-container / md.ref.palette.secondary90 / #E8DEF8
      ActiveTrack.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      InactiveTrack.StopIndicator.Size := RoundTo(4 * ARatio, -2);
      ActiveTrack.StopIndicator.Size := RoundTo(4 * ARatio, -2);
      InactiveTrack.StopIndicator.ColorKey := 'Material3.Color.OnSecondaryContainer'; // md.sys.color.on-secondary-container / md.ref.palette.secondary30 / #4A4458
      ActiveTrack.StopIndicator.ColorKey := 'Material3.Color.OnPrimary'; // md.sys.color.on-primary / md.ref.palette.primary100 / #FFFFFF
      ValueIndicator.TextSettings.Font.ColorKey := 'Material3.Color.InverseOnSurface'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      ValueIndicator.TextSettings.Font.Size := RoundTo(14 * ARatio, -2);
      ValueIndicator.padding.Rect := TRectF.create(16 * ARatio{Left}, 12 * ARatio{Top}, 16 * ARatio{Right}, 12 * ARatio{Bottom}).RoundTo(-2);
      ValueIndicator.Fill.ColorKey := 'Material3.Color.InverseSurface'; // md.sys.color.inverse-surface / md.ref.palette.neutral20 / #322F35
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then begin
        Thumb.Margins.Rect := TRectF.Create(6*ARatio,0,6*ARatio,0).RoundTo(-2);
        Thumb.TouchTargetExpansion := TRectF.Create(22*ARatio,2*ARatio,22*ARatio,2*ARatio).RoundTo(-2);
        Thumb.Width := RoundTo(4 * ARatio, -2)
      end
      else begin
        Thumb.Margins.Rect := TRectF.Create(0,6*ARatio,0,6*ARatio).RoundTo(-2);
        Thumb.TouchTargetExpansion := TRectF.Create(2*ARatio,22*ARatio,2*ARatio,22*ARatio).RoundTo(-2);
        Thumb.Height := RoundTo(4 * ARatio, -2);
      end;
      Thumb.Fill.ColorKey := 'Material3.Color.Primary'; // md.sys.color.primary / md.ref.palette.primary40 / #6750A4
      Thumb.Stroke.Color := TalphaColors.Null;
      Thumb.Stroke.ColorKey := '';

      //--Disabled--
      InactiveTrack.StateStyles.Disabled.Opacity := 1;
      ActiveTrack.StateStyles.Disabled.Opacity := 1;
      //--
      InactiveTrack.StateStyles.Disabled.fill.Assign(InactiveTrack.Fill);
      InactiveTrack.StateStyles.Disabled.fill.Inherit := False;
      InactiveTrack.StateStyles.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha12'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--
      ActiveTrack.StateStyles.Disabled.fill.Assign(ActiveTrack.Fill);
      ActiveTrack.StateStyles.Disabled.fill.Inherit := False;
      ActiveTrack.StateStyles.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--
      InactiveTrack.StateStyles.Disabled.StopIndicator.Assign(InactiveTrack.StopIndicator);
      InactiveTrack.StateStyles.Disabled.StopIndicator.Inherit := False;
      InactiveTrack.StateStyles.Disabled.StopIndicator.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20
      //--
      ActiveTrack.StateStyles.Disabled.StopIndicator.Assign(ActiveTrack.StopIndicator);
      ActiveTrack.StateStyles.Disabled.StopIndicator.Inherit := False;
      ActiveTrack.StateStyles.Disabled.StopIndicator.ColorKey := 'Material3.Color.InverseOnSurface.Alpha66'; // md.sys.color.inverse-on-surface / md.ref.palette.neutral95 / #F5EFF7
      //--
      Thumb.StateStyles.Disabled.Opacity := 1;
      Thumb.StateStyles.Disabled.fill.Assign(Thumb.Fill);
      Thumb.StateStyles.Disabled.fill.Inherit := False;
      Thumb.StateStyles.Disabled.fill.ColorKey := 'Material3.Color.OnSurface.Alpha38'; // md.sys.color.on-surface / md.ref.palette.neutral10 / #1D1B20

      //--Hovered--

      //--Pressed--
      Thumb.StateStyles.Pressed.fill.Assign(Thumb.Fill);
      Thumb.StateStyles.Pressed.fill.Inherit := False;
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
        Thumb.StateStyles.Pressed.fill.BackgroundMargins.Rect := TRectF.Create(1*ARatio,0,1*ARatio,0).RoundTo(-2)
      else
        Thumb.StateStyles.Pressed.fill.BackgroundMargins.Rect := TRectF.Create(0,1*ARatio,0,1*ARatio).RoundTo(-2);

      //--Focused--
      Thumb.StateStyles.Focused.fill.Assign(Thumb.Fill);
      Thumb.StateStyles.Focused.fill.Inherit := False;
      If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
        Thumb.StateStyles.Focused.fill.BackgroundMargins.Rect := TRectF.Create(1*ARatio,0,1*ARatio,0).RoundTo(-2)
      else
        Thumb.StateStyles.Focused.fill.BackgroundMargins.Rect := TRectF.Create(0,1*ARatio,0,1*ARatio).RoundTo(-2);

    finally
      EndUpdate;
    end;
  end;
end;

//////////////////////
// DynamicSCROLLBAR //
//////////////////////

{************************************************************************************************************}
procedure ALResetDynamicScrollBarStyle(const AScrollBar: TALDynamicCustomScrollBar; const ARatio: Single = 1);
begin
  ALResetDynamicTrackBarStyle(AScrollBar, ARatio);
end;

{**************************************************************************************}
//https://m3.material.io/components/ScrollBar/specs#e27a8630-f5e0-481a-ad24-0e8ebb8a8619
procedure ALApplyMaterial3DynamicScrollBarStyle(const AScrollBar: TALDynamicCustomScrollBar; const ARatio: Single = 1);
begin
  With _TALDynamicCustomTrackProtectedAccess(AScrollBar) do begin
    BeginUpdate;
    Try
      ALResetDynamicScrollBarStyle(AScrollBar, ARatio);
      Thumb.Fill.ColorKey := 'Material3.Color.OnSurface.alpha30';
      //--Disabled--
      //--Hovered--
      Thumb.StateStyles.Hovered.StateLayer.ColorKey := 'Material3.Color.OnSurface';
      Thumb.StateStyles.Hovered.StateLayer.Opacity := 0.08;
      //--Pressed--
      Thumb.StateStyles.Pressed.StateLayer.ColorKey := 'Material3.Color.OnSurface';
      Thumb.StateStyles.Pressed.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
      //--Focused--
      Thumb.StateStyles.Focused.StateLayer.ColorKey := 'Material3.Color.OnSurface';
      Thumb.StateStyles.Focused.StateLayer.Opacity := 0.12; // Instead of 0.10, use a higher value for better contrast
    finally
      EndUpdate;
    end;
  end;
end;

{$ENDREGION 'Auto-generated by <ALCINOE>\Tools\CodeBuilder (1)'}

/////////////////////
// TALStyleManager //
/////////////////////

{*******************************************************}
class function TALStyleManager.GetNextSortOrder: integer;
begin
  Result := FSortOrderCounter;
  inc(FSortOrderCounter);
end;

{****************************************************************************************************************************}
constructor TALStyleManager.TTextStyleInfo.create(const AApplyStyleProc: TTextApplyStyleProc; const ADefaultFontSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
end;

{****************************************************************************************************************************}
constructor TALStyleManager.TEditStyleInfo.create(const AApplyStyleProc: TEditApplyStyleProc; const ADefaultFontSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
end;

{**************************************************************************************************************************************************************}
constructor TALStyleManager.TButtonStyleInfo.create(const AApplyStyleProc: TButtonApplyStyleProc; const ADefaultFontSize: Single; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
  DefaultHeight := ADefaultHeight;
end;

{**************************************************************************************************************************************************************************}
constructor TALStyleManager.TToggleButtonStyleInfo.create(const AApplyStyleProc: TToggleButtonApplyStyleProc; const ADefaultFontSize: Single; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
  DefaultHeight := ADefaultHeight;
end;

{**********************************************************************************************************************************}
constructor TALStyleManager.TCheckBoxStyleInfo.create(const AApplyStyleProc: TCheckBoxApplyStyleProc; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultHeight := ADefaultHeight;
end;

{****************************************************************************************************************************************}
constructor TALStyleManager.TRadioButtonStyleInfo.create(const AApplyStyleProc: TRadioButtonApplyStyleProc; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultHeight := ADefaultHeight;
end;

{******************************************************************************************************************************}
constructor TALStyleManager.TSwitchStyleInfo.create(const AApplyStyleProc: TSwitchApplyStyleProc; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultHeight := ADefaultHeight;
end;

{********************************************************************************************************************************}
constructor TALStyleManager.TTrackbarStyleInfo.create(const AApplyStyleProc: TTrackBarApplyStyleProc; const ADefaultSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultSize := ADefaultSize;
end;

{**********************************************************************************************************************************}
constructor TALStyleManager.TScrollbarStyleInfo.create(const AApplyStyleProc: TScrollBarApplyStyleProc; const ADefaultSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultSize := ADefaultSize;
end;

{******************************************************************************************************}
constructor TALStyleManager.TScrollboxStyleInfo.create(const AApplyStyleProc: TScrollBoxApplyStyleProc);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
end;

{**********************************************************************************************************************************************}
constructor TALStyleManager.TDialogManagerStyleInfo.create(const AApplyStyleProc: TDialogManagerApplyStyleProc; const ADefaultFontSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
end;

{********************************************************************************************************************************}
constructor TALStyleManager.TDialogStyleInfo.create(const AApplyStyleProc: TDialogApplyStyleProc; const ADefaultFontSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
end;

{******************************************************************************************************************************************}
constructor TALStyleManager.TDynamicTextStyleInfo.create(const AApplyStyleProc: TDynamicTextApplyStyleProc; const ADefaultFontSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyDynamicStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
end;

{****************************************************************************************************************************************************************************}
constructor TALStyleManager.TDynamicButtonStyleInfo.create(const AApplyStyleProc: TDynamicButtonApplyStyleProc; const ADefaultFontSize: Single; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyDynamicStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
  DefaultHeight := ADefaultHeight;
end;

{****************************************************************************************************************************************************************************************}
constructor TALStyleManager.TDynamicToggleButtonStyleInfo.create(const AApplyStyleProc: TDynamicToggleButtonApplyStyleProc; const ADefaultFontSize: Single; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyDynamicStyleProc := AApplyStyleProc;
  DefaultFontSize := ADefaultFontSize;
  DefaultHeight := ADefaultHeight;
end;

{************************************************************************************************************************************************}
constructor TALStyleManager.TDynamicCheckBoxStyleInfo.create(const AApplyStyleProc: TDynamicCheckBoxApplyStyleProc; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyDynamicStyleProc := AApplyStyleProc;
  DefaultHeight := ADefaultHeight;
end;

{******************************************************************************************************************************************************}
constructor TALStyleManager.TDynamicRadioButtonStyleInfo.create(const AApplyStyleProc: TDynamicRadioButtonApplyStyleProc; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyDynamicStyleProc := AApplyStyleProc;
  DefaultHeight := ADefaultHeight;
end;

{********************************************************************************************************************************************}
constructor TALStyleManager.TDynamicSwitchStyleInfo.create(const AApplyStyleProc: TDynamicSwitchApplyStyleProc; const ADefaultHeight: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyDynamicStyleProc := AApplyStyleProc;
  DefaultHeight := ADefaultHeight;
end;

{**********************************************************************************************************************************************}
constructor TALStyleManager.TDynamicTrackBarStyleInfo.create(const AApplyStyleProc: TDynamicTrackBarApplyStyleProc; const ADefaultSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyDynamicStyleProc := AApplyStyleProc;
  DefaultSize := ADefaultSize;
end;

{************************************************************************************************************************************************}
constructor TALStyleManager.TDynamicScrollBarStyleInfo.create(const AApplyStyleProc: TDynamicScrollBarApplyStyleProc; const ADefaultSize: Single);
begin
  SortOrder := TALStyleManager.GetNextSortOrder;
  ApplyDynamicStyleProc := AApplyStyleProc;
  DefaultSize := ADefaultSize;
end;

{*********************************}
constructor TALStyleManager.Create;
begin
  FLightColors := TDictionary<string, TPair<TAlphaColor, integer{SortOrder}>>.Create;
  FDarkColors := TDictionary<string, TPair<TAlphaColor, integer{SortOrder}>>.Create;
  fColors := TDictionary<string, TAlphaColor>.create;
  FFontFamilies := TDictionary<string, string>.create;
  FTextStyles := TDictionary<String, TTextStyleInfo>.create;
  FEditStyles := TDictionary<String, TEditStyleInfo>.create;
  FMemoStyles := TDictionary<String, TEditStyleInfo>.create;
  FButtonStyles := TDictionary<String, TButtonStyleInfo>.create;
  FToggleButtonStyles := TDictionary<String, TToggleButtonStyleInfo>.create;
  FCheckBoxStyles := TDictionary<String, TCheckBoxStyleInfo>.create;
  FRadioButtonStyles := TDictionary<String, TRadioButtonStyleInfo>.create;
  FSwitchStyles := TDictionary<String, TSwitchStyleInfo>.create;
  FTrackBarStyles := TDictionary<String, TTrackBarStyleInfo>.create;
  FRangeTrackBarStyles := TDictionary<String, TTrackBarStyleInfo>.create;
  FScrollBarStyles := TDictionary<String, TScrollBarStyleInfo>.create;
  FScrollBoxStyles := TDictionary<String, TScrollBoxStyleInfo>.create;
  FDialogManagerStyles := TDictionary<String, TDialogManagerStyleInfo>.create;
  FDialogStyles := TDictionary<String, TDialogStyleInfo>.create;
  //--
  FDynamicTextStyles := TDictionary<String, TDynamicTextStyleInfo>.create;
  FDynamicButtonStyles := TDictionary<String, TDynamicButtonStyleInfo>.create;
  FDynamicToggleButtonStyles := TDictionary<String, TDynamicToggleButtonStyleInfo>.create;
  FDynamicCheckBoxStyles := TDictionary<String, TDynamicCheckBoxStyleInfo>.create;
  FDynamicRadioButtonStyles := TDictionary<String, TDynamicRadioButtonStyleInfo>.create;
  FDynamicSwitchStyles := TDictionary<String, TDynamicSwitchStyleInfo>.create;
  FDynamicTrackBarStyles := TDictionary<String, TDynamicTrackBarStyleInfo>.create;
  FDynamicRangeTrackBarStyles := TDictionary<String, TDynamicTrackBarStyleInfo>.create;
  FDynamicScrollBarStyles := TDictionary<String, TDynamicScrollBarStyleInfo>.create;
  //--
  {$IF defined(ALDPK)}
  FIsDarkMode := False;
  {$ELSEIF defined(Android)}
  FIsDarkMode := GetSystemIsDarkMode;
  {$ELSEIF defined(IOS)}
  var LSystemIsDarkMode := GetSystemIsDarkMode;
  case DarkModeBehavior of
    TDarkModeBehavior.FollowSystem: FIsDarkMode := LSystemIsDarkMode;
    TDarkModeBehavior.AlwaysDark: FIsDarkMode := True;
    TDarkModeBehavior.AlwaysLight: FIsDarkMode := False;
    else raise Exception.Create('Error 888B969C-A83E-4717-838E-6A830DB0B7D6');
  end;
  if LSystemIsDarkMode <> FIsDarkMode then begin
    var LWindow := TALUIView.Wrap(NSObjectToID(TiOSHelper.SharedApplication.keyWindow));
    if Assigned(LWindow) then begin
      if not FIsDarkMode then LWindow.setOverrideUserInterfaceStyle(UIUserInterfaceStyleLight)
      else LWindow.setOverrideUserInterfaceStyle(UIUserInterfaceStyleDark);
    end
  end;
  {$ELSEIF defined(MSWindows) or defined(ALMacOS)}
  case DarkModeBehavior of
    TDarkModeBehavior.FollowSystem: FIsDarkMode := GetSystemIsDarkMode;
    TDarkModeBehavior.AlwaysDark: FIsDarkMode := True;
    TDarkModeBehavior.AlwaysLight: FIsDarkMode := False;
    else raise Exception.Create('Error 06933A1F-8EA6-46BE-9204-F2D1D27566DD');
  end;
  {$ELSE}
  FIsDarkMode := False;
  {$ENDIF}
  InitStyles;
  RefreshColors;
  {$IF defined(DEBUG)}
  ALLog('TALStyleManager', 'DarkMode: ' + ALBoolToStrW(FIsDarkMode, 'True', 'False'));
  {$ENDIF}
  inherited;
end;

{*********************************}
destructor TALStyleManager.Destroy;
begin
  ALFreeAndNil(FLightColors);
  ALFreeAndNil(FDarkColors);
  AlFreeAndNil(fColors);
  AlFreeAndNil(FFontFamilies);
  AlFreeAndNil(FTextStyles);
  AlFreeAndNil(FEditStyles);
  AlFreeAndNil(FMemoStyles);
  AlFreeAndNil(FButtonStyles);
  AlFreeAndNil(FToggleButtonStyles);
  AlFreeAndNil(FCheckBoxStyles);
  AlFreeAndNil(FRadioButtonStyles);
  AlFreeAndNil(FSwitchStyles);
  AlFreeAndNil(FTrackBarStyles);
  AlFreeAndNil(FRangeTrackBarStyles);
  AlFreeAndNil(FScrollBarStyles);
  AlFreeAndNil(FScrollBoxStyles);
  AlFreeAndNil(FDialogManagerStyles);
  AlFreeAndNil(FDialogStyles);
  //--
  AlFreeAndNil(FDynamicTextStyles);
  AlFreeAndNil(FDynamicButtonStyles);
  AlFreeAndNil(FDynamicToggleButtonStyles);
  AlFreeAndNil(FDynamicCheckBoxStyles);
  AlFreeAndNil(FDynamicRadioButtonStyles);
  AlFreeAndNil(FDynamicSwitchStyles);
  AlFreeAndNil(FDynamicTrackBarStyles);
  AlFreeAndNil(FDynamicRangeTrackBarStyles);
  AlFreeAndNil(FDynamicScrollBarStyles);
  //--
  inherited;
end;

{***********************************}
procedure TALStyleManager.InitStyles;
begin
  // Note: To generate a new Material 3 color palette, you can use the following tool:
  // https://www.figma.com/community/plugin/1034969338659738588/material-theme-builder
  // Select Export > Material Theme (JSON)

  AddOrSetColor('Material3.Color.Primary', $FF6750A4, False); // md.ref.palette.primary40 | Main color used across screens and components
  AddOrSetColor('Material3.Color.OnPrimary', $FFFFFFFF, False); // md.ref.palette.primary100 | Text and icons shown against the primary color
  AddOrSetColor('Material3.Color.PrimaryContainer', $FFEADDFF, False); // md.ref.palette.primary90 | Standout container color for key components
  AddOrSetColor('Material3.Color.OnPrimaryContainer', $FF4F378B, False); // md.ref.palette.primary30 | Contrast-passing color shown against the primary container
  AddOrSetColor('Material3.Color.Secondary', $FF625B71, False); // md.ref.palette.secondary40 | Accent color used across screens and components
  AddOrSetColor('Material3.Color.OnSecondary', $FFFFFFFF, False); // md.ref.palette.secondary100 | Text and icons shown against the secondary color
  AddOrSetColor('Material3.Color.SecondaryContainer', $FFE8DEF8, False); // md.ref.palette.secondary90 | Less prominent container color, for components like tonal buttons
  AddOrSetColor('Material3.Color.OnSecondaryContainer', $FF4A4458, False); // md.ref.palette.secondary30 | Contrast-passing color shown against the secondary container
  AddOrSetColor('Material3.Color.Tertiary', $FF7D5260, False); // md.ref.palette.tertiary40
  AddOrSetColor('Material3.Color.OnTertiary', $FFFFFFFF, False); // md.ref.palette.tertiary100
  AddOrSetColor('Material3.Color.TertiaryContainer', $FFFFD8E4, False); // md.ref.palette.tertiary90 | Contrasting container color, for components like input fields
  AddOrSetColor('Material3.Color.OnTertiaryContainer', $FF633B48, False); // md.ref.palette.tertiary30 | Contrast-passing color shown against the tertiary container
  AddOrSetColor('Material3.Color.Error', $FFB3261E, False); // md.ref.palette.error40 | Indicates errors, such as invalid input in a date picker
  AddOrSetColor('Material3.Color.OnError', $FFFFFFFF, False); // md.ref.palette.error100 | Used for text and icons on the error color
  AddOrSetColor('Material3.Color.ErrorContainer', $FFF9DEDC, False); // md.ref.palette.error90
  AddOrSetColor('Material3.Color.OnErrorContainer', $FF8C1D18, False); // md.ref.palette.error30
  AddOrSetColor('Material3.Color.Surface', $FFFEF7FF, False); // md.ref.palette.neutral98 | Surface color for components like cards, sheets, and menus
  AddOrSetColor('Material3.Color.OnSurface', $FF1D1B20, False); // md.ref.palette.neutral10 | Text and icons shown against the surface color
  AddOrSetColor('Material3.Color.SurfaceVariant', $FFE7E0EC, False); // md.ref.palette.neutral-variant90 | Alternate surface color, can be used for active states
  AddOrSetColor('Material3.Color.OnSurfaceVariant', $FF49454F, False); // md.ref.palette.neutral-variant30 | For text and icons to indicate active or inactive component state
  AddOrSetColor('Material3.Color.SurfaceContainerHighest', $FFE6E0E9, False); // md.ref.palette.neutral90
  AddOrSetColor('Material3.Color.SurfaceContainerHigh', $FFECE6F0, False); // md.ref.palette.neutral92
  AddOrSetColor('Material3.Color.SurfaceContainer', $FFF3EDF7, False); // md.ref.palette.neutral94
  AddOrSetColor('Material3.Color.SurfaceContainerLow', $FFF7F2FA, False); // md.ref.palette.neutral96
  AddOrSetColor('Material3.Color.SurfaceContainerLowest', $FFFFFFFF, False); // md.ref.palette.neutral100
  AddOrSetColor('Material3.Color.InverseSurface', $FF322F35, False); // md.ref.palette.neutral20 | Displays opposite color of the surrounding UI
  AddOrSetColor('Material3.Color.InverseOnSurface', $FFF5EFF7, False); // md.ref.palette.neutral95 | Used for text and icons shown against the inverse surface color
  AddOrSetColor('Material3.Color.SurfaceTint', $FF6750A4, False); // md.ref.palette.primary40
  AddOrSetColor('Material3.Color.Outline', $FF79747E, False); // md.ref.palette.neutral-variant50 | Subtle color used for boundaries
  AddOrSetColor('Material3.Color.OutlineVariant', $FFCAC4D0, False); // md.ref.palette.neutral-variant80 | Outline-variant is used to define the border of a component where 3:1 contrast ratio isn’t required, a container, or a divider.
  AddOrSetColor('Material3.Color.PrimaryFixed', $FFEADDFF, False); // md.ref.palette.primary90
  AddOrSetColor('Material3.Color.OnPrimaryFixed', $FF21005D, False); // md.ref.palette.primary10
  AddOrSetColor('Material3.Color.PrimaryFixedDim', $FFD0BCFF, False); // md.ref.palette.primary80
  AddOrSetColor('Material3.Color.OnPrimaryFixedVariant', $FF4F378B, False); // md.ref.palette.primary30
  AddOrSetColor('Material3.Color.InversePrimary', $FFD0BCFF, False); // md.ref.palette.primary80 | Displays opposite of the primary color
  AddOrSetColor('Material3.Color.SecondaryFixed', $FFE8DEF8, False); // md.ref.palette.secondary90
  AddOrSetColor('Material3.Color.OnSecondaryFixed', $FF1D192B, False); // md.ref.palette.secondary10
  AddOrSetColor('Material3.Color.SecondaryFixedDim', $FFCCC2DC, False); // md.ref.palette.secondary80
  AddOrSetColor('Material3.Color.OnSecondaryFixedVariant', $FF4A4458, False); // md.ref.palette.secondary30
  AddOrSetColor('Material3.Color.TertiaryFixed', $FFFFD8E4, False); // md.ref.palette.tertiary90
  AddOrSetColor('Material3.Color.OnTertiaryFixed', $FF31111D, False); // md.ref.palette.tertiary10
  AddOrSetColor('Material3.Color.TertiaryFixedDim', $FFEFB8C8, False); // md.ref.palette.tertiary80
  AddOrSetColor('Material3.Color.OnTertiaryFixedVariant', $FF633B48, False); // md.ref.palette.tertiary30
  //AddOrSetColor('Material3.Color.Background', $FFFEF7FF, False); // md.ref.palette.neutral98 | Note: Background is a legacy color role. It is recommended to use Surface instead of Background.
  //AddOrSetColor('Material3.Color.OnBackground', $FF1D1B20, False); // md.ref.palette.neutral10 | Used for text and icons shown against the background color
  AddOrSetColor('Material3.Color.SurfaceBright', $FFFEF7FF, False); // md.ref.palette.neutral98
  AddOrSetColor('Material3.Color.SurfaceDim', $FFDED8E1, False); // md.ref.palette.neutral87
  AddOrSetColor('Material3.Color.Scrim', $FF000000, False); // md.ref.palette.neutral0 | Used for scrims which help separate floating components from the background.
  AddOrSetColor('Material3.Color.Shadow', $FF000000, False); // md.ref.palette.neutral0 | For shadows applied to elevated components

  AddOrSetColor('Material3.Color.Primary', $FFD0BCFF, True); // md.ref.palette.primary80 | Main color used across screens and components
  AddOrSetColor('Material3.Color.OnPrimary', $FF381E72, True); // md.ref.palette.primary20 | Text and icons shown against the primary color
  AddOrSetColor('Material3.Color.PrimaryContainer', $FF4F378B, True); // md.ref.palette.primary30 | Standout container color for key components
  AddOrSetColor('Material3.Color.OnPrimaryContainer', $FFEADDFF, True); // md.ref.palette.primary90 | Contrast-passing color shown against the primary container
  AddOrSetColor('Material3.Color.Secondary', $FFCCC2DC, True); // md.ref.palette.secondary80 | Accent color used across screens and components
  AddOrSetColor('Material3.Color.OnSecondary', $FF332D41, True); // md.ref.palette.secondary20 | Text and icons shown against the secondary color
  AddOrSetColor('Material3.Color.SecondaryContainer', $FF4A4458, True); // md.ref.palette.secondary30 | Less prominent container color, for components like tonal buttons
  AddOrSetColor('Material3.Color.OnSecondaryContainer', $FFE8DEF8, True); // md.ref.palette.secondary90 | Contrast-passing color shown against the secondary container
  AddOrSetColor('Material3.Color.Tertiary', $FFEFB8C8, True); // md.ref.palette.tertiary80
  AddOrSetColor('Material3.Color.OnTertiary', $FF492532, True); // md.ref.palette.tertiary20
  AddOrSetColor('Material3.Color.TertiaryContainer', $FF633B48, True); // md.ref.palette.tertiary30 | Contrasting container color, for components like input fields
  AddOrSetColor('Material3.Color.OnTertiaryContainer', $FFFFD8E4, True); // md.ref.palette.tertiary90 | Contrast-passing color shown against the tertiary container
  AddOrSetColor('Material3.Color.Error', $FFF2B8B5, True); // md.ref.palette.error80 | Indicates errors, such as invalid input in a date picker
  AddOrSetColor('Material3.Color.OnError', $FF601410, True); // md.ref.palette.error20 | Used for text and icons on the error color
  AddOrSetColor('Material3.Color.ErrorContainer', $FF8C1D18, True); // md.ref.palette.error30
  AddOrSetColor('Material3.Color.OnErrorContainer', $FFF9DEDC, True); // md.ref.palette.error90
  AddOrSetColor('Material3.Color.Surface', $FF141218, True); // md.ref.palette.neutral6 | Surface color for components like cards, sheets, and menus
  AddOrSetColor('Material3.Color.OnSurface', $FFE6E0E9, True); // md.ref.palette.neutral90 | Text and icons shown against the surface color
  AddOrSetColor('Material3.Color.SurfaceVariant', $FF49454F, True); // md.ref.palette.neutral-variant30 | Alternate surface color, can be used for active states
  AddOrSetColor('Material3.Color.OnSurfaceVariant', $FFCAC4D0, True); // md.ref.palette.neutral-variant80 | For text and icons to indicate active or inactive component state
  AddOrSetColor('Material3.Color.SurfaceContainerHighest', $FF36343B, True); // md.ref.palette.neutral22
  AddOrSetColor('Material3.Color.SurfaceContainerHigh', $FF2B2930, True); // md.ref.palette.neutral17
  AddOrSetColor('Material3.Color.SurfaceContainer', $FF211F26, True); // md.ref.palette.neutral12
  AddOrSetColor('Material3.Color.SurfaceContainerLow', $FF1D1B20, True); // md.ref.palette.neutral10
  AddOrSetColor('Material3.Color.SurfaceContainerLowest', $FF0F0D13, True); // md.ref.palette.neutral4
  AddOrSetColor('Material3.Color.InverseSurface', $FFE6E0E9, True); // md.ref.palette.neutral90 | Displays opposite color of the surrounding UI
  AddOrSetColor('Material3.Color.InverseOnSurface', $FF322F35, True); // md.ref.palette.neutral20 | Used for text and icons shown against the inverse surface color
  AddOrSetColor('Material3.Color.SurfaceTint', $FFD0BCFF, True); // md.ref.palette.primary80
  AddOrSetColor('Material3.Color.Outline', $FF938F99, True); // md.ref.palette.neutral-variant60 | Subtle color used for boundaries
  AddOrSetColor('Material3.Color.OutlineVariant', $FF49454F, True); // md.ref.palette.neutral-variant30 | Outline-variant is used to define the border of a component where 3:1 contrast ratio isn’t required, a container, or a divider.
  AddOrSetColor('Material3.Color.PrimaryFixed', $FFEADDFF, True); // md.ref.palette.primary90
  AddOrSetColor('Material3.Color.OnPrimaryFixed', $FF21005D, True); // md.ref.palette.primary10
  AddOrSetColor('Material3.Color.PrimaryFixedDim', $FFD0BCFF, True); // md.ref.palette.primary80
  AddOrSetColor('Material3.Color.OnPrimaryFixedVariant', $FF4F378B, True); // md.ref.palette.primary30
  AddOrSetColor('Material3.Color.InversePrimary', $FF6750A4, True); // md.ref.palette.primary40 | Displays opposite of the primary color
  AddOrSetColor('Material3.Color.SecondaryFixed', $FFE8DEF8, True); // md.ref.palette.secondary90
  AddOrSetColor('Material3.Color.OnSecondaryFixed', $FF1D192B, True); // md.ref.palette.secondary10
  AddOrSetColor('Material3.Color.SecondaryFixedDim', $FFCCC2DC, True); // md.ref.palette.secondary80
  AddOrSetColor('Material3.Color.OnSecondaryFixedVariant', $FF4A4458, True); // md.ref.palette.secondary30
  AddOrSetColor('Material3.Color.TertiaryFixed', $FFFFD8E4, True); // md.ref.palette.tertiary90
  AddOrSetColor('Material3.Color.OnTertiaryFixed', $FF31111D, True); // md.ref.palette.tertiary10
  AddOrSetColor('Material3.Color.TertiaryFixedDim', $FFEFB8C8, True); // md.ref.palette.tertiary80
  AddOrSetColor('Material3.Color.OnTertiaryFixedVariant', $FF633B48, True); // md.ref.palette.tertiary30
  //AddOrSetColor('Material3.Color.Background', $FF141218, True); // md.ref.palette.neutral6 | Note: Background is a legacy color role. It is recommended to use Surface instead of Background.
  //AddOrSetColor('Material3.Color.OnBackground', $FFE6E0E9, True); // md.ref.palette.neutral90 | Used for text and icons shown against the background color
  AddOrSetColor('Material3.Color.SurfaceBright', $FF3B383E, True); // md.ref.palette.neutral24
  AddOrSetColor('Material3.Color.SurfaceDim', $FF141218, True); // md.ref.palette.neutral6
  AddOrSetColor('Material3.Color.Scrim', $FF000000, True); // md.ref.palette.neutral0 | Used for scrims which help separate floating components from the background.
  AddOrSetColor('Material3.Color.Shadow', $FF000000, True); // md.ref.palette.neutral0 | For shadows applied to elevated components

  var LDefaultSystemFontFamily: String;
  {$if defined(ANDROID)}
  // In Android, when you want to use the default system font, you should
  // specify "sans-serif" as the font name. Roboto has been the default font
  // for Android since Android 4.0 (Ice Cream Sandwich), and specifying
  // "sans-serif" in your Java/Kotlin code will use Roboto or whichever font
  // is the system default on the user's device. This approach ensures that
  // your application uses the default system font, which provides a consistent
  // user experience across different devices and versions of Android.
  //   sans-serif
  //   sans-serif-thin
  //   sans-serif-light
  //   sans-serif-medium
  //   sans-serif-black
  //   sans-serif-condensed
  //   sans-serif-smallcaps
  LDefaultSystemFontFamily := 'sans-serif';
  {$ELSEif defined(ALAppleOS)}
  // https://developer.apple.com/fonts/system-fonts/
  //   Helvetica Neue
  //   Helvetica Neue Thin
  //   Helvetica Neue Light
  //   Helvetica Neue Medium
  //   Helvetica Neue Bold
  LDefaultSystemFontFamily := 'Helvetica Neue';
  {$ELSEIF defined(MSWINDOWS)}
  // Segoe UI Light
  // Segoe UI Light
  // Segoe UI Semibold
  // Segoe UI Black
  LDefaultSystemFontFamily := 'Segoe UI';
  {$ELSE}
  LDefaultSystemFontFamily := 'sans-serif';
  {$endif}
  AddOrSetFontFamily('sans-serif', LDefaultSystemFontFamily);
  // Material 3 typography tokens live at:
  // https://m3.material.io/styles/typography/type-scale-tokens
  // I’m not using them here because they conflate font family with size—
  // in our app we often change sizes without swapping families—
  // and, in practice, they all resolve to the same face (“Roboto”).
  AddOrSetFontFamily('Material3.Font.Display.Large', LDefaultSystemFontFamily); // md.sys.typescale.display-large.font / md.ref.typeface.brand / Roboto
  AddOrSetFontFamily('Material3.Font.Display.Medium', LDefaultSystemFontFamily); // md.sys.typescale.display-medium.font / md.ref.typeface.brand / Roboto
  AddOrSetFontFamily('Material3.Font.Display.Small', LDefaultSystemFontFamily); // md.sys.typescale.display-small.font / md.ref.typeface.brand / Roboto
  AddOrSetFontFamily('Material3.Font.Headline.Large', LDefaultSystemFontFamily); // md.sys.typescale.headline-large.font / md.ref.typeface.brand / Roboto
  AddOrSetFontFamily('Material3.Font.Headline.Medium', LDefaultSystemFontFamily); // md.sys.typescale.headline-medium.font / md.ref.typeface.brand / Roboto
  AddOrSetFontFamily('Material3.Font.Headline.Small', LDefaultSystemFontFamily); // md.sys.typescale.headline-small.font / md.ref.typeface.brand / Roboto
  AddOrSetFontFamily('Material3.Font.Title.Large', LDefaultSystemFontFamily); // md.sys.typescale.title-large.font / md.ref.typeface.brand / Roboto
  AddOrSetFontFamily('Material3.Font.Title.Medium', LDefaultSystemFontFamily); // md.sys.typescale.title-medium.font / md.ref.typeface.plain / Roboto
  AddOrSetFontFamily('Material3.Font.Title.Small', LDefaultSystemFontFamily); // md.sys.typescale.title-small.font / md.ref.typeface.plain / Roboto
  AddOrSetFontFamily('Material3.Font.Body.Large', LDefaultSystemFontFamily); // md.sys.typescale.body-large.font / md.ref.typeface.plain / Roboto
  AddOrSetFontFamily('Material3.Font.Body.Medium', LDefaultSystemFontFamily); // md.sys.typescale.body-medium.font / md.ref.typeface.plain / Roboto
  AddOrSetFontFamily('Material3.Font.Body.Small', LDefaultSystemFontFamily); // md.sys.typescale.body-small.font / md.ref.typeface.plain / Roboto
  AddOrSetFontFamily('Material3.Font.Label.Large', LDefaultSystemFontFamily); // md.sys.typescale.label-large.font / md.ref.typeface.plain / Roboto
  AddOrSetFontFamily('Material3.Font.Label.Medium', LDefaultSystemFontFamily); // md.sys.typescale.label-medium.font / md.ref.typeface.plain / Roboto
  AddOrSetFontFamily('Material3.Font.Label.Small', LDefaultSystemFontFamily); // md.sys.typescale.label-small.font / md.ref.typeface.plain / Roboto

  AddOrSetTextStyle('Default', ALResetTextStyle, 14{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Display.Large', ALApplyMaterial3TextDisplayLargeStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Display.Medium', ALApplyMaterial3TextDisplayMediumStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Display.Small', ALApplyMaterial3TextDisplaySmallStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Headline.Large', ALApplyMaterial3TextHeadlineLargeStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Headline.Medium', ALApplyMaterial3TextHeadlineMediumStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Headline.Small', ALApplyMaterial3TextHeadlineSmallStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Title.Large', ALApplyMaterial3TextTitleLargeStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Title.Medium', ALApplyMaterial3TextTitleMediumStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Title.Small', ALApplyMaterial3TextTitleSmallStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Body.Large', ALApplyMaterial3TextBodyLargeStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Body.Medium', ALApplyMaterial3TextBodyMediumStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Body.Small', ALApplyMaterial3TextBodySmallStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Label.Large', ALApplyMaterial3TextLabelLargeStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Label.Medium', ALApplyMaterial3TextLabelMediumStyle, 0{ADefaultFontSize});
  AddOrSetTextStyle('Material3.Text.Label.Small', ALApplyMaterial3TextLabelSmallStyle, 0{ADefaultFontSize});

  AddOrSetEditStyle('Default', ALResetEditStyle, 16{ADefaultFontSize});
  AddOrSetEditStyle('Material3.Edit.Filled', ALApplyMaterial3EditFilledStyle, 16{ADefaultFontSize});
  AddOrSetEditStyle('Material3.Edit.Filled.Error', ALApplyMaterial3EditFilledErrorStyle, 16{ADefaultFontSize});
  AddOrSetEditStyle('Material3.Edit.Outlined', ALApplyMaterial3EditOutlinedStyle, 16{ADefaultFontSize});
  AddOrSetEditStyle('Material3.Edit.Outlined.Error', ALApplyMaterial3EditOutlinedErrorStyle, 16{ADefaultFontSize});
  AddOrSetEditStyle('Material3.Edit.Hybrid', ALApplyMaterial3EditHybridStyle, 16{ADefaultFontSize});
  AddOrSetEditStyle('Material3.Edit.Hybrid.Error', ALApplyMaterial3EditHybridErrorStyle, 16{ADefaultFontSize});

  AddOrSetMemoStyle('Default', ALResetEditStyle, 16{ADefaultFontSize});
  AddOrSetMemoStyle('Material3.Memo.Filled', ALApplyMaterial3EditFilledStyle, 16{ADefaultFontSize});
  AddOrSetMemoStyle('Material3.Memo.Filled.Error', ALApplyMaterial3EditFilledErrorStyle, 16{ADefaultFontSize});
  AddOrSetMemoStyle('Material3.Memo.Outlined', ALApplyMaterial3EditOutlinedStyle, 16{ADefaultFontSize});
  AddOrSetMemoStyle('Material3.Memo.Outlined.Error', ALApplyMaterial3EditOutlinedErrorStyle, 16{ADefaultFontSize});
  AddOrSetMemoStyle('Material3.Memo.Hybrid', ALApplyMaterial3EditHybridStyle, 16{ADefaultFontSize});
  AddOrSetMemoStyle('Material3.Memo.Hybrid.Error', ALApplyMaterial3EditHybridErrorStyle, 16{ADefaultFontSize});

  AddOrSetButtonStyle('Default', ALResetButtonStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Button.Filled', ALApplyMaterial3ButtonFilledStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Button.Outlined', ALApplyMaterial3ButtonOutlinedStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Button.Text', ALApplyMaterial3ButtonTextStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Button.Elevated', ALApplyMaterial3ButtonElevatedStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Button.Tonal', ALApplyMaterial3ButtonTonalStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.XSmall.Round', ALApplyMaterial3ExpressiveButtonFilledXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.Small.Round', ALApplyMaterial3ExpressiveButtonFilledSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.Medium.Round', ALApplyMaterial3ExpressiveButtonFilledMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.Large.Round', ALApplyMaterial3ExpressiveButtonFilledLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.XLarge.Round', ALApplyMaterial3ExpressiveButtonFilledXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.XSmall.Square', ALApplyMaterial3ExpressiveButtonFilledXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.Small.Square', ALApplyMaterial3ExpressiveButtonFilledSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.Medium.Square', ALApplyMaterial3ExpressiveButtonFilledMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.Large.Square', ALApplyMaterial3ExpressiveButtonFilledLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Filled.XLarge.Square', ALApplyMaterial3ExpressiveButtonFilledXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.XSmall.Round', ALApplyMaterial3ExpressiveButtonOutlinedXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.Small.Round', ALApplyMaterial3ExpressiveButtonOutlinedSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.Medium.Round', ALApplyMaterial3ExpressiveButtonOutlinedMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.Large.Round', ALApplyMaterial3ExpressiveButtonOutlinedLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.XLarge.Round', ALApplyMaterial3ExpressiveButtonOutlinedXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.XSmall.Square', ALApplyMaterial3ExpressiveButtonOutlinedXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.Small.Square', ALApplyMaterial3ExpressiveButtonOutlinedSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.Medium.Square', ALApplyMaterial3ExpressiveButtonOutlinedMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.Large.Square', ALApplyMaterial3ExpressiveButtonOutlinedLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Outlined.XLarge.Square', ALApplyMaterial3ExpressiveButtonOutlinedXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.XSmall.Round', ALApplyMaterial3ExpressiveButtonTextXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.Small.Round', ALApplyMaterial3ExpressiveButtonTextSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.Medium.Round', ALApplyMaterial3ExpressiveButtonTextMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.Large.Round', ALApplyMaterial3ExpressiveButtonTextLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.XLarge.Round', ALApplyMaterial3ExpressiveButtonTextXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.XSmall.Square', ALApplyMaterial3ExpressiveButtonTextXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.Small.Square', ALApplyMaterial3ExpressiveButtonTextSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.Medium.Square', ALApplyMaterial3ExpressiveButtonTextMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.Large.Square', ALApplyMaterial3ExpressiveButtonTextLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Text.XLarge.Square', ALApplyMaterial3ExpressiveButtonTextXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.XSmall.Round', ALApplyMaterial3ExpressiveButtonElevatedXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.Small.Round', ALApplyMaterial3ExpressiveButtonElevatedSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.Medium.Round', ALApplyMaterial3ExpressiveButtonElevatedMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.Large.Round', ALApplyMaterial3ExpressiveButtonElevatedLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.XLarge.Round', ALApplyMaterial3ExpressiveButtonElevatedXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.XSmall.Square', ALApplyMaterial3ExpressiveButtonElevatedXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.Small.Square', ALApplyMaterial3ExpressiveButtonElevatedSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.Medium.Square', ALApplyMaterial3ExpressiveButtonElevatedMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.Large.Square', ALApplyMaterial3ExpressiveButtonElevatedLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Elevated.XLarge.Square', ALApplyMaterial3ExpressiveButtonElevatedXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.XSmall.Round', ALApplyMaterial3ExpressiveButtonTonalXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.Small.Round', ALApplyMaterial3ExpressiveButtonTonalSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.Medium.Round', ALApplyMaterial3ExpressiveButtonTonalMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.Large.Round', ALApplyMaterial3ExpressiveButtonTonalLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.XLarge.Round', ALApplyMaterial3ExpressiveButtonTonalXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.XSmall.Square', ALApplyMaterial3ExpressiveButtonTonalXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.Small.Square', ALApplyMaterial3ExpressiveButtonTonalSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.Medium.Square', ALApplyMaterial3ExpressiveButtonTonalMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.Large.Square', ALApplyMaterial3ExpressiveButtonTonalLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetButtonStyle('Material3.Expressive.Button.Tonal.XLarge.Square', ALApplyMaterial3ExpressiveButtonTonalXLargeSquareStyle, 32{ADefaultFontSize});

  AddOrSetButtonIconStyle('Material3.Button.Icon.Filled', ALApplyMaterial3ButtonIconFilledStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Button.Icon.Outlined', ALApplyMaterial3ButtonIconOutlinedStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Button.Icon.Tonal', ALApplyMaterial3ButtonIconTonalStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Button.Icon.Standard', ALApplyMaterial3ButtonIconStandardStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Round', ALApplyMaterial3ExpressiveButtonIconFilledXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Round', ALApplyMaterial3ExpressiveButtonIconFilledSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Round', ALApplyMaterial3ExpressiveButtonIconFilledMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Round', ALApplyMaterial3ExpressiveButtonIconFilledLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Round', ALApplyMaterial3ExpressiveButtonIconFilledXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Square', ALApplyMaterial3ExpressiveButtonIconFilledXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Square', ALApplyMaterial3ExpressiveButtonIconFilledSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Square', ALApplyMaterial3ExpressiveButtonIconFilledMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Square', ALApplyMaterial3ExpressiveButtonIconFilledLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Square', ALApplyMaterial3ExpressiveButtonIconFilledXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconFilledXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconFilledSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconFilledMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconFilledLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconFilledXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Wide.Round', ALApplyMaterial3ExpressiveButtonIconFilledXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Wide.Round', ALApplyMaterial3ExpressiveButtonIconFilledSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Wide.Round', ALApplyMaterial3ExpressiveButtonIconFilledMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Wide.Round', ALApplyMaterial3ExpressiveButtonIconFilledLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Wide.Round', ALApplyMaterial3ExpressiveButtonIconFilledXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconFilledXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconFilledSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconFilledMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconFilledLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconFilledXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Wide.Square', ALApplyMaterial3ExpressiveButtonIconFilledXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Wide.Square', ALApplyMaterial3ExpressiveButtonIconFilledSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Wide.Square', ALApplyMaterial3ExpressiveButtonIconFilledMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Wide.Square', ALApplyMaterial3ExpressiveButtonIconFilledLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Wide.Square', ALApplyMaterial3ExpressiveButtonIconFilledXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Wide.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Wide.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Wide.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Wide.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Wide.Round', ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Wide.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Wide.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Wide.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Wide.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Wide.Square', ALApplyMaterial3ExpressiveButtonIconOutlinedXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Round', ALApplyMaterial3ExpressiveButtonIconTonalXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Round', ALApplyMaterial3ExpressiveButtonIconTonalSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Round', ALApplyMaterial3ExpressiveButtonIconTonalMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Round', ALApplyMaterial3ExpressiveButtonIconTonalLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Round', ALApplyMaterial3ExpressiveButtonIconTonalXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Square', ALApplyMaterial3ExpressiveButtonIconTonalXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Square', ALApplyMaterial3ExpressiveButtonIconTonalSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Square', ALApplyMaterial3ExpressiveButtonIconTonalMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Square', ALApplyMaterial3ExpressiveButtonIconTonalLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Square', ALApplyMaterial3ExpressiveButtonIconTonalXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconTonalXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconTonalSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconTonalMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconTonalLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconTonalXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Wide.Round', ALApplyMaterial3ExpressiveButtonIconTonalXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Wide.Round', ALApplyMaterial3ExpressiveButtonIconTonalSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Wide.Round', ALApplyMaterial3ExpressiveButtonIconTonalMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Wide.Round', ALApplyMaterial3ExpressiveButtonIconTonalLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Wide.Round', ALApplyMaterial3ExpressiveButtonIconTonalXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconTonalXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconTonalSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconTonalMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconTonalLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconTonalXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Wide.Square', ALApplyMaterial3ExpressiveButtonIconTonalXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Wide.Square', ALApplyMaterial3ExpressiveButtonIconTonalSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Wide.Square', ALApplyMaterial3ExpressiveButtonIconTonalMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Wide.Square', ALApplyMaterial3ExpressiveButtonIconTonalLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Wide.Square', ALApplyMaterial3ExpressiveButtonIconTonalXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Round', ALApplyMaterial3ExpressiveButtonIconStandardXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Round', ALApplyMaterial3ExpressiveButtonIconStandardSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Round', ALApplyMaterial3ExpressiveButtonIconStandardMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Round', ALApplyMaterial3ExpressiveButtonIconStandardLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Round', ALApplyMaterial3ExpressiveButtonIconStandardXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Square', ALApplyMaterial3ExpressiveButtonIconStandardXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Square', ALApplyMaterial3ExpressiveButtonIconStandardSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Square', ALApplyMaterial3ExpressiveButtonIconStandardMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Square', ALApplyMaterial3ExpressiveButtonIconStandardLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Square', ALApplyMaterial3ExpressiveButtonIconStandardXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconStandardXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconStandardSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconStandardMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconStandardLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveButtonIconStandardXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Wide.Round', ALApplyMaterial3ExpressiveButtonIconStandardXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Wide.Round', ALApplyMaterial3ExpressiveButtonIconStandardSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Wide.Round', ALApplyMaterial3ExpressiveButtonIconStandardMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Wide.Round', ALApplyMaterial3ExpressiveButtonIconStandardLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Wide.Round', ALApplyMaterial3ExpressiveButtonIconStandardXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconStandardXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconStandardSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconStandardMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconStandardLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveButtonIconStandardXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Wide.Square', ALApplyMaterial3ExpressiveButtonIconStandardXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Wide.Square', ALApplyMaterial3ExpressiveButtonIconStandardSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Wide.Square', ALApplyMaterial3ExpressiveButtonIconStandardMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Wide.Square', ALApplyMaterial3ExpressiveButtonIconStandardLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Wide.Square', ALApplyMaterial3ExpressiveButtonIconStandardXLargeWideSquareStyle, 136{ADefaultHeight});

  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Primary.Small', ALApplyMaterial3ExpressiveButtonFABPrimarySmallStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Primary.Medium', ALApplyMaterial3ExpressiveButtonFABPrimaryMediumStyle, 80{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Primary.Large', ALApplyMaterial3ExpressiveButtonFABPrimaryLargeStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Secondary.Small', ALApplyMaterial3ExpressiveButtonFABSecondarySmallStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Secondary.Medium', ALApplyMaterial3ExpressiveButtonFABSecondaryMediumStyle, 80{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Secondary.Large', ALApplyMaterial3ExpressiveButtonFABSecondaryLargeStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Tertiary.Small', ALApplyMaterial3ExpressiveButtonFABTertiarySmallStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Tertiary.Medium', ALApplyMaterial3ExpressiveButtonFABTertiaryMediumStyle, 80{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.Tertiary.Large', ALApplyMaterial3ExpressiveButtonFABTertiaryLargeStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalPrimary.Small', ALApplyMaterial3ExpressiveButtonFABTonalPrimarySmallStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalPrimary.Medium', ALApplyMaterial3ExpressiveButtonFABTonalPrimaryMediumStyle, 80{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalPrimary.Large', ALApplyMaterial3ExpressiveButtonFABTonalPrimaryLargeStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalSecondary.Small', ALApplyMaterial3ExpressiveButtonFABTonalSecondarySmallStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalSecondary.Medium', ALApplyMaterial3ExpressiveButtonFABTonalSecondaryMediumStyle, 80{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalSecondary.Large', ALApplyMaterial3ExpressiveButtonFABTonalSecondaryLargeStyle, 96{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalTertiary.Small', ALApplyMaterial3ExpressiveButtonFABTonalTertiarySmallStyle, 56{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalTertiary.Medium', ALApplyMaterial3ExpressiveButtonFABTonalTertiaryMediumStyle, 80{ADefaultHeight});
  AddOrSetButtonIconStyle('Material3.Expressive.Button.FAB.TonalTertiary.Large', ALApplyMaterial3ExpressiveButtonFABTonalTertiaryLargeStyle, 96{ADefaultHeight});

  AddOrSetToggleButtonStyle('Default', ALResetToggleButtonStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.XSmall.Round', ALApplyMaterial3ExpressiveToggleButtonFilledXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Small.Round', ALApplyMaterial3ExpressiveToggleButtonFilledSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Medium.Round', ALApplyMaterial3ExpressiveToggleButtonFilledMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Large.Round', ALApplyMaterial3ExpressiveToggleButtonFilledLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.XLarge.Round', ALApplyMaterial3ExpressiveToggleButtonFilledXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.XSmall.Square', ALApplyMaterial3ExpressiveToggleButtonFilledXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Small.Square', ALApplyMaterial3ExpressiveToggleButtonFilledSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Medium.Square', ALApplyMaterial3ExpressiveToggleButtonFilledMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Large.Square', ALApplyMaterial3ExpressiveToggleButtonFilledLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.XLarge.Square', ALApplyMaterial3ExpressiveToggleButtonFilledXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.XSmall.Round', ALApplyMaterial3ExpressiveToggleButtonOutlinedXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Small.Round', ALApplyMaterial3ExpressiveToggleButtonOutlinedSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Medium.Round', ALApplyMaterial3ExpressiveToggleButtonOutlinedMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Large.Round', ALApplyMaterial3ExpressiveToggleButtonOutlinedLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.XLarge.Round', ALApplyMaterial3ExpressiveToggleButtonOutlinedXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.XSmall.Square', ALApplyMaterial3ExpressiveToggleButtonOutlinedXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Small.Square', ALApplyMaterial3ExpressiveToggleButtonOutlinedSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Medium.Square', ALApplyMaterial3ExpressiveToggleButtonOutlinedMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Large.Square', ALApplyMaterial3ExpressiveToggleButtonOutlinedLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.XLarge.Square', ALApplyMaterial3ExpressiveToggleButtonOutlinedXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.XSmall.Round', ALApplyMaterial3ExpressiveToggleButtonElevatedXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Small.Round', ALApplyMaterial3ExpressiveToggleButtonElevatedSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Medium.Round', ALApplyMaterial3ExpressiveToggleButtonElevatedMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Large.Round', ALApplyMaterial3ExpressiveToggleButtonElevatedLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.XLarge.Round', ALApplyMaterial3ExpressiveToggleButtonElevatedXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.XSmall.Square', ALApplyMaterial3ExpressiveToggleButtonElevatedXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Small.Square', ALApplyMaterial3ExpressiveToggleButtonElevatedSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Medium.Square', ALApplyMaterial3ExpressiveToggleButtonElevatedMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Large.Square', ALApplyMaterial3ExpressiveToggleButtonElevatedLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.XLarge.Square', ALApplyMaterial3ExpressiveToggleButtonElevatedXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.XSmall.Round', ALApplyMaterial3ExpressiveToggleButtonTonalXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Small.Round', ALApplyMaterial3ExpressiveToggleButtonTonalSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Medium.Round', ALApplyMaterial3ExpressiveToggleButtonTonalMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Large.Round', ALApplyMaterial3ExpressiveToggleButtonTonalLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.XLarge.Round', ALApplyMaterial3ExpressiveToggleButtonTonalXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.XSmall.Square', ALApplyMaterial3ExpressiveToggleButtonTonalXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Small.Square', ALApplyMaterial3ExpressiveToggleButtonTonalSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Medium.Square', ALApplyMaterial3ExpressiveToggleButtonTonalMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Large.Square', ALApplyMaterial3ExpressiveToggleButtonTonalLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.XLarge.Square', ALApplyMaterial3ExpressiveToggleButtonTonalXLargeSquareStyle, 32{ADefaultFontSize});

  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconFilledXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconOutlinedXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconTonalXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Wide.Round', ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Wide.Square', ALApplyMaterial3ExpressiveToggleButtonIconStandardXLargeWideSquareStyle, 136{ADefaultHeight});

  AddOrSetCheckBoxStyle('Default', ALResetCheckBoxStyle, 18{ADefaultHeight});
  AddOrSetCheckBoxStyle('Material3.CheckBox', ALApplyMaterial3CheckBoxStyle, 18{ADefaultHeight});
  AddOrSetCheckBoxStyle('Material3.CheckBox.Error', ALApplyMaterial3CheckBoxErrorStyle, 18{ADefaultHeight});

  AddOrSetRadioButtonStyle('Default', ALResetRadioButtonStyle, 20{ADefaultHeight});
  AddOrSetRadioButtonStyle('Material3.RadioButton', ALApplyMaterial3RadioButtonStyle, 20{ADefaultHeight});
  AddOrSetRadioButtonStyle('Material3.RadioButton.Error', ALApplyMaterial3RadioButtonErrorStyle, 20{ADefaultHeight});

  AddOrSetSwitchStyle('Default', ALResetSwitchStyle, 32{ADefaultHeight});
  AddOrSetSwitchStyle('Material3.Switch', ALApplyMaterial3SwitchStyle, 32{ADefaultHeight});

  AddOrSetTrackBarStyle('Default', ALResetTrackBarStyle, 32{ADefaultSize});
  AddOrSetTrackBarStyle('Material3.TrackBar', ALApplyMaterial3TrackBarStyle, 44{ADefaultSize});

  AddOrSetRangeTrackBarStyle('Default', ALResetTrackBarStyle, 32{ADefaultSize});
  AddOrSetRangeTrackBarStyle('Material3.RangeTrackBar', ALApplyMaterial3TrackBarStyle, 44{ADefaultSize});

  AddOrSetScrollBarStyle('Default', ALResetScrollBarStyle, 18{ADefaultSize});
  AddOrSetScrollBarStyle('Material3.ScrollBar', ALApplyMaterial3ScrollBarStyle, 18{ADefaultSize});

  AddOrSetScrollBoxStyle('Default', ALResetScrollBoxStyle);
  AddOrSetScrollBoxStyle('Material3.ScrollBox', ALApplyMaterial3ScrollBoxStyle);

  AddOrSetDialogManagerStyle('Default', ALResetDialogManagerStyle, 14{ADefaultFontSize});
  AddOrSetDialogManagerStyle('Material3.DialogManager', ALApplyMaterial3DialogManagerStyle, 14{ADefaultFontSize});

  AddOrSetDynamicTextStyle('Default', ALReseTDynamicTextStyle, 14{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Display.Large', ALApplyMaterial3DynamicTextDisplayLargeStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Display.Medium', ALApplyMaterial3DynamicTextDisplayMediumStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Display.Small', ALApplyMaterial3DynamicTextDisplaySmallStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Headline.Large', ALApplyMaterial3DynamicTextHeadlineLargeStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Headline.Medium', ALApplyMaterial3DynamicTextHeadlineMediumStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Headline.Small', ALApplyMaterial3DynamicTextHeadlineSmallStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Title.Large', ALApplyMaterial3DynamicTextTitleLargeStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Title.Medium', ALApplyMaterial3DynamicTextTitleMediumStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Title.Small', ALApplyMaterial3DynamicTextTitleSmallStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Body.Large', ALApplyMaterial3DynamicTextBodyLargeStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Body.Medium', ALApplyMaterial3DynamicTextBodyMediumStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Body.Small', ALApplyMaterial3DynamicTextBodySmallStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Label.Large', ALApplyMaterial3DynamicTextLabelLargeStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Label.Medium', ALApplyMaterial3DynamicTextLabelMediumStyle, 0{ADefaultFontSize});
  AddOrSetDynamicTextStyle('Material3.Text.Label.Small', ALApplyMaterial3DynamicTextLabelSmallStyle, 0{ADefaultFontSize});

  AddOrSetDynamicButtonStyle('Default', ALResetDynamicButtonStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Button.Filled', ALApplyMaterial3DynamicButtonFilledStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Button.Outlined', ALApplyMaterial3DynamicButtonOutlinedStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Button.Text', ALApplyMaterial3DynamicButtonTextStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Button.Elevated', ALApplyMaterial3DynamicButtonElevatedStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Button.Tonal', ALApplyMaterial3DynamicButtonTonalStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonFilledXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonFilledSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonFilledMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonFilledLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonFilledXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonFilledXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonFilledSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonFilledMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonFilledLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Filled.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonFilledXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonOutlinedXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonOutlinedSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonOutlinedMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonOutlinedLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonOutlinedXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonOutlinedXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonOutlinedSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonOutlinedMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonOutlinedLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Outlined.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonOutlinedXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonTextXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonTextSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonTextMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonTextLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonTextXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonTextXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonTextSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonTextMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonTextLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Text.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonTextXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonElevatedXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonElevatedSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonElevatedMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonElevatedLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonElevatedXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonElevatedXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonElevatedSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonElevatedMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonElevatedLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Elevated.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonElevatedXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonTonalXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonTonalSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonTonalMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonTonalLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonTonalXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonTonalXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonTonalSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonTonalMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonTonalLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicButtonStyle('Material3.Expressive.Button.Tonal.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonTonalXLargeSquareStyle, 32{ADefaultFontSize});

  AddOrSetDynamicButtonIconStyle('Material3.Button.Icon.Filled', ALApplyMaterial3DynamicButtonIconFilledStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Button.Icon.Outlined', ALApplyMaterial3DynamicButtonIconOutlinedStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Button.Icon.Tonal', ALApplyMaterial3DynamicButtonIconTonalStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Button.Icon.Standard', ALApplyMaterial3DynamicButtonIconStandardStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XSmall.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Small.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Medium.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.Large.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Filled.XLarge.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconFilledXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XSmall.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Small.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Medium.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.Large.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Outlined.XLarge.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconOutlinedXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XSmall.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Small.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Medium.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.Large.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Tonal.XLarge.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconTonalXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Wide.Round', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XSmall.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Small.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Medium.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.Large.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.Icon.Standard.XLarge.Wide.Square', ALApplyMaterial3ExpressiveDynamicButtonIconStandardXLargeWideSquareStyle, 136{ADefaultHeight});

  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Primary.Small', ALApplyMaterial3ExpressiveDynamicButtonFABPrimarySmallStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Primary.Medium', ALApplyMaterial3ExpressiveDynamicButtonFABPrimaryMediumStyle, 80{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Primary.Large', ALApplyMaterial3ExpressiveDynamicButtonFABPrimaryLargeStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Secondary.Small', ALApplyMaterial3ExpressiveDynamicButtonFABSecondarySmallStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Secondary.Medium', ALApplyMaterial3ExpressiveDynamicButtonFABSecondaryMediumStyle, 80{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Secondary.Large', ALApplyMaterial3ExpressiveDynamicButtonFABSecondaryLargeStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Tertiary.Small', ALApplyMaterial3ExpressiveDynamicButtonFABTertiarySmallStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Tertiary.Medium', ALApplyMaterial3ExpressiveDynamicButtonFABTertiaryMediumStyle, 80{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.Tertiary.Large', ALApplyMaterial3ExpressiveDynamicButtonFABTertiaryLargeStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalPrimary.Small', ALApplyMaterial3ExpressiveDynamicButtonFABTonalPrimarySmallStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalPrimary.Medium', ALApplyMaterial3ExpressiveDynamicButtonFABTonalPrimaryMediumStyle, 80{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalPrimary.Large', ALApplyMaterial3ExpressiveDynamicButtonFABTonalPrimaryLargeStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalSecondary.Small', ALApplyMaterial3ExpressiveDynamicButtonFABTonalSecondarySmallStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalSecondary.Medium', ALApplyMaterial3ExpressiveDynamicButtonFABTonalSecondaryMediumStyle, 80{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalSecondary.Large', ALApplyMaterial3ExpressiveDynamicButtonFABTonalSecondaryLargeStyle, 96{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalTertiary.Small', ALApplyMaterial3ExpressiveDynamicButtonFABTonalTertiarySmallStyle, 56{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalTertiary.Medium', ALApplyMaterial3ExpressiveDynamicButtonFABTonalTertiaryMediumStyle, 80{ADefaultHeight});
  AddOrSetDynamicButtonIconStyle('Material3.Expressive.Button.FAB.TonalTertiary.Large', ALApplyMaterial3ExpressiveDynamicButtonFABTonalTertiaryLargeStyle, 96{ADefaultHeight});

  AddOrSetDynamicToggleButtonStyle('Default', ALResetDynamicToggleButtonStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.XSmall.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Small.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Medium.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Large.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.XLarge.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.XSmall.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Small.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Medium.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.Large.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Filled.XLarge.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonFilledXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.XSmall.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Small.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Medium.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Large.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.XLarge.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.XSmall.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Small.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Medium.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.Large.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Outlined.XLarge.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonOutlinedXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.XSmall.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Small.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Medium.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Large.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.XLarge.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.XSmall.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Small.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Medium.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.Large.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Elevated.XLarge.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonElevatedXLargeSquareStyle, 32{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.XSmall.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Small.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalSmallRoundStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Medium.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalMediumRoundStyle, 16{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Large.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalLargeRoundStyle, 24{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.XLarge.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXLargeRoundStyle, 32{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.XSmall.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Small.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalSmallSquareStyle, 14{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Medium.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalMediumSquareStyle, 16{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.Large.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalLargeSquareStyle, 24{ADefaultFontSize});
  AddOrSetDynamicToggleButtonStyle('Material3.Expressive.ToggleButton.Tonal.XLarge.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonTonalXLargeSquareStyle, 32{ADefaultFontSize});

  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XSmall.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Small.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Medium.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.Large.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Filled.XLarge.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconFilledXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XSmall.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Small.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Medium.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.Large.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Outlined.XLarge.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconOutlinedXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XSmall.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Small.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Medium.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.Large.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Tonal.XLarge.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconTonalXLargeWideSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallNarrowRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallNarrowRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumNarrowRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeNarrowRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Narrow.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeNarrowRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallWideRoundStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallWideRoundStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumWideRoundStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeWideRoundStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Wide.Round', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeWideRoundStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallNarrowSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallNarrowSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumNarrowSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeNarrowSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Narrow.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeNarrowSquareStyle, 136{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XSmall.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXSmallWideSquareStyle, 32{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Small.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardSmallWideSquareStyle, 40{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Medium.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardMediumWideSquareStyle, 56{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.Large.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardLargeWideSquareStyle, 96{ADefaultHeight});
  AddOrSetDynamicToggleButtonIconStyle('Material3.Expressive.ToggleButton.Icon.Standard.XLarge.Wide.Square', ALApplyMaterial3ExpressiveDynamicToggleButtonIconStandardXLargeWideSquareStyle, 136{ADefaultHeight});

  AddOrSetDynamicCheckBoxStyle('Default', ALResetDynamicCheckBoxStyle, 18{ADefaultHeight});
  AddOrSetDynamicCheckBoxStyle('Material3.CheckBox', ALApplyMaterial3DynamicCheckBoxStyle, 18{ADefaultHeight});
  AddOrSetDynamicCheckBoxStyle('Material3.CheckBox.Error', ALApplyMaterial3DynamicCheckBoxErrorStyle, 18{ADefaultHeight});

  AddOrSetDynamicRadioButtonStyle('Default', ALResetDynamicRadioButtonStyle, 20{ADefaultHeight});
  AddOrSetDynamicRadioButtonStyle('Material3.RadioButton', ALApplyMaterial3DynamicRadioButtonStyle, 20{ADefaultHeight});
  AddOrSetDynamicRadioButtonStyle('Material3.RadioButton.Error', ALApplyMaterial3DynamicRadioButtonErrorStyle, 20{ADefaultHeight});

  AddOrSetDynamicSwitchStyle('Default', ALResetDynamicSwitchStyle, 32{ADefaultHeight});
  AddOrSetDynamicSwitchStyle('Material3.Switch', ALApplyMaterial3DynamicSwitchStyle, 32{ADefaultHeight});

  AddOrSetDynamicTrackBarStyle('Default', ALResetDynamicTrackBarStyle, 32{ADefaultSize});
  AddOrSetDynamicTrackBarStyle('Material3.TrackBar', ALApplyMaterial3DynamicTrackBarStyle, 44{ADefaultSize});

  AddOrSetDynamicRangeTrackBarStyle('Default', ALResetDynamicTrackBarStyle, 32{ADefaultSize});
  AddOrSetDynamicRangeTrackBarStyle('Material3.RangeTrackBar', ALApplyMaterial3DynamicTrackBarStyle, 44{ADefaultSize});

  AddOrSetDynamicScrollBarStyle('Default', ALResetDynamicScrollBarStyle, 18{ADefaultSize});
  AddOrSetDynamicScrollBarStyle('Material3.ScrollBar', ALApplyMaterial3DynamicScrollBarStyle, 18{ADefaultSize});

end;

{**************************************}
procedure TALStyleManager.RefreshColors;
begin
  FColors.Clear;
  if not IsDarkMode then begin
    var LArray := FLightColors.ToArray;
    for var I := low(LArray) to High(LArray) do
      FColors.AddOrSetValue(LArray[I].Key, LArray[I].Value.Key);
  end
  else begin
    var LArray := FDarkColors.ToArray;
    for var I := low(LArray) to High(LArray) do
      FColors.AddOrSetValue(LArray[I].Key, LArray[I].Value.Key);
  end;
end;

{*************}
//[MultiThread]
class function TALStyleManager.CreateInstance: TALStyleManager;
begin
  result := TALStyleManager.Create;
end;

{*************}
//[MultiThread]
class function TALStyleManager.GetInstance: TALStyleManager;
begin
  if FInstance = nil then begin
    var LInstance := CreateInstanceFunc;
    if AtomicCmpExchange(Pointer(FInstance), Pointer(LInstance), nil) <> nil then ALFreeAndNil(LInstance);
  end;
  Result := FInstance;
end;

{*************}
//[MultiThread]
class function TALStyleManager.HasInstance: Boolean;
begin
  result := FInstance <> nil;
end;

{****************************************************}
function TALStyleManager.GetSystemIsDarkMode: boolean;
begin
  // Under iOS: IFMXSystemAppearanceService always returns the system appearance setting,
  // ignoring any value assigned via setOverrideUserInterfaceStyle.
  // Its result is also influenced by the UIUserInterfaceStyle value defined in Info.plist.
  // Under Android: IFMXSystemAppearanceService returns the system appearance setting,
  // or the value previously set via setApplicationNightMode, which persists across app restarts.
  var LSystemAppearance: IFMXSystemAppearanceService;
  if TPlatformServices.Current.SupportsPlatformService(IFMXSystemAppearanceService, LSystemAppearance) then
    Result := LSystemAppearance.ThemeKind = TSystemThemeKind.Dark
  else
    Result := False;
end;

{**************************************************************}
function TALStyleManager.GetDarkModeBehavior: TDarkModeBehavior;
begin
  Result := TDarkModeBehavior(TALUserPreferences.Instance.getInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.FollowSystem)));
end;

{*****************************************************************************}
procedure TALStyleManager.SetDarkModeBehavior(const AValue: TDarkModeBehavior);
begin
  var FPrevIsDarkMode := FIsDarkMode;

  {$IF defined(ANDROID)}
  // We use UiModeManager because it persists across app restarts.
  // AppCompatDelegate.setDefaultNightMode is not persistent and requires
  // calling activity.recreate(), which in our case would terminate the app.
  if TOSVersion.Check(12, 0) {API level >= 31 (Android S)} then begin
    var LUIModeService := TAndroidHelper.Activity.getSystemService(TJContext.JavaClass.UI_MODE_SERVICE);
    if LUIModeService <> nil then begin
      var LUiModeManager := TJUiModeManager.Wrap(TAndroidHelper.JObjectToID(LUIModeService));
      case AValue of
        TDarkModeBehavior.FollowSystem: begin
          LUiModeManager.setApplicationNightMode(TJUiModeManager.Javaclass.MODE_NIGHT_AUTO);
          TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.FollowSystem));
          FIsDarkMode := LUiModeManager.getNightMode = TJUiModeManager.Javaclass.MODE_NIGHT_YES;
        end;
        TDarkModeBehavior.AlwaysDark: begin
          LUiModeManager.setApplicationNightMode(TJUiModeManager.Javaclass.MODE_NIGHT_YES);
          TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.AlwaysDark));
          FIsDarkMode := True;
        end;
        TDarkModeBehavior.AlwaysLight: begin
          LUiModeManager.setApplicationNightMode(TJUiModeManager.Javaclass.MODE_NIGHT_NO);
          TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.AlwaysLight));
          FIsDarkMode := False;
        end;
        else Raise Exception.Create('Error C03E31E0-61CA-4C67-8A50-6765BED18013')
      end;
    end;
  end;
  {$ELSEIF defined(IOS)}
  var LWindow := TALUIView.Wrap(NSObjectToID(TiOSHelper.SharedApplication.keyWindow));
  case AValue of
    TDarkModeBehavior.FollowSystem: begin
      if Assigned(LWindow) then LWindow.setOverrideUserInterfaceStyle(UIUserInterfaceStyleUnspecified);
      TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.FollowSystem));
      FIsDarkMode := GetSystemIsDarkMode;
    end;
    TDarkModeBehavior.AlwaysDark: begin
      if Assigned(LWindow) then LWindow.setOverrideUserInterfaceStyle(UIUserInterfaceStyleDark);
      TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.AlwaysDark));
      FIsDarkMode := True;
    end;
    TDarkModeBehavior.AlwaysLight: begin
      if Assigned(LWindow) then LWindow.setOverrideUserInterfaceStyle(UIUserInterfaceStyleLight);
      TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.AlwaysLight));
      FIsDarkMode := False;
    end;
    else Raise Exception.Create('Error 45A23EDB-9B44-4885-B506-0B529E6D5AEA')
  end;
  {$ELSEIF defined(MSWindows) or defined(ALMacOS)}
  case AValue of
    TDarkModeBehavior.FollowSystem: begin
      TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.FollowSystem));
      FIsDarkMode := GetSystemIsDarkMode;
    end;
    TDarkModeBehavior.AlwaysDark: begin
      TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.AlwaysDark));
      FIsDarkMode := True;
    end;
    TDarkModeBehavior.AlwaysLight: begin
      TALUserPreferences.Instance.SetInt32('Alcinoe.DarkModeBehavior', integer(TDarkModeBehavior.AlwaysLight));
      FIsDarkMode := False;
    end;
    else Raise Exception.Create('Error 45A23EDB-9B44-4885-B506-0B529E6D5AEA')
  end;
  {$ENDIF}

  if FPrevIsDarkMode <> FIsDarkMode then
    RefreshColors;
end;

{******************************************************************************************************************************************************}
procedure TALStyleManager.ApplyColorScheme(const AForm: TCustomForm; const AFormFillColorKey: String; const ASystemStatusBarBackgroundColorKey: String);

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  Procedure ApplyColorSchemeRecursive(const AControl: TControl);
  begin
    for var I := 0 to AControl.ControlsCount - 1 do
      if AControl.Controls[i] is TALControl then TALControl(AControl.Controls[i]).ApplyColorScheme
      else ApplyColorSchemeRecursive(AControl.Controls[i]);
  end;

begin
  if AFormFillColorKey <> '' then
    AForm.Fill.Color := GetColor(AFormFillColorKey);
  if ASystemStatusBarBackgroundColorKey <> '' then
    AForm.SystemStatusBar.BackgroundColor := GetColor(ASystemStatusBarBackgroundColorKey);
  For var I := 0 to AForm.ChildrenCount - 1 do begin
    if (AForm.Children[i] is TALControl) then TALControl(AForm.Children[i]).ApplyColorScheme
    else if (AForm.Children[i] is TControl) then ApplyColorSchemeRecursive(TControl(AForm.Children[i]));
  end;
end;

{*********************************************************************************************************************}
procedure TALStyleManager.AddOrSetColor(const AName: String; Const AValue: TAlphaColor; Const AIsForDarkMode: Boolean);
begin
  var LPair: TPair<TAlphaColor, integer{SortOrder}>;
  if AIsForDarkMode then begin
    if not fDarkColors.TryGetValue(AName, LPair) then begin
      fDarkColors.Add(
        AName,
        TPair<TAlphaColor, integer>.Create(
          AValue,
          TALStyleManager.GetNextSortOrder))
    end
    else begin
      LPair.Key := AValue;
      fDarkColors.AddOrSetValue(AName, LPair);
    end;
  end
  else begin
    if not fLightColors.TryGetValue(AName, LPair) then begin
      fLightColors.Add(
        AName,
        TPair<TAlphaColor, integer>.Create(
          AValue,
          TALStyleManager.GetNextSortOrder))
    end
    else begin
      LPair.Key := AValue;
      fLightColors.AddOrSetValue(AName, LPair);
    end;
  end;
end;

{**************************************************************************************}
procedure TALStyleManager.AddOrSetFontFamily(const AName: String; Const AValue: String);
begin
  FFontFamilies.AddOrSetValue(AName, AValue);
end;

{*******************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetTextStyle(const AName: String; const AApplyStyleProc: TTextApplyStyleProc; const ADefaultFontSize: Single);
begin
  FTextStyles.AddOrSetValue(AName, TTextStyleInfo.create(AApplyStyleProc, ADefaultFontSize));
end;

{*******************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetEditStyle(const AName: String; const AApplyStyleProc: TEditApplyStyleProc; const ADefaultFontSize: Single);
begin
  FEditStyles.AddOrSetValue(AName, TEditStyleInfo.create(AApplyStyleProc, ADefaultFontSize));
end;

{*******************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetMemoStyle(const AName: String; const AApplyStyleProc: TEditApplyStyleProc; const ADefaultFontSize: Single);
begin
  FMemoStyles.AddOrSetValue(AName, TEditStyleInfo.create(AApplyStyleProc, ADefaultFontSize));
end;

{***********************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetButtonStyle(const AName: String; const AApplyStyleProc: TButtonApplyStyleProc; const ADefaultFontSize: Single);
begin
  FButtonStyles.AddOrSetValue(AName, TButtonStyleInfo.create(AApplyStyleProc, ADefaultFontSize, 0{ADefaultHeight}));
end;

{*************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetButtonIconStyle(const AName: String; const AApplyStyleProc: TButtonApplyStyleProc; const ADefaultHeight: Single);
begin
  FButtonStyles.AddOrSetValue(AName, TButtonStyleInfo.create(AApplyStyleProc, 0{ADefaultFontSize}, ADefaultHeight));
end;

{***********************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetToggleButtonStyle(const AName: String; const AApplyStyleProc: TToggleButtonApplyStyleProc; const ADefaultFontSize: Single);
begin
  FToggleButtonStyles.AddOrSetValue(AName, TToggleButtonStyleInfo.create(AApplyStyleProc, ADefaultFontSize, 0{ADefaultHeight}));
end;

{*************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetToggleButtonIconStyle(const AName: String; const AApplyStyleProc: TToggleButtonApplyStyleProc; const ADefaultHeight: Single);
begin
  FToggleButtonStyles.AddOrSetValue(AName, TToggleButtonStyleInfo.create(AApplyStyleProc, 0{ADefaultFontSize}, ADefaultHeight));
end;

{*************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetCheckBoxStyle(const AName: String; const AApplyStyleProc: TCheckBoxApplyStyleProc; const ADefaultHeight: Single);
begin
  FCheckBoxStyles.AddOrSetValue(AName, TCheckBoxStyleInfo.create(AApplyStyleProc, ADefaultHeight));
end;

{*******************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetRadioButtonStyle(const AName: String; const AApplyStyleProc: TRadioButtonApplyStyleProc; const ADefaultHeight: Single);
begin
  FRadioButtonStyles.AddOrSetValue(AName, TRadioButtonStyleInfo.create(AApplyStyleProc, ADefaultHeight));
end;

{*********************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetSwitchStyle(const AName: String; const AApplyStyleProc: TSwitchApplyStyleProc; const ADefaultHeight: Single);
begin
  FSwitchStyles.AddOrSetValue(AName, TSwitchStyleInfo.create(AApplyStyleProc, ADefaultHeight));
end;

{***********************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetTrackBarStyle(const AName: String; const AApplyStyleProc: TTrackBarApplyStyleProc; const ADefaultSize: Single);
begin
  FTrackBarStyles.AddOrSetValue(AName, TTrackBarStyleInfo.create(AApplyStyleProc, ADefaultSize));
end;

{****************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetRangeTrackBarStyle(const AName: String; const AApplyStyleProc: TTrackBarApplyStyleProc; const ADefaultSize: Single);
begin
  FRangeTrackBarStyles.AddOrSetValue(AName, TTrackBarStyleInfo.create(AApplyStyleProc, ADefaultSize));
end;

{*************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetScrollBarStyle(const AName: String; const AApplyStyleProc: TScrollBarApplyStyleProc; const ADefaultSize: Single);
begin
  FScrollBarStyles.AddOrSetValue(AName, TScrollBarStyleInfo.create(AApplyStyleProc, ADefaultSize));
end;

{*********************************************************************************************************************}
procedure TALStyleManager.AddOrSetScrollBoxStyle(const AName: String; const AApplyStyleProc: TScrollBoxApplyStyleProc);
begin
  FScrollBoxStyles.AddOrSetValue(AName, TScrollBoxStyleInfo.create(AApplyStyleProc));
end;

{*************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDialogManagerStyle(const AName: String; const AApplyStyleProc: TDialogManagerApplyStyleProc; const ADefaultFontSize: Single);
begin
  FDialogManagerStyles.AddOrSetValue(AName, TDialogManagerStyleInfo.create(AApplyStyleProc, ADefaultFontSize));
end;

{***********************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDialogStyle(const AName: String; const AApplyStyleProc: TDialogApplyStyleProc; const ADefaultFontSize: Single);
begin
  FDialogStyles.AddOrSetValue(AName, TDialogStyleInfo.create(AApplyStyleProc, ADefaultFontSize));
end;

{*********************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicTextStyle(const AName: String; const AApplyStyleProc: TDynamicTextApplyStyleProc; const ADefaultFontSize: Single);
begin
  FDynamicTextStyles.AddOrSetValue(AName, TDynamicTextStyleInfo.create(AApplyStyleProc, ADefaultFontSize));
end;

{*************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicButtonStyle(const AName: String; const AApplyStyleProc: TDynamicButtonApplyStyleProc; const ADefaultFontSize: Single);
begin
  FDynamicButtonStyles.AddOrSetValue(AName, TDynamicButtonStyleInfo.create(AApplyStyleProc, ADefaultFontSize, 0{ADefaultHeight}));
end;

{***************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicButtonIconStyle(const AName: String; const AApplyStyleProc: TDynamicButtonApplyStyleProc; const ADefaultHeight: Single);
begin
  FDynamicButtonStyles.AddOrSetValue(AName, TDynamicButtonStyleInfo.create(AApplyStyleProc, 0{ADefaultFontSize}, ADefaultHeight));
end;

{*************************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicToggleButtonStyle(const AName: String; const AApplyStyleProc: TDynamicToggleButtonApplyStyleProc; const ADefaultFontSize: Single);
begin
  FDynamicToggleButtonStyles.AddOrSetValue(AName, TDynamicToggleButtonStyleInfo.create(AApplyStyleProc, ADefaultFontSize, 0{ADefaultHeight}));
end;

{***************************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicToggleButtonIconStyle(const AName: String; const AApplyStyleProc: TDynamicToggleButtonApplyStyleProc; const ADefaultHeight: Single);
begin
  FDynamicToggleButtonStyles.AddOrSetValue(AName, TDynamicToggleButtonStyleInfo.create(AApplyStyleProc, 0{ADefaultFontSize}, ADefaultHeight));
end;

{***************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicCheckBoxStyle(const AName: String; const AApplyStyleProc: TDynamicCheckBoxApplyStyleProc; const ADefaultHeight: Single);
begin
  FDynamicCheckBoxStyles.AddOrSetValue(AName, TDynamicCheckBoxStyleInfo.create(AApplyStyleProc, ADefaultHeight));
end;

{*********************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicRadioButtonStyle(const AName: String; const AApplyStyleProc: TDynamicRadioButtonApplyStyleProc; const ADefaultHeight: Single);
begin
  FDynamicRadioButtonStyles.AddOrSetValue(AName, TDynamicRadioButtonStyleInfo.create(AApplyStyleProc, ADefaultHeight));
end;

{***********************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicSwitchStyle(const AName: String; const AApplyStyleProc: TDynamicSwitchApplyStyleProc; const ADefaultHeight: Single);
begin
  FDynamicSwitchStyles.AddOrSetValue(AName, TDynamicSwitchStyleInfo.create(AApplyStyleProc, ADefaultHeight));
end;

{*************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicTrackBarStyle(const AName: String; const AApplyStyleProc: TDynamicTrackBarApplyStyleProc; const ADefaultSize: Single);
begin
  FDynamicTrackBarStyles.AddOrSetValue(AName, TDynamicTrackBarStyleInfo.create(AApplyStyleProc, ADefaultSize));
end;

{******************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicRangeTrackBarStyle(const AName: String; const AApplyStyleProc: TDynamicTrackBarApplyStyleProc; const ADefaultSize: Single);
begin
  FDynamicRangeTrackBarStyles.AddOrSetValue(AName, TDynamicTrackBarStyleInfo.create(AApplyStyleProc, ADefaultSize));
end;

{***************************************************************************************************************************************************************}
procedure TALStyleManager.AddOrSetDynamicScrollBarStyle(const AName: String; const AApplyStyleProc: TDynamicScrollBarApplyStyleProc; const ADefaultSize: Single);
begin
  FDynamicScrollBarStyles.AddOrSetValue(AName, TDynamicScrollBarStyleInfo.create(AApplyStyleProc, ADefaultSize));
end;

{******************************************************************}
function TALStyleManager.GetColor(const AName: String): TAlphaColor;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function _TryGetValueWithAlpha(out AValue: TAlphacolor): Boolean;
  begin
    // Ex: Material3.Color.Primary.Alpha08
    var Ln := length(AName);
    Result := (Ln > 8) and
              (AName[Ln-7] = '.') and
              (charInSet(AName[Ln-6], ['a','A'])) and
              (charInSet(AName[Ln-5], ['l','L'])) and
              (charInSet(AName[Ln-4], ['p','P'])) and
              (charInSet(AName[Ln-3], ['h','H'])) and
              (charInSet(AName[Ln-2], ['a','A'])) and
              (charInSet(AName[Ln-1], ['0'..'9'])) and
              (charInSet(AName[Ln], ['0'..'9']));
    if result then begin
      var LAlpha: Single := (((ord(AName[Ln-1]) - 48) * 10) + ((ord(AName[Ln]) - 48))) / 100;
      if fColors.TryGetValue(AlCopyStr(AName, 1, Ln-8), Avalue) then Avalue := ALSetColorAlpha(Avalue, LAlpha)
      else begin
        AValue := TAlphaColors.Null;
        result := False;
      end;
    end;

  end;

begin
  if (not fColors.TryGetValue(AName, Result)) and
     (not _TryGetValueWithAlpha(Result)) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Color "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit(TAlphaColors.Null);
  end;
end;

{******************************************************************}
function TALStyleManager.GetFontFamily(const AName: String): String;
begin
  if (not FFontFamilies.TryGetValue(AName, Result)) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Font "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit('');
  end;
end;

{***********************************************************************************************************}
procedure TALStyleManager.ApplyTextStyle(const AName: String; const AText: TALText; const AFontSize: Single);
begin
  Var LApplyTextStyleInfo: TTextStyleInfo;
  if not fTextStyles.TryGetValue(AName, LApplyTextStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AText.BeginUpdate;
  try
    LApplyTextStyleInfo.ApplyStyleProc(AText, AFontSize / LApplyTextStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if AText.AutoAlignToPixel then AText.AlignToPixel;
    {$ENDIF}
  finally
    AText.EndUpdate;
  end;
end;

{**********************************************************************************}
procedure TALStyleManager.ApplyTextStyle(const AName: String; const AText: TALText);
begin
  {$IF defined(ALDPK)}
  Var LApplyTextStyleInfo: TTextStyleInfo;
  if not fTextStyles.TryGetValue(AName, LApplyTextStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyTextStyleInfo.DefaultFontSize, LApplyTextStyleInfo.DefaultFontSize);
  ApplyTextStyle(AName, AText, LApplyTextStyleInfo.DefaultFontSize * LRatio);
  {$ELSE}
  ApplyTextStyle(AName, AText, AText.TextSettings.Font.Size);
  {$ENDIF}
end;

{***************************************************************************************************************}
procedure TALStyleManager.ApplyEditStyle(const AName: String; const AEdit: TALBaseEdit; const AFontSize: Single);
begin
  Var LApplyEditStyleInfo: TEditStyleInfo;
  if not fEditStyles.TryGetValue(AName, LApplyEditStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AEdit.BeginUpdate;
  try
    LApplyEditStyleInfo.ApplyStyleProc(AEdit, AFontSize / LApplyEditStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if AEdit.AutoAlignToPixel then AEdit.AlignToPixel;
    {$ENDIF}
  finally
    AEdit.EndUpdate;
  end;
end;

{**************************************************************************************}
procedure TALStyleManager.ApplyEditStyle(const AName: String; const AEdit: TALBaseEdit);
begin
  {$IF defined(ALDPK)}
  Var LApplyEditStyleInfo: TEditStyleInfo;
  if not fEditStyles.TryGetValue(AName, LApplyEditStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyEditStyleInfo.DefaultFontSize, LApplyEditStyleInfo.DefaultFontSize);
  ApplyEditStyle(AName, AEdit, LApplyEditStyleInfo.DefaultFontSize * LRatio);
  {$ELSE}
  ApplyEditStyle(AName, AEdit, AEdit.TextSettings.Font.Size);
  {$ENDIF}
end;

{***************************************************************************************************************}
procedure TALStyleManager.ApplyMemoStyle(const AName: String; const AMemo: TALBaseEdit; const AFontSize: Single);
begin
  Var LApplyMemoStyleInfo: TEditStyleInfo;
  if not fMemoStyles.TryGetValue(AName, LApplyMemoStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AMemo.BeginUpdate;
  try
    LApplyMemoStyleInfo.ApplyStyleProc(AMemo, AFontSize / LApplyMemoStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if AMemo.AutoAlignToPixel then AMemo.AlignToPixel;
    {$ENDIF}
  finally
    AMemo.EndUpdate;
  end;
end;

{**************************************************************************************}
procedure TALStyleManager.ApplyMemoStyle(const AName: String; const AMemo: TALBaseEdit);
begin
  {$IF defined(ALDPK)}
  Var LApplyMemoStyleInfo: TEditStyleInfo;
  if not fMemoStyles.TryGetValue(AName, LApplyMemoStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyMemoStyleInfo.DefaultFontSize, LApplyMemoStyleInfo.DefaultFontSize);
  ApplyMemoStyle(AName, AMemo, LApplyMemoStyleInfo.DefaultFontSize * LRatio);
  {$ELSE}
  ApplyMemoStyle(AName, AMemo, AMemo.TextSettings.Font.Size);
  {$ENDIF}
end;

{*****************************************************************************************************************}
procedure TALStyleManager.ApplyButtonStyle(const AName: String; const AButton: TALButton; const AFontSize: Single);
begin
  Var LApplyButtonStyleInfo: TButtonStyleInfo;
  if not fButtonStyles.TryGetValue(AName, LApplyButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AButton.BeginUpdate;
  try
    LApplyButtonStyleInfo.ApplyStyleProc(AButton, AFontSize / LApplyButtonStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if AButton.AutoAlignToPixel then AButton.AlignToPixel;
    {$ENDIF}
  finally
    AButton.EndUpdate;
  end;
end;

{*******************************************************************************************************************}
procedure TALStyleManager.ApplyButtonIconStyle(const AName: String; const AButton: TALButton; const AHeight: Single);
begin
  Var LApplyButtonStyleInfo: TButtonStyleInfo;
  if not fButtonStyles.TryGetValue(AName, LApplyButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AButton.BeginUpdate;
  try
    LApplyButtonStyleInfo.ApplyStyleProc(AButton, AHeight / LApplyButtonStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if AButton.AutoAlignToPixel then AButton.AlignToPixel;
    {$ENDIF}
  finally
    AButton.EndUpdate;
  end;
end;

{****************************************************************************************}
procedure TALStyleManager.ApplyButtonStyle(const AName: String; const AButton: TALButton);
begin
  Var LApplyButtonStyleInfo: TButtonStyleInfo;
  if not fButtonStyles.TryGetValue(AName, LApplyButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;
  if LApplyButtonStyleInfo.DefaultFontSize > 0 then begin
    {$IF defined(ALDPK)}
    var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyButtonStyleInfo.DefaultFontSize, LApplyButtonStyleInfo.DefaultFontSize);
    ApplyButtonStyle(AName, AButton, LApplyButtonStyleInfo.DefaultFontSize * LRatio);
    {$ELSE}
    ApplyButtonStyle(AName, AButton, AButton.TextSettings.Font.Size);
    {$ENDIF}
  end
  else begin
    {$IF defined(ALDPK)}
    var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyButtonStyleInfo.DefaultHeight, LApplyButtonStyleInfo.DefaultHeight);
    ApplyButtonIconStyle(AName, AButton, LApplyButtonStyleInfo.DefaultHeight * LRatio);
    {$ELSE}
    ApplyButtonIconStyle(AName, AButton, AButton.Height);
    {$ENDIF}
  end;
end;

{***********************************************************************************************************************************}
procedure TALStyleManager.ApplyToggleButtonStyle(const AName: String; const AToggleButton: TALToggleButton; const AFontSize: Single);
begin
  Var LApplyToggleButtonStyleInfo: TToggleButtonStyleInfo;
  if not fToggleButtonStyles.TryGetValue(AName, LApplyToggleButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AToggleButton.BeginUpdate;
  try
    LApplyToggleButtonStyleInfo.ApplyStyleProc(AToggleButton, AFontSize / LApplyToggleButtonStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if AToggleButton.AutoAlignToPixel then AToggleButton.AlignToPixel;
    {$ENDIF}
  finally
    AToggleButton.EndUpdate;
  end;
end;

{*************************************************************************************************************************************}
procedure TALStyleManager.ApplyToggleButtonIconStyle(const AName: String; const AToggleButton: TALToggleButton; const AHeight: Single);
begin
  Var LApplyToggleButtonStyleInfo: TToggleButtonStyleInfo;
  if not fToggleButtonStyles.TryGetValue(AName, LApplyToggleButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AToggleButton.BeginUpdate;
  try
    LApplyToggleButtonStyleInfo.ApplyStyleProc(AToggleButton, AHeight / LApplyToggleButtonStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if AToggleButton.AutoAlignToPixel then AToggleButton.AlignToPixel;
    {$ENDIF}
  finally
    AToggleButton.EndUpdate;
  end;
end;

{**********************************************************************************************************}
procedure TALStyleManager.ApplyToggleButtonStyle(const AName: String; const AToggleButton: TALToggleButton);
begin
  Var LApplyToggleButtonStyleInfo: TToggleButtonStyleInfo;
  if not fToggleButtonStyles.TryGetValue(AName, LApplyToggleButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;
  if LApplyToggleButtonStyleInfo.DefaultFontSize > 0 then begin
    {$IF defined(ALDPK)}
    var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyToggleButtonStyleInfo.DefaultFontSize, LApplyToggleButtonStyleInfo.DefaultFontSize);
    ApplyToggleButtonStyle(AName, AToggleButton, LApplyToggleButtonStyleInfo.DefaultFontSize * LRatio);
    {$ELSE}
    ApplyToggleButtonStyle(AName, AToggleButton, AToggleButton.TextSettings.Font.Size);
    {$ENDIF}
  end
  else begin
    {$IF defined(ALDPK)}
    var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyToggleButtonStyleInfo.DefaultHeight, LApplyToggleButtonStyleInfo.DefaultHeight);
    ApplyToggleButtonIconStyle(AName, AToggleButton, LApplyToggleButtonStyleInfo.DefaultHeight * LRatio);
    {$ELSE}
    ApplyToggleButtonIconStyle(AName, AToggleButton, AToggleButton.Height);
    {$ENDIF}
  end;
end;

{*********************************************************************************************************************}
procedure TALStyleManager.ApplyCheckBoxStyle(const AName: String; const ACheckBox: TALCheckBox; const AHeight: Single);
begin
  Var LApplyCheckBoxStyleInfo: TCheckBoxStyleInfo;
  if not fCheckBoxStyles.TryGetValue(AName, LApplyCheckBoxStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ACheckBox.BeginUpdate;
  try
    LApplyCheckBoxStyleInfo.ApplyStyleProc(ACheckBox, AHeight / LApplyCheckBoxStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if ACheckBox.AutoAlignToPixel then ACheckBox.AlignToPixel;
    {$ENDIF}
  finally
    ACheckBox.EndUpdate;
  end;
end;

{**********************************************************************************************}
procedure TALStyleManager.ApplyCheckBoxStyle(const AName: String; const ACheckBox: TALCheckBox);
begin
  {$IF defined(ALDPK)}
  Var LApplyCheckBoxStyleInfo: TCheckBoxStyleInfo;
  if not fCheckBoxStyles.TryGetValue(AName, LApplyCheckBoxStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyCheckBoxStyleInfo.DefaultHeight, LApplyCheckBoxStyleInfo.DefaultHeight);
  ApplyCheckBoxStyle(AName, ACheckBox, LApplyCheckBoxStyleInfo.DefaultHeight * LRatio);
  {$ELSE}
  ApplyCheckBoxStyle(AName, ACheckBox, ACheckBox.Height);
  {$ENDIF}
end;

{******************************************************************************************************************************}
procedure TALStyleManager.ApplyRadioButtonStyle(const AName: String; const ARadioButton: TALRadioButton; const AHeight: Single);
begin
  Var LApplyRadioButtonStyleInfo: TRadioButtonStyleInfo;
  if not fRadioButtonStyles.TryGetValue(AName, LApplyRadioButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ARadioButton.BeginUpdate;
  try
    LApplyRadioButtonStyleInfo.ApplyStyleProc(ARadioButton, AHeight / LApplyRadioButtonStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if ARadioButton.AutoAlignToPixel then ARadioButton.AlignToPixel;
    {$ENDIF}
  finally
    ARadioButton.EndUpdate;
  end;
end;

{*******************************************************************************************************}
procedure TALStyleManager.ApplyRadioButtonStyle(const AName: String; const ARadioButton: TALRadioButton);
begin
  {$IF defined(ALDPK)}
  Var LApplyRadioButtonStyleInfo: TRadioButtonStyleInfo;
  if not fRadioButtonStyles.TryGetValue(AName, LApplyRadioButtonStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyRadioButtonStyleInfo.DefaultHeight, LApplyRadioButtonStyleInfo.DefaultHeight);
  ApplyRadioButtonStyle(AName, ARadioButton, LApplyRadioButtonStyleInfo.DefaultHeight * LRatio);
  {$ELSE}
  ApplyRadioButtonStyle(AName, ARadioButton, ARadioButton.Height);
  {$ENDIF}
end;

{***************************************************************************************************************}
procedure TALStyleManager.ApplySwitchStyle(const AName: String; const ASwitch: TALSwitch; const AHeight: Single);
begin
  Var LApplySwitchStyleInfo: TSwitchStyleInfo;
  if not fSwitchStyles.TryGetValue(AName, LApplySwitchStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ASwitch.BeginUpdate;
  try
    LApplySwitchStyleInfo.ApplyStyleProc(ASwitch, AHeight / LApplySwitchStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if ASwitch.AutoAlignToPixel then ASwitch.AlignToPixel;
    {$ENDIF}
  finally
    ASwitch.EndUpdate;
  end;
end;

{****************************************************************************************}
procedure TALStyleManager.ApplySwitchStyle(const AName: String; const ASwitch: TALSwitch);
begin
  {$IF defined(ALDPK)}
  Var LApplySwitchStyleInfo: TSwitchStyleInfo;
  if not fSwitchStyles.TryGetValue(AName, LApplySwitchStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplySwitchStyleInfo.DefaultHeight, LApplySwitchStyleInfo.DefaultHeight);
  ApplySwitchStyle(AName, ASwitch, LApplySwitchStyleInfo.DefaultHeight * LRatio);
  {$ELSE}
  ApplySwitchStyle(AName, ASwitch, ASwitch.Height);
  {$ENDIF}
end;

{**********************************************************************************************************************}
procedure TALStyleManager.ApplyTrackBarStyle(const AName: String; const ATrackBar: TALCustomTrack; const ASize: Single);
begin
  Var LApplyTrackBarStyleInfo: TTrackBarStyleInfo;
  if not fTrackBarStyles.TryGetValue(AName, LApplyTrackBarStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ATrackBar.BeginUpdate;
  try
    LApplyTrackBarStyleInfo.ApplyStyleProc(ATrackBar, ASize / LApplyTrackBarStyleInfo.DefaultSize);
    {$IF not defined(ALDPK)}
    if ATrackBar.AutoAlignToPixel then ATrackBar.AlignToPixel;
    {$ENDIF}
  finally
    ATrackBar.EndUpdate;
  end;
end;

{*************************************************************************************************}
procedure TALStyleManager.ApplyTrackBarStyle(const AName: String; const ATrackBar: TALCustomTrack);
begin
  {$IF defined(ALDPK)}
  Var LApplyTrackBarStyleInfo: TTrackBarStyleInfo;
  if not fTrackBarStyles.TryGetValue(AName, LApplyTrackBarStyleInfo) then Exit;
  var LRatio: Single;
  If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    LRatio := ALGetStyleRatio('Please enter the desired height', LApplyTrackBarStyleInfo.DefaultSize, LApplyTrackBarStyleInfo.DefaultSize)
  else
    LRatio := ALGetStyleRatio('Please enter the desired width', LApplyTrackBarStyleInfo.DefaultSize, LApplyTrackBarStyleInfo.DefaultSize);
  ApplyTrackBarStyle(AName, ATrackBar, LApplyTrackBarStyleInfo.DefaultSize * LRatio);
  {$ELSE}
  If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    ApplyTrackBarStyle(AName, ATrackBar, ATrackBar.Height)
  else
    ApplyTrackBarStyle(AName, ATrackBar, ATrackBar.Width);
  {$ENDIF}
end;

{********************************************************************************************************************************}
procedure TALStyleManager.ApplyRangeTrackBarStyle(const AName: String; const ARangeTrackBar: TALCustomTrack; const ASize: Single);
begin
  Var LApplyRangeTrackBarStyleInfo: TTrackBarStyleInfo;
  if not fRangeTrackBarStyles.TryGetValue(AName, LApplyRangeTrackBarStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ARangeTrackBar.BeginUpdate;
  try
    LApplyRangeTrackBarStyleInfo.ApplyStyleProc(ARangeTrackBar, ASize / LApplyRangeTrackBarStyleInfo.DefaultSize);
    {$IF not defined(ALDPK)}
    if ARangeTrackBar.AutoAlignToPixel then ARangeTrackBar.AlignToPixel;
    {$ENDIF}
  finally
    ARangeTrackBar.EndUpdate;
  end;
end;

{***********************************************************************************************************}
procedure TALStyleManager.ApplyRangeTrackBarStyle(const AName: String; const ARangeTrackBar: TALCustomTrack);
begin
  {$IF defined(ALDPK)}
  Var LApplyRangeTrackBarStyleInfo: TTrackBarStyleInfo;
  if not fRangeTrackBarStyles.TryGetValue(AName, LApplyRangeTrackBarStyleInfo) then Exit;
  var LRatio: Single;
  If ARangeTrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    LRatio := ALGetStyleRatio('Please enter the desired height', LApplyRangeTrackBarStyleInfo.DefaultSize, LApplyRangeTrackBarStyleInfo.DefaultSize)
  else
    LRatio := ALGetStyleRatio('Please enter the desired width', LApplyRangeTrackBarStyleInfo.DefaultSize, LApplyRangeTrackBarStyleInfo.DefaultSize);
  ApplyRangeTrackBarStyle(AName, ARangeTrackBar, LApplyRangeTrackBarStyleInfo.DefaultSize * LRatio);
  {$ELSE}
  If ARangeTrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    ApplyRangeTrackBarStyle(AName, ARangeTrackBar, ARangeTrackBar.Height)
  else
    ApplyRangeTrackBarStyle(AName, ARangeTrackBar, ARangeTrackBar.Width);
  {$ENDIF}
end;

{****************************************************************************************************************************}
procedure TALStyleManager.ApplyScrollBarStyle(const AName: String; const AScrollBar: TALCustomScrollBar; const ASize: Single);
begin
  Var LApplyScrollBarStyleInfo: TScrollBarStyleInfo;
  if not fScrollBarStyles.TryGetValue(AName, LApplyScrollBarStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AScrollBar.BeginUpdate;
  try
    LApplyScrollBarStyleInfo.ApplyStyleProc(AScrollBar, ASize / LApplyScrollBarStyleInfo.DefaultSize);
    {$IF not defined(ALDPK)}
    if AScrollBar.AutoAlignToPixel then AScrollBar.AlignToPixel;
    {$ENDIF}
  finally
    AScrollBar.EndUpdate;
  end;
end;

{*******************************************************************************************************}
procedure TALStyleManager.ApplyScrollBarStyle(const AName: String; const AScrollBar: TALCustomScrollBar);
begin
  {$IF defined(ALDPK)}
  Var LApplyScrollBarStyleInfo: TScrollBarStyleInfo;
  if not fScrollBarStyles.TryGetValue(AName, LApplyScrollBarStyleInfo) then Exit;
  var LRatio: Single;
  If AScrollBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    LRatio := ALGetStyleRatio('Please enter the desired height', LApplyScrollBarStyleInfo.DefaultSize, LApplyScrollBarStyleInfo.DefaultSize)
  else
    LRatio := ALGetStyleRatio('Please enter the desired width', LApplyScrollBarStyleInfo.DefaultSize, LApplyScrollBarStyleInfo.DefaultSize);
  ApplyScrollBarStyle(AName, AScrollBar, LApplyScrollBarStyleInfo.DefaultSize * LRatio);
  {$ELSE}
  If AScrollBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    ApplyScrollBarStyle(AName, AScrollBar, AScrollBar.Height)
  else
    ApplyScrollBarStyle(AName, AScrollBar, AScrollBar.Width);
  {$ENDIF}
end;

{*******************************************************************************************************}
procedure TALStyleManager.ApplyScrollBoxStyle(const AName: String; const AScrollBox: TALCustomScrollBox);
begin
  Var LApplyScrollBoxStyleInfo: TScrollBoxStyleInfo;
  if not fScrollBoxStyles.TryGetValue(AName, LApplyScrollBoxStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AScrollBox.BeginUpdate;
  try
    LApplyScrollBoxStyleInfo.ApplyStyleProc(AScrollBox);
    {$IF not defined(ALDPK)}
    if AScrollBox.AutoAlignToPixel then AScrollBox.AlignToPixel;
    {$ENDIF}
  finally
    AScrollBox.EndUpdate;
  end;
end;

{**************************************************************************************************************************************}
procedure TALStyleManager.ApplyDialogManagerStyle(const AName: String; const ADialogManager: TALDialogManager; const AFontSize: Single);
begin
  Var LApplyDialogManagerStyleInfo: TDialogManagerStyleInfo;
  if not fDialogManagerStyles.TryGetValue(AName, LApplyDialogManagerStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  LApplyDialogManagerStyleInfo.ApplyStyleProc(ADialogManager, AFontSize / LApplyDialogManagerStyleInfo.DefaultFontSize);
  {$IF not defined(ALDPK)}
  if ADialogManager.DefaultScrim.AutoAlignToPixel then ADialogManager.DefaultScrim.AlignToPixel;
  if ADialogManager.DefaultContainer.AutoAlignToPixel then ADialogManager.DefaultContainer.AlignToPixel;
  if ADialogManager.DefaultIcon.AutoAlignToPixel then ADialogManager.DefaultIcon.AlignToPixel;
  if ADialogManager.DefaultHeadline.AutoAlignToPixel then ADialogManager.DefaultHeadline.AlignToPixel;
  if ADialogManager.DefaultContent.AutoAlignToPixel then ADialogManager.DefaultContent.AlignToPixel;
  if ADialogManager.DefaultMessage.AutoAlignToPixel then ADialogManager.DefaultMessage.AlignToPixel;
  if ADialogManager.DefaultOptionLayout.AutoAlignToPixel then ADialogManager.DefaultOptionLayout.AlignToPixel;
  if ADialogManager.DefaultRadioButton.AutoAlignToPixel then ADialogManager.DefaultRadioButton.AlignToPixel;
  if ADialogManager.DefaultCheckBox.AutoAlignToPixel then ADialogManager.DefaultCheckBox.AlignToPixel;
  if ADialogManager.DefaultInlineButton.AutoAlignToPixel then ADialogManager.DefaultInlineButton.AlignToPixel;
  if ADialogManager.DefaultEdit.AutoAlignToPixel then ADialogManager.DefaultEdit.AlignToPixel;
  if ADialogManager.DefaultMemo.AutoAlignToPixel then ADialogManager.DefaultMemo.AlignToPixel;
  if ADialogManager.DefaultLabel.AutoAlignToPixel then ADialogManager.DefaultLabel.AlignToPixel;
  if ADialogManager.DefaultFooterBar.AutoAlignToPixel then ADialogManager.DefaultFooterBar.AlignToPixel;
  if ADialogManager.DefaultFooterButton.AutoAlignToPixel then ADialogManager.DefaultFooterButton.AlignToPixel;
  {$ENDIF}
end;

{*************************************************************************************************************}
procedure TALStyleManager.ApplyDialogManagerStyle(const AName: String; const ADialogManager: TALDialogManager);
begin
  {$IF defined(ALDPK)}
  Var LApplyDialogManagerStyleInfo: TDialogManagerStyleInfo;
  if not fDialogManagerStyles.TryGetValue(AName, LApplyDialogManagerStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyDialogManagerStyleInfo.DefaultFontSize, LApplyDialogManagerStyleInfo.DefaultFontSize);
  ApplyDialogManagerStyle(AName, ADialogManager, LApplyDialogManagerStyleInfo.DefaultFontSize * LRatio);
  {$ELSE}
  ApplyDialogManagerStyle(AName, ADialogManager, ADialogManager.DefaultMessage.TextSettings.Font.Size);
  {$ENDIF}
end;

{*****************************************************************************************************************}
procedure TALStyleManager.ApplyDialogStyle(const AName: String; const ADialog: TALDialog; const AFontSize: Single);
begin
  Var LApplyDialogStyleInfo: TDialogStyleInfo;
  if not fDialogStyles.TryGetValue(AName, LApplyDialogStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ADialog.BeginUpdate;
  try
    LApplyDialogStyleInfo.ApplyStyleProc(ADialog, AFontSize / LApplyDialogStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if ADialog.AutoAlignToPixel then ADialog.AlignToPixel;
    {$ENDIF}
  finally
    ADialog.EndUpdate;
  end;
end;

{****************************************************************************************}
procedure TALStyleManager.ApplyDialogStyle(const AName: String; const ADialog: TALDialog);
begin
  {$IF defined(ALDPK)}
  Var LApplyDialogStyleInfo: TDialogStyleInfo;
  if not fDialogStyles.TryGetValue(AName, LApplyDialogStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyDialogStyleInfo.DefaultFontSize, LApplyDialogStyleInfo.DefaultFontSize);
  ApplyDialogStyle(AName, ADialog, LApplyDialogStyleInfo.DefaultFontSize * LRatio);
  {$ELSE}
  ApplyDialogStyle(AName, ADialog, ADialog.Message.TextSettings.Font.Size);
  {$ENDIF}
end;


{*************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicTextStyle(const AName: String; const AText: TALDynamicText; const AFontSize: Single);
begin
  Var LApplyDynamicTextStyleInfo: TDynamicTextStyleInfo;
  if not FDynamicTextStyles.TryGetValue(AName, LApplyDynamicTextStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AText.BeginUpdate;
  try
    LApplyDynamicTextStyleInfo.ApplyDynamicStyleProc(AText, AFontSize / LApplyDynamicTextStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if AText.AutoAlignToPixel then AText.AlignToPixel;
    {$ENDIF}
  finally
    AText.EndUpdate;
  end;
end;

{************************************************************************************************}
procedure TALStyleManager.ApplyDynamicTextStyle(const AName: String; const AText: TALDynamicText);
begin
  {$IF defined(ALDPK)}
  Var LApplyDynamicTextStyleInfo: TDynamicTextStyleInfo;
  if not FDynamicTextStyles.TryGetValue(AName, LApplyDynamicTextStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyDynamicTextStyleInfo.DefaultFontSize, LApplyDynamicTextStyleInfo.DefaultFontSize);
  ApplyDynamicTextStyle(AName, AText, LApplyDynamicTextStyleInfo.DefaultFontSize * LRatio);
  {$ELSE}
  ApplyDynamicTextStyle(AName, AText, AText.TextSettings.Font.Size);
  {$ENDIF}
end;

{*******************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicButtonStyle(const AName: String; const AButton: TALDynamicButton; const AFontSize: Single);
begin
  Var LApplyDynamicButtonStyleInfo: TDynamicButtonStyleInfo;
  if not FDynamicButtonStyles.TryGetValue(AName, LApplyDynamicButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AButton.BeginUpdate;
  try
    LApplyDynamicButtonStyleInfo.ApplyDynamicStyleProc(AButton, AFontSize / LApplyDynamicButtonStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if AButton.AutoAlignToPixel then AButton.AlignToPixel;
    {$ENDIF}
  finally
    AButton.EndUpdate;
  end;
end;

{*********************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicButtonIconStyle(const AName: String; const AButton: TALDynamicButton; const AHeight: Single);
begin
  Var LApplyDynamicButtonStyleInfo: TDynamicButtonStyleInfo;
  if not FDynamicButtonStyles.TryGetValue(AName, LApplyDynamicButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AButton.BeginUpdate;
  try
    LApplyDynamicButtonStyleInfo.ApplyDynamicStyleProc(AButton, AHeight / LApplyDynamicButtonStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if AButton.AutoAlignToPixel then AButton.AlignToPixel;
    {$ENDIF}
  finally
    AButton.EndUpdate;
  end;
end;

{******************************************************************************************************}
procedure TALStyleManager.ApplyDynamicButtonStyle(const AName: String; const AButton: TALDynamicButton);
begin
  Var LApplyDynamicButtonStyleInfo: TDynamicButtonStyleInfo;
  if not FDynamicButtonStyles.TryGetValue(AName, LApplyDynamicButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;
  if LApplyDynamicButtonStyleInfo.DefaultFontSize > 0 then begin
    {$IF defined(ALDPK)}
    var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyDynamicButtonStyleInfo.DefaultFontSize, LApplyDynamicButtonStyleInfo.DefaultFontSize);
    ApplyDynamicButtonStyle(AName, AButton, LApplyDynamicButtonStyleInfo.DefaultFontSize * LRatio);
    {$ELSE}
    ApplyDynamicButtonStyle(AName, AButton, AButton.TextSettings.Font.Size);
    {$ENDIF}
  end
  else begin
    {$IF defined(ALDPK)}
    var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyDynamicButtonStyleInfo.DefaultHeight, LApplyDynamicButtonStyleInfo.DefaultHeight);
    ApplyDynamicButtonIconStyle(AName, AButton, LApplyDynamicButtonStyleInfo.DefaultHeight * LRatio);
    {$ELSE}
    ApplyDynamicButtonIconStyle(AName, AButton, AButton.Height);
    {$ENDIF}
  end;
end;

{*************************************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicToggleButtonStyle(const AName: String; const AToggleButton: TALDynamicToggleButton; const AFontSize: Single);
begin
  Var LApplyDynamicToggleButtonStyleInfo: TDynamicToggleButtonStyleInfo;
  if not FDynamicToggleButtonStyles.TryGetValue(AName, LApplyDynamicToggleButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AToggleButton.BeginUpdate;
  try
    LApplyDynamicToggleButtonStyleInfo.ApplyDynamicStyleProc(AToggleButton, AFontSize / LApplyDynamicToggleButtonStyleInfo.DefaultFontSize);
    {$IF not defined(ALDPK)}
    if AToggleButton.AutoAlignToPixel then AToggleButton.AlignToPixel;
    {$ENDIF}
  finally
    AToggleButton.EndUpdate;
  end;
end;

{***************************************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicToggleButtonIconStyle(const AName: String; const AToggleButton: TALDynamicToggleButton; const AHeight: Single);
begin
  Var LApplyDynamicToggleButtonStyleInfo: TDynamicToggleButtonStyleInfo;
  if not FDynamicToggleButtonStyles.TryGetValue(AName, LApplyDynamicToggleButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AToggleButton.BeginUpdate;
  try
    LApplyDynamicToggleButtonStyleInfo.ApplyDynamicStyleProc(AToggleButton, AHeight / LApplyDynamicToggleButtonStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if AToggleButton.AutoAlignToPixel then AToggleButton.AlignToPixel;
    {$ENDIF}
  finally
    AToggleButton.EndUpdate;
  end;
end;

{************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicToggleButtonStyle(const AName: String; const AToggleButton: TALDynamicToggleButton);
begin
  Var LApplyDynamicToggleButtonStyleInfo: TDynamicToggleButtonStyleInfo;
  if not FDynamicToggleButtonStyles.TryGetValue(AName, LApplyDynamicToggleButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;
  if LApplyDynamicToggleButtonStyleInfo.DefaultFontSize > 0 then begin
    {$IF defined(ALDPK)}
    var LRatio: Single := ALGetStyleRatio('Please enter the desired font size', LApplyDynamicToggleButtonStyleInfo.DefaultFontSize, LApplyDynamicToggleButtonStyleInfo.DefaultFontSize);
    ApplyDynamicToggleButtonStyle(AName, AToggleButton, LApplyDynamicToggleButtonStyleInfo.DefaultFontSize * LRatio);
    {$ELSE}
    ApplyDynamicToggleButtonStyle(AName, AToggleButton, AToggleButton.TextSettings.Font.Size);
    {$ENDIF}
  end
  else begin
    {$IF defined(ALDPK)}
    var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyDynamicToggleButtonStyleInfo.DefaultHeight, LApplyDynamicToggleButtonStyleInfo.DefaultHeight);
    ApplyDynamicToggleButtonIconStyle(AName, AToggleButton, LApplyDynamicToggleButtonStyleInfo.DefaultHeight * LRatio);
    {$ELSE}
    ApplyDynamicToggleButtonIconStyle(AName, AToggleButton, AToggleButton.Height);
    {$ENDIF}
  end;
end;

{***********************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicCheckBoxStyle(const AName: String; const ACheckBox: TALDynamicCheckBox; const AHeight: Single);
begin
  Var LApplyDynamicCheckBoxStyleInfo: TDynamicCheckBoxStyleInfo;
  if not FDynamicCheckBoxStyles.TryGetValue(AName, LApplyDynamicCheckBoxStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ACheckBox.BeginUpdate;
  try
    LApplyDynamicCheckBoxStyleInfo.ApplyDynamicStyleProc(ACheckBox, AHeight / LApplyDynamicCheckBoxStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if ACheckBox.AutoAlignToPixel then ACheckBox.AlignToPixel;
    {$ENDIF}
  finally
    ACheckBox.EndUpdate;
  end;
end;

{************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicCheckBoxStyle(const AName: String; const ACheckBox: TALDynamicCheckBox);
begin
  {$IF defined(ALDPK)}
  Var LApplyDynamicCheckBoxStyleInfo: TDynamicCheckBoxStyleInfo;
  if not FDynamicCheckBoxStyles.TryGetValue(AName, LApplyDynamicCheckBoxStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyDynamicCheckBoxStyleInfo.DefaultHeight, LApplyDynamicCheckBoxStyleInfo.DefaultHeight);
  ApplyDynamicCheckBoxStyle(AName, ACheckBox, LApplyDynamicCheckBoxStyleInfo.DefaultHeight * LRatio);
  {$ELSE}
  ApplyDynamicCheckBoxStyle(AName, ACheckBox, ACheckBox.Height);
  {$ENDIF}
end;

{********************************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicRadioButtonStyle(const AName: String; const ARadioButton: TALDynamicRadioButton; const AHeight: Single);
begin
  Var LApplyDynamicRadioButtonStyleInfo: TDynamicRadioButtonStyleInfo;
  if not FDynamicRadioButtonStyles.TryGetValue(AName, LApplyDynamicRadioButtonStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ARadioButton.BeginUpdate;
  try
    LApplyDynamicRadioButtonStyleInfo.ApplyDynamicStyleProc(ARadioButton, AHeight / LApplyDynamicRadioButtonStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if ARadioButton.AutoAlignToPixel then ARadioButton.AlignToPixel;
    {$ENDIF}
  finally
    ARadioButton.EndUpdate;
  end;
end;

{*********************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicRadioButtonStyle(const AName: String; const ARadioButton: TALDynamicRadioButton);
begin
  {$IF defined(ALDPK)}
  Var LApplyDynamicRadioButtonStyleInfo: TDynamicRadioButtonStyleInfo;
  if not FDynamicRadioButtonStyles.TryGetValue(AName, LApplyDynamicRadioButtonStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyDynamicRadioButtonStyleInfo.DefaultHeight, LApplyDynamicRadioButtonStyleInfo.DefaultHeight);
  ApplyDynamicRadioButtonStyle(AName, ARadioButton, LApplyDynamicRadioButtonStyleInfo.DefaultHeight * LRatio);
  {$ELSE}
  ApplyDynamicRadioButtonStyle(AName, ARadioButton, ARadioButton.Height);
  {$ENDIF}
end;

{*****************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicSwitchStyle(const AName: String; const ASwitch: TALDynamicSwitch; const AHeight: Single);
begin
  Var LApplyDynamicSwitchStyleInfo: TDynamicSwitchStyleInfo;
  if not FDynamicSwitchStyles.TryGetValue(AName, LApplyDynamicSwitchStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ASwitch.BeginUpdate;
  try
    LApplyDynamicSwitchStyleInfo.ApplyDynamicStyleProc(ASwitch, AHeight / LApplyDynamicSwitchStyleInfo.DefaultHeight);
    {$IF not defined(ALDPK)}
    if ASwitch.AutoAlignToPixel then ASwitch.AlignToPixel;
    {$ENDIF}
  finally
    ASwitch.EndUpdate;
  end;
end;

{******************************************************************************************************}
procedure TALStyleManager.ApplyDynamicSwitchStyle(const AName: String; const ASwitch: TALDynamicSwitch);
begin
  {$IF defined(ALDPK)}
  Var LApplyDynamicSwitchStyleInfo: TDynamicSwitchStyleInfo;
  if not FDynamicSwitchStyles.TryGetValue(AName, LApplyDynamicSwitchStyleInfo) then Exit;
  var LRatio: Single := ALGetStyleRatio('Please enter the desired height', LApplyDynamicSwitchStyleInfo.DefaultHeight, LApplyDynamicSwitchStyleInfo.DefaultHeight);
  ApplyDynamicSwitchStyle(AName, ASwitch, LApplyDynamicSwitchStyleInfo.DefaultHeight * LRatio);
  {$ELSE}
  ApplyDynamicSwitchStyle(AName, ASwitch, ASwitch.Height);
  {$ENDIF}
end;

{************************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicTrackBarStyle(const AName: String; const ATrackBar: TALDynamicCustomTrack; const ASize: Single);
begin
  Var LApplyDynamicTrackBarStyleInfo: TDynamicTrackBarStyleInfo;
  if not FDynamicTrackBarStyles.TryGetValue(AName, LApplyDynamicTrackBarStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ATrackBar.BeginUpdate;
  try
    LApplyDynamicTrackBarStyleInfo.ApplyDynamicStyleProc(ATrackBar, ASize / LApplyDynamicTrackBarStyleInfo.DefaultSize);
    {$IF not defined(ALDPK)}
    if ATrackBar.AutoAlignToPixel then ATrackBar.AlignToPixel;
    {$ENDIF}
  finally
    ATrackBar.EndUpdate;
  end;
end;

{***************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicTrackBarStyle(const AName: String; const ATrackBar: TALDynamicCustomTrack);
begin
  {$IF defined(ALDPK)}
  Var LApplyDynamicTrackBarStyleInfo: TDynamicTrackBarStyleInfo;
  if not FDynamicTrackBarStyles.TryGetValue(AName, LApplyDynamicTrackBarStyleInfo) then Exit;
  var LRatio: Single;
  If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    LRatio := ALGetStyleRatio('Please enter the desired height', LApplyDynamicTrackBarStyleInfo.DefaultSize, LApplyDynamicTrackBarStyleInfo.DefaultSize)
  else
    LRatio := ALGetStyleRatio('Please enter the desired width', LApplyDynamicTrackBarStyleInfo.DefaultSize, LApplyDynamicTrackBarStyleInfo.DefaultSize);
  ApplyDynamicTrackBarStyle(AName, ATrackBar, LApplyDynamicTrackBarStyleInfo.DefaultSize * LRatio);
  {$ELSE}
  If ATrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    ApplyDynamicTrackBarStyle(AName, ATrackBar, ATrackBar.Height)
  else
    ApplyDynamicTrackBarStyle(AName, ATrackBar, ATrackBar.Width);
  {$ENDIF}
end;

{**********************************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicRangeTrackBarStyle(const AName: String; const ARangeTrackBar: TALDynamicCustomTrack; const ASize: Single);
begin
  Var LApplyDynamicRangeTrackBarStyleInfo: TDynamicTrackBarStyleInfo;
  if not FDynamicRangeTrackBarStyles.TryGetValue(AName, LApplyDynamicRangeTrackBarStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  ARangeTrackBar.BeginUpdate;
  try
    LApplyDynamicRangeTrackBarStyleInfo.ApplyDynamicStyleProc(ARangeTrackBar, ASize / LApplyDynamicRangeTrackBarStyleInfo.DefaultSize);
    {$IF not defined(ALDPK)}
    if ARangeTrackBar.AutoAlignToPixel then ARangeTrackBar.AlignToPixel;
    {$ENDIF}
  finally
    ARangeTrackBar.EndUpdate;
  end;
end;

{*************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicRangeTrackBarStyle(const AName: String; const ARangeTrackBar: TALDynamicCustomTrack);
begin
  {$IF defined(ALDPK)}
  Var LApplyDynamicRangeTrackBarStyleInfo: TDynamicTrackBarStyleInfo;
  if not FDynamicRangeTrackBarStyles.TryGetValue(AName, LApplyDynamicRangeTrackBarStyleInfo) then Exit;
  var LRatio: Single;
  If ARangeTrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    LRatio := ALGetStyleRatio('Please enter the desired height', LApplyDynamicRangeTrackBarStyleInfo.DefaultSize, LApplyDynamicRangeTrackBarStyleInfo.DefaultSize)
  else
    LRatio := ALGetStyleRatio('Please enter the desired width', LApplyDynamicRangeTrackBarStyleInfo.DefaultSize, LApplyDynamicRangeTrackBarStyleInfo.DefaultSize);
  ApplyDynamicRangeTrackBarStyle(AName, ARangeTrackBar, LApplyDynamicRangeTrackBarStyleInfo.DefaultSize * LRatio);
  {$ELSE}
  If ARangeTrackBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    ApplyDynamicRangeTrackBarStyle(AName, ARangeTrackBar, ARangeTrackBar.Height)
  else
    ApplyDynamicRangeTrackBarStyle(AName, ARangeTrackBar, ARangeTrackBar.Width);
  {$ENDIF}
end;

{******************************************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicScrollBarStyle(const AName: String; const AScrollBar: TALDynamicCustomScrollBar; const ASize: Single);
begin
  Var LApplyDynamicScrollBarStyleInfo: TDynamicScrollBarStyleInfo;
  if not FDynamicScrollBarStyles.TryGetValue(AName, LApplyDynamicScrollBarStyleInfo) then begin
    {$IF not defined(ALDPK)}
    ALLog('TALStyleManager', 'Style "%s" not found in style manager', [AName], TALLogType.ERROR);
    {$ENDIF}
    Exit;
  end;

  AScrollBar.BeginUpdate;
  try
    LApplyDynamicScrollBarStyleInfo.ApplyDynamicStyleProc(AScrollBar, ASize / LApplyDynamicScrollBarStyleInfo.DefaultSize);
    {$IF not defined(ALDPK)}
    if AScrollBar.AutoAlignToPixel then AScrollBar.AlignToPixel;
    {$ENDIF}
  finally
    AScrollBar.EndUpdate;
  end;
end;

{*********************************************************************************************************************}
procedure TALStyleManager.ApplyDynamicScrollBarStyle(const AName: String; const AScrollBar: TALDynamicCustomScrollBar);
begin
  {$IF defined(ALDPK)}
  Var LApplyDynamicScrollBarStyleInfo: TDynamicScrollBarStyleInfo;
  if not FDynamicScrollBarStyles.TryGetValue(AName, LApplyDynamicScrollBarStyleInfo) then Exit;
  var LRatio: Single;
  If AScrollBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    LRatio := ALGetStyleRatio('Please enter the desired height', LApplyDynamicScrollBarStyleInfo.DefaultSize, LApplyDynamicScrollBarStyleInfo.DefaultSize)
  else
    LRatio := ALGetStyleRatio('Please enter the desired width', LApplyDynamicScrollBarStyleInfo.DefaultSize, LApplyDynamicScrollBarStyleInfo.DefaultSize);
  ApplyDynamicScrollBarStyle(AName, AScrollBar, LApplyDynamicScrollBarStyleInfo.DefaultSize * LRatio);
  {$ELSE}
  If AScrollBar.Orientation = FMX.Controls.TOrientation.Horizontal then
    ApplyDynamicScrollBarStyle(AName, AScrollBar, AScrollBar.Height)
  else
    ApplyDynamicScrollBarStyle(AName, AScrollBar, AScrollBar.Width);
  {$ENDIF}
end;

{*****************************************************}
function TALStyleManager.GetColorNames: TArray<String>;
begin
  var LArray := FLightColors.ToArray;
  TArray.Sort<TPair<string, TPair<TAlphaColor, integer>>>(LArray,
    TComparer<TPair<string, TPair<TAlphaColor, integer>>>.Construct(
      function(const Left, Right: TPair<string, TPair<TAlphaColor, integer>>): Integer
      begin
        Result := Left.value.value - Right.value.value;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{**********************************************************}
function TALStyleManager.GetFontFamilyNames: TArray<String>;
begin
  Result := FFontFamilies.Keys.ToArray;
  TArray.Sort<String>(Result,
    TComparer<String>.Construct(
      function(const Left, Right: String): Integer
      begin
        Result := ALCompareStrW(Left, Right);
      end));
end;

{*********************************************************}
function TALStyleManager.GetTextStyleNames: TArray<String>;
begin
  var LArray := FTextStyles.ToArray;
  TArray.Sort<TPair<String, TTextStyleInfo>>(LArray,
    TComparer<TPair<String, TTextStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TTextStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{*********************************************************}
function TALStyleManager.GetEditStyleNames: TArray<String>;
begin
  var LArray := FEditStyles.ToArray;
  TArray.Sort<TPair<String, TEditStyleInfo>>(LArray,
    TComparer<TPair<String, TEditStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TEditStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{*********************************************************}
function TALStyleManager.GetMemoStyleNames: TArray<String>;
begin
  var LArray := FMemoStyles.ToArray;
  TArray.Sort<TPair<String, TEditStyleInfo>>(LArray,
    TComparer<TPair<String, TEditStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TEditStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{***********************************************************}
function TALStyleManager.GetButtonStyleNames: TArray<String>;
begin
  var LArray := FButtonStyles.ToArray;
  TArray.Sort<TPair<String, TButtonStyleInfo>>(LArray,
    TComparer<TPair<String, TButtonStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TButtonStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{*****************************************************************}
function TALStyleManager.GetToggleButtonStyleNames: TArray<String>;
begin
  var LArray := FToggleButtonStyles.ToArray;
  TArray.Sort<TPair<String, TToggleButtonStyleInfo>>(LArray,
    TComparer<TPair<String, TToggleButtonStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TToggleButtonStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{*************************************************************}
function TALStyleManager.GetCheckBoxStyleNames: TArray<String>;
begin
  var LArray := FCheckBoxStyles.ToArray;
  TArray.Sort<TPair<String, TCheckBoxStyleInfo>>(LArray,
    TComparer<TPair<String, TCheckBoxStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TCheckBoxStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{****************************************************************}
function TALStyleManager.GetRadioButtonStyleNames: TArray<String>;
begin
  var LArray := FRadioButtonStyles.ToArray;
  TArray.Sort<TPair<String, TRadioButtonStyleInfo>>(LArray,
    TComparer<TPair<String, TRadioButtonStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TRadioButtonStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{***********************************************************}
function TALStyleManager.GetSwitchStyleNames: TArray<String>;
begin
  var LArray := FSwitchStyles.ToArray;
  TArray.Sort<TPair<String, TSwitchStyleInfo>>(LArray,
    TComparer<TPair<String, TSwitchStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TSwitchStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{*************************************************************}
function TALStyleManager.GetTrackBarStyleNames: TArray<String>;
begin
  var LArray := FTrackBarStyles.ToArray;
  TArray.Sort<TPair<String, TTrackBarStyleInfo>>(LArray,
    TComparer<TPair<String, TTrackBarStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TTrackBarStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{******************************************************************}
function TALStyleManager.GetRangeTrackBarStyleNames: TArray<String>;
begin
  var LArray := FRangeTrackBarStyles.ToArray;
  TArray.Sort<TPair<String, TTrackBarStyleInfo>>(LArray,
    TComparer<TPair<String, TTrackBarStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TTrackBarStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{**************************************************************}
function TALStyleManager.GetScrollBarStyleNames: TArray<String>;
begin
  var LArray := FScrollBarStyles.ToArray;
  TArray.Sort<TPair<String, TScrollBarStyleInfo>>(LArray,
    TComparer<TPair<String, TScrollBarStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TScrollBarStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{**************************************************************}
function TALStyleManager.GetScrollBoxStyleNames: TArray<String>;
begin
  var LArray := FScrollBoxStyles.ToArray;
  TArray.Sort<TPair<String, TScrollBoxStyleInfo>>(LArray,
    TComparer<TPair<String, TScrollBoxStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TScrollBoxStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{******************************************************************}
function TALStyleManager.GetDialogManagerStyleNames: TArray<String>;
begin
  var LArray := FDialogManagerStyles.ToArray;
  TArray.Sort<TPair<String, TDialogManagerStyleInfo>>(LArray,
    TComparer<TPair<String, TDialogManagerStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TDialogManagerStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

{***********************************************************}
function TALStyleManager.GetDialogStyleNames: TArray<String>;
begin
  var LArray := FDialogStyles.ToArray;
  TArray.Sort<TPair<String, TDialogStyleInfo>>(LArray,
    TComparer<TPair<String, TDialogStyleInfo>>.Construct(
      function(const Left, Right: TPair<String, TDialogStyleInfo>): Integer
      begin
        Result := Left.value.SortOrder - Right.value.SortOrder;
      end));
  SetLength(Result, Length(LArray));
  for var I := low(LArray) to High(LArray) do
    Result[I] := LArray[I].Key;
end;

initialization
  {$IF defined(DEBUG)}
  ALLog('Alcinoe.FMX.Styles','initialization');
  {$ENDIF}
  TALStyleManager.FInstance := nil;
  TALStyleManager.CreateInstanceFunc := @TALStyleManager.CreateInstance;
  TALStyleManager.FSortOrderCounter := 0;

finalization
  {$IF defined(DEBUG)}
  ALLog('Alcinoe.FMX.Styles','finalization');
  {$ENDIF}
  ALFreeAndNil(TALStyleManager.FInstance);

end.

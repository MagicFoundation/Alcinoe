program CodeBuilder;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  system.AnsiStrings,
  system.Classes,
  System.SysUtils,
  System.IOUtils,
  Alcinoe.Execute,
  Alcinoe.files,
  Alcinoe.JSONDoc,
  Alcinoe.StringList,
  Alcinoe.StringUtils,
  Alcinoe.Localization,
  Alcinoe.common;

{***********************************************}
Procedure ExecuteCmdLine(const ACmdLine: String);
begin
  Var LInputStream := TMemorystream.Create;
  Var LOutputStream := TStringStream.Create;
  try
    Var LCmdLineResult := ALWinExecW(
                            ACmdLine, // const aCommandLine: String;
                            LInputStream, // const aInputStream: Tstream;
                            LOutputStream); //const aOutputStream: TStream;
    if LCmdLineResult <> 0 then
      raise Exception.Createfmt('Failed to execute %s'#13#10'%s', [ACmdLine, LOutputStream.DataString]);
  finally
    ALFreeandNil(LInputStream);
    ALFreeandNil(LOutputStream);
  end;
end;

{*********************************************************}
procedure NormalizeSourceCode(var ASourceCode: AnsiString);
begin
  Var LtempDir := ALgetModulePathW + '\Temp\';
  If (TDirectory.Exists(LtempDir)) and (not AlEmptyDirectoryW(LtempDir, true)) then
    Raise Exception.create('Temporary directory "' + LtempDir + '" exists but could not be cleared');
  TDirectory.CreateDirectory(LtempDir);
  ALSaveStringToFile(ASourceCode, LtempDir + 'SourceCode.pas');
  ExecuteCmdLine('"'+ALgetModulePathW+'\..\UnitNormalizer\UnitNormalizer.exe" -Dir="'+LtempDir+'" -NoInteraction=true -CreateBackup=false');
  ASourceCode := ALGetStringFromFile(LtempDir + 'SourceCode.pas');
  If (not AlEmptyDirectoryW(LtempDir, true)) then
    Raise Exception.create('Failed to clean up temporary directory "' + LtempDir + '"');
  TDirectory.Delete(LtempDir);
end;

{******************************************************************************************************************************}
procedure ReplaceAutoGeneratedRegion(var ASource: AnsiString; const ARegionNumber: Integer; const AReplacementText: AnsiString);
begin
  Var LCodeBelowSignature: AnsiString := '{$REGION ''Auto-generated by <ALCINOE>\Tools\CodeBuilder ('+ALIntToStrA(ARegionNumber)+')''}';
  Var LCodeAboveSignature: AnsiString := '{$ENDREGION ''Auto-generated by <ALCINOE>\Tools\CodeBuilder ('+ALIntToStrA(ARegionNumber)+')''}';
  var P1 := ALposA(LCodeBelowSignature, ASource);
  if P1 <= 0 then Raise Exception.Create('Error 5506BEA8-A77C-4BA5-870C-AC21A263D8C7');
  inc(P1, Length(LCodeBelowSignature));
  Var P2 := ALposA(LCodeAboveSignature, ASource, P1);
  While (P2 > 0) and (not (ASource[P2] in [#13,#10])) do dec(P2);
  if P2 <= 0 then Raise Exception.Create('Error 120310CE-AD81-4891-AF5C-A7D80E9D57F3');
  inc(p2);
  Delete(ASource,P1,P2-P1);
  Insert(
    #13#10#13#10+AReplacementText+#13#10#13#10,
    ASource,
    P1);
end;

{*********************************}
procedure BuildAlcinoeLocalization;

var
  LOutputInterface: AnsiString;
  LOutputImplementationPart1: AnsiString;
  LOutputImplementationPart2: AnsiString;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  procedure _ParseRulesFile(const aFilename: String; const APluralType: AnsiString);
  begin
    Var LJsonDoc := TALJsonDocumentA.CreateFromJSONFile(aFilename);
    try
      var LPluralsTypeNode: TalJsonNodeA;
      if APluralType = 'Cardinal' then LPluralsTypeNode := LJsonDoc.getchildnode(['supplemental','plurals-type-cardinal'])
      else LPluralsTypeNode := LJsonDoc.getchildnode(['supplemental','plurals-type-ordinal']);
      if LPluralsTypeNode = nil then Raise Exception.Create('Error B02062CE-82DA-44AF-A712-82CD42E0371C');
      For var I := 0 to LPluralsTypeNode.ChildNodes.Count - 1 do begin
        //"gd": {
        //  "pluralRule-count-one": "n = 1,11 @integer 1, 11 @decimal 1.0, 11.0, 1.00, 11.00, 1.000, 11.000, 1.0000",
        //  "pluralRule-count-two": "n = 2,12 @integer 2, 12 @decimal 2.0, 12.0, 2.00, 12.00, 2.000, 12.000, 2.0000",
        //  "pluralRule-count-few": "n = 3..10,13..19 @integer 3~10, 13~19 @decimal 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 3.00",
        //  "pluralRule-count-other": " @integer 0, 20~34, 100, 1000, 10000, 100000, 1000000, … @decimal 0.0~0.9, 1.1~1.6, 10.1, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, …"
        //},
        var LRules := LPluralsTypeNode.ChildNodes[I];
        LOutputInterface := LOutputInterface + '    function Get'+APluralType+'PluralCategory_'+ALUpperCase(ALStringReplaceA(LRules.NodeName, '-', '_',[]))+'(const n, i: Int64; v, f, t, e: Int32): TPluralCategory;'#13#10;
        if alposA('-',LRules.NodeName) <= 0  then
          LOutputImplementationPart1 := LOutputImplementationPart1 + '  F'+APluralType+'PluralCategoryFuncByLanguages.add('+ALIntToStrA(ALLanguageCodeToID(LRules.NodeName))+',Get'+APluralType+'PluralCategory_'+ALUpperCase(ALStringReplaceA(LRules.NodeName, '-', '_',[]))+');'#13#10
        else if (LRules.NodeName <> 'pt-PT') and (APluralType <> 'Cardinal') then
          // Need to update TALPluralRules.select(
          Raise Exception.Create('Error 3EE3BAC9-398D-476D-9831-D0BF62A03ACA');
        LOutputImplementationPart2 := LOutputImplementationPart2 +
                                      '{******************************************************************************************}'#13#10+
                                      'function TALPluralRules.Get'+APluralType+'PluralCategory_'+ALUpperCase(ALStringReplaceA(LRules.NodeName, '-', '_',[]))+'(const n, i: Int64; v, f, t, e: Int32): TPluralCategory;'#13#10+
                                      'begin'#13#10;
        for var J := 0 to LRules.ChildNodes.Count - 1 do begin
          var LRule := LRules.ChildNodes[j];
          var LText := LRule.Text;
          Var P1 := AlposA('@', LText);
          if P1 > 0 then delete(Ltext, P1, MaxInt);
          LText := ALTrim(Ltext); // n % 10 = 3..4,9 and n % 100 != 10..19,70..79,90..99
          if (J = LRules.ChildNodes.Count - 1) then begin
            if (LRule.NodeName <> 'pluralRule-count-other') then raise Exception.Create('Error F6589D71-6066-4F15-B395-BE5BE56D8FE6');
            if (LText <> '') then raise Exception.Create('Error F6589D71-6066-4F15-B395-BE5BE56D8FE6');
            if J > 0 then LOutputImplementationPart2 := LOutputImplementationPart2 + '  else '
            else LOutputImplementationPart2 := LOutputImplementationPart2 + '  ';
            LOutputImplementationPart2 := LOutputImplementationPart2 + 'Result := TPluralCategory.other;'#13#10;
          end
          else begin
            if (LText = '') then raise Exception.Create('Error A2EB9C7A-8106-4F8B-9C76-0E00421284CA');
            LText := AlStringReplaceA(LText, ' and ', #13#10'and=',[rfreplaceALL]); // n % 10 = 3..4,9#1310and=n % 100 != 10..19,70..79,90..99
            LText := AlStringReplaceA(LText, ' or ', #13#10'or=',[rfreplaceALL]); // n % 10 = 3..4,9#1310and=n % 100 != 10..19,70..79,90..99
            LText := '='+LText;
            Var LLst := TalStringListA.create;
            try
              LLst.Text := LText;
              for var k := 0 to LLst.Count - 1 do begin
                LText := ALTrim(LLst.ValueFromIndex[K]); // n % 10 = 3..4,9
                P1 := alposA('..', LText);
                if P1 <= 0 then P1 := alposA(',', LText);
                if P1 > 0 then begin
                  while (P1 > 0) and (LText[P1] <> ' ') do dec(P1);
                  if P1 = 0 then Raise Exception.Create('Error 5E8B9769-C43F-48D1-A42B-BACAE8FB73E9');
                  inc(P1);
                  insert('[',LText,P1); // n % 10 = [3..4,9
                  LText := LText + ']'; // n % 10 = [3..4,9]
                  if alposA(' != ',LText) > 0 then begin
                    LText := ALStringReplaceA(LText,' != ', ' in ', []);
                    LText := 'not (' + LText + ')';
                  end
                  else if alposA(' = ',LText) > 0 then LText := ALStringReplaceA(LText,' = ', ' in ', [])
                  else raise Exception.Create('Error DAEA449D-1D24-436B-B6A0-415D2EF2125F');
                end;
                LText := '(' + LText + ')';
                LLst.ValueFromIndex[K] := LText
              end;
              LText := '';
              for var k := 0 to LLst.Count - 1 do
                LText := LText + ' ' + LLst.Names[K] + ' ' + LLst.ValueFromIndex[k];
              LText := ALTrim(LText);
            finally
              ALFreeAndNil(LLst);
            end;
            LText := ALStringReplaceA(LText,' % ', ' mod ', [rfreplaceALL]);
            LText := ALStringReplaceA(LText,' != ', ' <> ', [rfreplaceALL]);
            LText := ALStringReplaceA(LText,'(n mod 100000 in [1000..20000,40000,60000,80000])', '{(n mod 100000 in [1000..20000,40000,60000,80000])}(((n mod 100000 >= 1000) and (n mod 100000 <= 20000)) or (n mod 100000 = 40000) or (n mod 100000 = 60000) or (n mod 100000 = 80000))', [rfreplaceALL]);
            LText := ALStringReplaceA(LText, '(i mod 1000 in [100,200,300,400,500,600,700,800,900])', '{(i mod 1000 in [100,200,300,400,500,600,700,800,900])}((i mod 1000=100) or (i mod 1000=200) or (i mod 1000=300) or (i mod 1000=400) or (i mod 1000=500) or (i mod 1000=600) or (i mod 1000=700) or (i mod 1000=800) or (i mod 1000=900))', [rfreplaceALL]);
            LText := ALStringReplaceA(LText, '(n in [11,8,80,800])', '{(n in [11,8,80,800])}((n=11) or (n=8) or (n=80) or (n=800))', [rfreplaceALL]);
            LText := ALStringReplaceA(LText, '(n in [11,8,80..89,800..899])', '{(n in [11,8,80..89,800..899])}((n=11) or (n=8) or ((n >= 80) and (n <= 89)) or ((n >= 800) and (n <= 899)))', [rfreplaceALL]);
            var LTmpText := ALStringReplaceA(LText,'..', '', [rfreplaceALL]);
            if ALposA('.',LTmpText) > 0  then
              Raise Exception.Create('Error A3C331D0-F780-4CB4-92FD-51B8CEA68E62');
            If J = 0 then LOutputImplementationPart2 := LOutputImplementationPart2 + '  if '
            else LOutputImplementationPart2 := LOutputImplementationPart2 + '  else if ';
            LOutputImplementationPart2 := LOutputImplementationPart2 + LText + ' then Result := TPluralCategory.' + ALStringReplaceA(LRule.NodeName, 'pluralRule-count-', '', [rfIgnoreCase]) + #13#10;
          end
        end;
        LOutputImplementationPart2 := LOutputImplementationPart2 + 'end;'#13#10+
                                                                   #13#10;
      end;
    finally
      ALFreeAndNil(LJsonDoc);
    end;
  end;

begin
  LOutputInterface := '';
  LOutputImplementationPart2 := '';
  _ParseRulesFile(ALgetModulePathW+'\..\..\References\cldr-json\plurals.json', 'Cardinal');
  _ParseRulesFile(ALgetModulePathW+'\..\..\References\cldr-json\ordinals.json', 'Ordinal');
  //-----
  NormalizeSourceCode(LOutputInterface);
  NormalizeSourceCode(LOutputImplementationPart2);
  //-----
  var LAlcinoeLocalizationPas: AnsiString := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.Localization.pas');
  ReplaceAutoGeneratedRegion(LAlcinoeLocalizationPas{ASource}, 1{ARegionNumber}, '    '+ALTrim(LOutputInterface){AReplacementText});
  ReplaceAutoGeneratedRegion(LAlcinoeLocalizationPas{ASource}, 2{ARegionNumber}, '  ' + ALTrim(LOutputImplementationPart1){AReplacementText});
  ReplaceAutoGeneratedRegion(LAlcinoeLocalizationPas{ASource}, 3{ARegionNumber}, ALTrim(LOutputImplementationPart2){AReplacementText});
  ALSaveStringToFile(LAlcinoeLocalizationPas, ALgetModulePathW + '\..\..\Source\Alcinoe.Localization.pas');
end;

{***************************************}
Procedure BuildAlcinoeFMXDynamicControls;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function FindAndReplace(const Source, OldPattern, NewPattern: AnsiString): AnsiString; overload;
  begin
    if (ALPosIgnoreCaseA(OldPattern, Source) <= 0) then begin
      ALSaveStringToFile(Source, ALgetModulePathW + 'Error_FindAndReplace_Source.pas');
      ALSaveStringToFile(OldPattern, ALgetModulePathW + 'Error_FindAndReplace_OldPattern.pas');
      Raise Exception.Create('Could not find OldPattern: '+ String(OldPattern));
    end;
    Result := ALStringReplaceA(Source, OldPattern, NewPattern, [RFIgnoreCase, RfReplaceALL]);
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function FindAndReplace(const Source, OldPattern, NewPattern: AnsiString; const BlockStartPattern, BlockEndPattern: AnsiString): AnsiString; overload;
  begin
    var P1 := ALPosIgnoreCaseA(BlockStartPattern, Source);
    If P1 <= 0 then begin
      ALSaveStringToFile(Source, ALgetModulePathW + 'Error_FindAndReplace_Source.pas');
      ALSaveStringToFile(BlockStartPattern, ALgetModulePathW + 'Error_FindAndReplace_BlockStartPattern.pas');
      Raise Exception.Create('Could not find BlockStartPattern: '+ String(BlockStartPattern));
    end;
    While P1 > 0 do begin
      var P2 := ALPosIgnoreCaseA(BlockEndPattern, Source, P1);
      If P2 <= 0 then begin
        ALSaveStringToFile(Source, ALgetModulePathW + 'Error_FindAndReplace_Source.pas');
        ALSaveStringToFile(BlockEndPattern, ALgetModulePathW + 'Error_FindAndReplace_BlockEndPattern.pas');
        Raise Exception.Create('Could not find BlockEndPattern: '+ String(BlockEndPattern));
      end;
      var LStr := ALcopyStr(Source, P1, P2-P1);
      LStr := FindAndReplace(LStr, OldPattern, NewPattern);
      result := Source;
      delete(Result, P1, P2-P1);
      insert(LStr, Result, P1);
      P1 := ALPosIgnoreCaseA(BlockStartPattern, Source, P1 + 1);
    end;
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function AddDefaultBoundsClass(const ASource, AClassName, ABoundsName, ADefaultValue: AnsiString): AnsiString;
  begin
    Result := ASource;
    var LPattern: AnsiString := 'constructor '+AClassName+'.Create(const'; // constructor TALDynamicSwitch.TThumb.Create(const
    var P1 := AlposIgnoreCaseA(LPattern, Result);
    P1 := AlposIgnoreCaseA(LPattern, Result, P1 + 1);
    If P1 <= 0 then begin
      ALSaveStringToFile(ASource, ALgetModulePathW + 'Error_FindAndReplace_Source.pas');
      ALSaveStringToFile(LPattern, ALgetModulePathW + 'Error_FindAndReplace_Pattern.pas');
      Raise Exception.Create('Could not find Pattern: '+ String(LPattern));
    end;
    //--
    LPattern := #13#10+'end;'#13#10; // end;
    Var P2 := AlposIgnoreCaseA(LPattern, Result, P1);
    If P2 <= 0 then begin
      ALSaveStringToFile(ASource, ALgetModulePathW + 'Error_FindAndReplace_Source.pas');
      ALSaveStringToFile(LPattern, ALgetModulePathW + 'Error_FindAndReplace_Pattern.pas');
      Raise Exception.Create('Could not find Pattern: '+ String(LPattern));
    end;
    inc(P2,length(LPattern));
    //--
    Insert(
      #13#10+
      '{***********************************************}'#13#10+
      'function '+AClassName+'.Create'+ABoundsName+': TALBounds;'#13#10+
      'begin'#13#10+
      '  Result := T'+ABoundsName+'.Create;'#13#10+
      'end;'#13#10,
      Result,
      P2);
    //--
    if AClassName <> 'TALDynamicCustomTrack.TTrack' then begin
      LPattern := ABoundsName+'.DefaultValue := TRectF.Create('+ADefaultValue+');'; // Margins.DefaultValue := TRectF.Create(4,4,4,4);
      var P3 := AlposIgnoreCaseA(LPattern,Result,P1);
      If (P3 <= 0) or (P3 >= P2) then begin
        ALSaveStringToFile(ASource, ALgetModulePathW + 'Error_FindAndReplace_Source.pas');
        ALSaveStringToFile(LPattern, ALgetModulePathW + 'Error_FindAndReplace_Pattern.pas');
        Raise Exception.Create('Could not find Pattern: '+ String(LPattern));
      end;
      Insert('//**',Result,P3);
      //--
      LPattern := ABoundsName+'.Rect := '+ABoundsName+'.DefaultValue;'; // Margins.Rect := Margins.DefaultValue;
      P3 := AlposIgnoreCaseA(LPattern,Result,P1);
      If (P3 <= 0) or (P3 >= P2) then begin
        ALSaveStringToFile(ASource, ALgetModulePathW + 'Error_FindAndReplace_Source.pas');
        ALSaveStringToFile(LPattern, ALgetModulePathW + 'Error_FindAndReplace_Pattern.pas');
        Raise Exception.Create('Could not find Pattern: '+ String(LPattern));
      end;
      Insert('//**',Result,P3);
      //--
      LPattern := 'var L'+ABoundsName+'Change: TNotifyEvent := '+ABoundsName+'.OnChange;'; // var LMarginsChange: TNotifyEvent := Margins.OnChange;
      P3 := AlposIgnoreCaseA(LPattern,Result,P1);
      If (P3 > 0) and (P3 < P2) then Insert('//**',Result,P3);
      //--
      LPattern := ABoundsName+'.OnChange := nil;'; // Margins.OnChange := nil;
      P3 := AlposIgnoreCaseA(LPattern,Result,P1);
      If (P3 > 0) and (P3 < P2) then Insert('//**',Result,P3);
      //--
      LPattern := ABoundsName+'.OnChange := L'+ABoundsName+'Change;'; // Margins.OnChange := LMarginsChange;
      P3 := AlposIgnoreCaseA(LPattern,Result,P1);
      If (P3 > 0) and (P3 < P2) then Insert('//**',Result,P3);
    end;
    //--
    While (P1 > 0) and (Result[P1] <> '{') do dec(P1);
    If P1 <= 0 then raise Exception.Create('Error 692F9B26-0A5A-4482-B423-F073E4F81003');
    Insert(
      '{*******************************************************}'#13#10+
      'function '+AClassName+'.T'+ABoundsName+'.GetDefaultValue: TRectF;'#13#10+
      'begin'#13#10+
      '  Result := TRectF.Create('+ADefaultValue+');'#13#10+
      'end;'#13#10+
      #13#10,
      Result,
      P1);
    //--
    P1 := 1;
    var LLst := TalStringListA.create;
    Try
      LLst.LineBreak := '.';
      LLst.Text := AClassName;
      if LLst.Count <= 0 then raise Exception.Create('Error 9DBDDEC9-6089-4832-BECE-705820A62559');
      For var I := 0 To LLst.Count - 1 do begin
        LPattern := LLst[i] + ' = class('; // TALDynamicSwitch = class(
        if P1 = 1 then begin
          P1 := AlposIgnoreCaseA(LPattern, Result, P1);
          P1 := AlposIgnoreCaseA(LPattern, Result, P1+1);
        end
        else
          P1 := AlposIgnoreCaseA(LPattern, Result, P1);
        If P1 <= 0 then begin
          ALSaveStringToFile(ASource, ALgetModulePathW + 'Error_FindAndReplace_Source.pas');
          ALSaveStringToFile(LPattern, ALgetModulePathW + 'Error_FindAndReplace_Pattern.pas');
          Raise Exception.Create('Could not find Pattern: '+ String(LPattern));
        end;
      end;
      var LIndentStr: AnsiString := '';
      P2 := P1 - 1;
      While (P2 > 0) and (Result[P2] <> #10) do begin
        LIndentStr := LIndentStr + ' ';
        dec(P2);
      end;
      If P2 <= 0 then raise Exception.Create('Error 692F9B26-0A5A-4482-B423-F073E4F81003');
      While (P1 <= high(Result)) and (Result[P1] <> #10) do inc(P1);
      inc(P1);
      Insert(
        LIndentStr+'public'#13#10+
        LIndentStr+'  Type'#13#10+
        LIndentStr+'    T'+ABoundsName+' = class(TALBounds)'#13#10+
        LIndentStr+'    protected'#13#10+
        LIndentStr+'      function GetDefaultValue: TRectF; override;'#13#10+
        LIndentStr+'    end;'#13#10+
        LIndentStr+'protected'#13#10+
        LIndentStr+'  function Create'+ABoundsName+': TALBounds; override;'#13#10,
        Result,
        P1);
    Finally
      ALFreeAndNil(LLst);
    End;
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  procedure UpdateSourceCode(Var aSrc: AnsiString);
  begin
    aSrc := FindAndReplace(aSrc, 'published', 'public');
    //--
    aSrc := FindAndReplace(aSrc, ' = class(TALControl)', ' = class(TALDynamicExtendedControl)');
    aSrc := FindAndReplace(aSrc, 'TALControl', 'TALDynamicControl');
    aSrc := FindAndReplace(aSrc, 'TALContent', 'TALDynamicContent');
    aSrc := FindAndReplace(aSrc, 'TALDynamicContent = class(TALDynamicControl, IContent)','TALDynamicContent = class(TALDynamicExtendedControl)');
    aSrc := FindAndReplace(aSrc, 'TALShape', 'TALDynamicShape');
    aSrc := FindAndReplace(aSrc, 'TALImage', 'TALDynamicImage');
    aSrc := FindAndReplace(aSrc, 'TALAnimatedImage', 'TALDynamicAnimatedImage');
    aSrc := FindAndReplace(aSrc, 'TALBaseRectangle', 'TALDynamicBaseRectangle');
    aSrc := FindAndReplace(aSrc, 'TALRectangle', 'TALDynamicRectangle');
    aSrc := FindAndReplace(aSrc, 'TALCircle', 'TALDynamicCircle');
    aSrc := FindAndReplace(aSrc, 'TALLine', 'TALDynamicLine');
    aSrc := FindAndReplace(aSrc, 'TALBaseText', 'TALDynamicBaseText');
    aSrc := FindAndReplace(aSrc, 'TALText', 'TALDynamicText');
    aSrc := FindAndReplace(aSrc, 'TALBaseStateStyle', 'TALDynamicBaseStateStyle');
    aSrc := FindAndReplace(aSrc, 'TALAniIndicator', 'TALDynamicAniIndicator');
    aSrc := FindAndReplace(aSrc, 'TALBaseCheckBox', 'TALDynamicBaseCheckBox');
    aSrc := FindAndReplace(aSrc, 'TALCheckBox', 'TALDynamicCheckBox');
    aSrc := FindAndReplace(aSrc, 'TALRadioButton', 'TALDynamicRadioButton');
    aSrc := FindAndReplace(aSrc, 'TALSwitch', 'TALDynamicSwitch');
    aSrc := FindAndReplace(aSrc, 'TALButton', 'TALDynamicButton');
    aSrc := FindAndReplace(aSrc, 'TALToggleButton', 'TALDynamicToggleButton');
    aSrc := FindAndReplace(aSrc, 'TALCustomTrack', 'TALDynamicCustomTrack');
    aSrc := FindAndReplace(aSrc, 'TALTrackBar', 'TALDynamicTrackBar');
    aSrc := FindAndReplace(aSrc, 'TALRangeTrackBar', 'TALDynamicRangeTrackBar');
    aSrc := FindAndReplace(aSrc, 'TALCustomScrollBar', 'TALDynamicCustomScrollBar');
    aSrc := FindAndReplace(aSrc, 'TALScrollBar', 'TALDynamicScrollBar');
    aSrc := FindAndReplace(aSrc, 'TALLayout', 'TALDynamicLayout');
    aSrc := FindAndReplace(aSrc, 'TALVideoPlayerSurface', 'TALDynamicVideoPlayerSurface');
    aSrc := FindAndReplace(aSrc, 'TALBasePageIndicator', 'TALDynamicBasePageIndicator');
    aSrc := FindAndReplace(aSrc, 'TALPageIndicator', 'TALDynamicPageIndicator');
    aSrc := FindAndReplace(aSrc, 'TALPageView', 'TALDynamicPageView');
    aSrc := FindAndReplace(aSrc, 'TALPageController', 'TALDynamicPageController');
    //--
    aSrc := FindAndReplace(aSrc, 'TALDynamicTexture', 'TALTexture');
    aSrc := FindAndReplace(aSrc, 'TALDynamicImageWrapMode', 'TALImageWrapMode');
    aSrc := FindAndReplace(aSrc, 'TALDynamicLineType', 'TALLineType');
    aSrc := FindAndReplace(aSrc, 'TALDynamicTextElement', 'TALTextElement');
    aSrc := FindAndReplace(aSrc, 'TALDynamicBaseTextSettings', 'TALBaseTextSettings');
    aSrc := FindAndReplace(aSrc, 'TALDynamicTextDecoration', 'TALTextDecoration');
    aSrc := FindAndReplace(aSrc, 'TALDynamicTextSettings', 'TALTextSettings');
    aSrc := FindAndReplace(aSrc, 'TALDynamicTextDirection', 'TALTextDirection');
    aSrc := FindAndReplace(aSrc, 'TALDynamicTextHorzAlign', 'TALTextHorzAlign');
    //--
    //aSrc := FindAndReplace(aSrc, ' property Action', ' //**property Action');
    aSrc := FindAndReplace(aSrc, ' property Anchors', ' //**property Anchors');
    aSrc := FindAndReplace(aSrc, ' property CanFocus', ' //**property CanFocus');
    //aSrc := FindAndReplace(aSrc, ' property CanParentFocus', ' //**property CanParentFocus');
    //aSrc := FindAndReplace(aSrc, ' property DisableFocusEffect', ' //**property DisableFocusEffect');
    aSrc := FindAndReplace(aSrc, ' property ClipChildren', ' //**property ClipChildren');
    //aSrc := FindAndReplace(aSrc, ' property ClipParent', ' //**property ClipParent');
    aSrc := FindAndReplace(aSrc, ' property DragMode', ' //**property DragMode');
    aSrc := FindAndReplace(aSrc, ' property EnableDragHighlight', ' //**property EnableDragHighlight');
    //aSrc := FindAndReplace(aSrc, ' property Hint', ' //**property Hint');
    //aSrc := FindAndReplace(aSrc, ' property ParentShowHint', ' //**property ParentShowHint');
    //aSrc := FindAndReplace(aSrc, ' property ShowHint', ' //**property ShowHint');
    aSrc := FindAndReplace(aSrc, ' property Locked', ' //**property Locked');
    aSrc := FindAndReplace(aSrc, ' property PopupMenu', ' //**property PopupMenu');
    aSrc := FindAndReplace(aSrc, ' property Position', ' //**property Position');
    //aSrc := FindAndReplace(aSrc, ' property RotationCenter', ' //**property RotationCenter');
    //aSrc := FindAndReplace(aSrc, ' property Pivot', ' //**property Pivot');
    //aSrc := FindAndReplace(aSrc, ' property Scale', ' //**property Scale');
    aSrc := FindAndReplace(aSrc, ' property Size', ' //**property Size');
    aSrc := FindAndReplace(aSrc, ' property TabOrder', ' //**property TabOrder');
    aSrc := FindAndReplace(aSrc, ' property TabStop', ' //**property TabStop');
    aSrc := FindAndReplace(aSrc, ' property OnCanFocus', ' //**property OnCanFocus');
    aSrc := FindAndReplace(aSrc, ' property OnDragEnter', ' //**property OnDragEnter');
    aSrc := FindAndReplace(aSrc, ' property OnDragLeave', ' //**property OnDragLeave');
    aSrc := FindAndReplace(aSrc, ' property OnDragOver', ' //**property OnDragOver');
    aSrc := FindAndReplace(aSrc, ' property OnDragDrop', ' //**property OnDragDrop');
    aSrc := FindAndReplace(aSrc, ' property OnDragEnd', ' //**property OnDragEnd');
    aSrc := FindAndReplace(aSrc, ' property OnEnter', ' //**property OnEnter');
    aSrc := FindAndReplace(aSrc, ' property OnExit', ' //**property OnExit');
    aSrc := FindAndReplace(aSrc, ' property OnMouseWheel', ' //**property OnMouseWheel');
    //aSrc := FindAndReplace(aSrc, ' property OnDblClick', ' //**property OnDblClick');
    aSrc := FindAndReplace(aSrc, ' property OnKeyDown', ' //**property OnKeyDown');
    aSrc := FindAndReplace(aSrc, ' property OnKeyUp', ' //**property OnKeyUp');
    aSrc := FindAndReplace(aSrc, ' property OnResize', ' //**property OnResize');
    //--
    aSrc := FindAndReplace(aSrc, '{## Dynamic:Begin', '// Dynamic:Begin');
    aSrc := FindAndReplace(aSrc, 'Dynamic:End ##}', '// Dynamic:End');
    aSrc := FindAndReplace(aSrc, 'result := TALNetHttpClientPool.Instance.PriorityStartingPoint;','result := GetDownloadPriority(AContext)');
    aSrc := FindAndReplace(aSrc, 'if not Supports(aObject, IALNativeControl) then','//**if not Supports(aObject, IALNativeControl) then');
    aSrc := FindAndReplace(aSrc, '_TControlProtectedAccess','_TALDynamicControlProtectedAccess');
    aSrc := FindAndReplace(aSrc, 'FContent.InsertObject(Lindex, Result);','FContent.InsertControl(Result, Lindex);');
    aSrc := FindAndReplace(aSrc, 'FContent.RemoveObject(AIndex);','FContent.RemoveControl(AIndex);');
    aSrc := FindAndReplace(aSrc, 'if HasActivePage then ActivePage.ResetFocus;','//**if HasActivePage then ActivePage.ResetFocus;');
    aSrc := FindAndReplace(aSrc, 'ActivePage.ResetFocus;','//**ActivePage.ResetFocus;');
    aSrc := FindAndReplace(aSrc, 'if not IsChild(AValue) then raise Exception.Create','//**if not IsChild(AValue) then raise Exception.Create');
    aSrc := FindAndReplace(aSrc, 'function GetItemsCount: Integer;','//**function GetItemsCount: Integer;');
    aSrc := FindAndReplace(aSrc, 'function GetItem(const AIndex: Integer): TFmxObject;','//**function GetItem(const AIndex: Integer): TFmxObject;');
    aSrc := FindAndReplace(aSrc, 'ClipChildren := true;','//**ClipChildren := true;');
    aSrc := FindAndReplace(aSrc, 'ValidateInheritance(AOwner, TALDynamicPageController, False{CanBeNil});','//**ValidateInheritance(AOwner, TALDynamicPageController, False{CanBeNil});');
    aSrc := FindAndReplace(aSrc, 'FALParentControl := nil;','//**FALParentControl := nil;');
    aSrc := FindAndReplace(aSrc, 'FALParentControl: TALDynamicControl;', '//**FALParentControl: TALDynamicControl;');
    aSrc := FindAndReplace(aSrc, 'property ALParentControl: TALDynamicControl read FALParentControl;', '//**property ALParentControl: TALDynamicControl read FALParentControl;');
    aSrc := FindAndReplace(aSrc, 'ALParentControl', 'Owner');
    aSrc := FindAndReplace(aSrc, 'ParentControl', 'Owner');
    aSrc := FindAndReplace(aSrc, 'var P: TControl := Self;','var P: TALDynamicControl := Self;');
    aSrc := FindAndReplace(aSrc, 'Size.SetPlatformDefaultWithoutNotification(False);','//**Size.SetPlatformDefaultWithoutNotification(False);');
    aSrc := FindAndReplace(aSrc, ' Size.Height ',' Height ');
    aSrc := FindAndReplace(aSrc, ' Size.Width ',' Width ');
    aSrc := FindAndReplace(aSrc, '(Size.Height,','(Height,');
    aSrc := FindAndReplace(aSrc, '(Size.Width,','(Width,');
    aSrc := FindAndReplace(aSrc, 'Size.Size := ALAlignDimensionToPixelRound(Size.Size, ALGetScreenScale, TEpsilon.Position);', 'SetSize(ALAlignDimensionToPixelRound(TSizeF.Create(Width, Height), ALGetScreenScale, TEpsilon.Position));');
    aSrc := FindAndReplace(aSrc, 'LMaxThumb.size.size := size.size;','LMaxThumb.SetSize(TSizeF.Create(Width, Height));');
    aSrc := FindAndReplace(aSrc, 'Size.Size.IsZero', 'BoundsRect.IsEmpty');
    aSrc := FindAndReplace(aSrc, 'FFadeOverlay.Size.Size := TpointF.Create(Width, Height);','FFadeOverlay.SetSize(TSizeF.Create(Width, Height));');
    aSrc := FindAndReplace(aSrc, 'function IsSizeStored: Boolean;', '//**function IsSizeStored: Boolean;');
    aSrc := FindAndReplace(aSrc, '//**function IsSizeStored: Boolean;','function IsSizeStored: Boolean;','TStopIndicatorBrush = class(TALPersistentObserver)','end;');
    aSrc := FindAndReplace(aSrc, '//**property Size: Single read FSize write SetSize stored IsSizeStored nodefault;','property Size: Single read FSize write SetSize stored IsSizeStored nodefault;','TStopIndicatorBrush = class(TALPersistentObserver)','end;');
    aSrc := FindAndReplace(aSrc, 'Position.X', 'Left');
    aSrc := FindAndReplace(aSrc, 'Position.Y', 'Top');
    aSrc := FindAndReplace(aSrc, 'PressedLeft','PressedPosition.X');
    aSrc := FindAndReplace(aSrc, 'PressedTop','PressedPosition.Y');
    aSrc := FindAndReplace(aSrc, 'DownLeft','DownPosition.X');
    aSrc := FindAndReplace(aSrc, 'DownTop','DownPosition.Y');
    aSrc := FindAndReplace(aSrc, 'UpLeft','UpPosition.X');
    aSrc := FindAndReplace(aSrc, 'UpTop','UpPosition.Y');
    aSrc := FindAndReplace(aSrc, 'ViewportLeft','ViewportPosition.X');
    aSrc := FindAndReplace(aSrc, 'ViewportTop','ViewportPosition.Y');
    aSrc := FindAndReplace(aSrc, 'fCustomTrackMouseDownPos := FCustomTrack.AbsoluteToLocal(LocalToAbsolute(PressedPosition));','fCustomTrackMouseDownPos := FCustomTrack.AbsoluteToLocal(LocalToAbsolute(PressedPosition)).ReducePrecision;');
    aSrc := FindAndReplace(aSrc, 'var LCustomTrackMousePos := FCustomTrack.AbsoluteToLocal(LocalToAbsolute(TpointF.Create(X,Y)));','var LCustomTrackMousePos := FCustomTrack.AbsoluteToLocal(LocalToAbsolute(TpointF.Create(X,Y))).ReducePrecision;');
    aSrc := FindAndReplace(aSrc, 'FPressedThumbPos := FThumb.Position.Point','FPressedThumbPos := TPointF.Create(Single(FThumb.left), Single(FThumb.top))');
    aSrc := FindAndReplace(aSrc, 'Position.Point := TpointF.Create(','Position := TALPointD.Create(');
    aSrc := FindAndReplace(aSrc, 'Position.Point := -TpointF.Create(','Position := -TALPointD.Create(');
    aSrc := FindAndReplace(aSrc, 'Position.Point := ActivePage.Position.Point;','Position := ActivePage.Position;');
    aSrc := FindAndReplace(aSrc, 'SetBounds(X, Y, AWidth, AHeight: Single)','SetBounds(X, Y, AWidth, AHeight: Double)');
    aSrc := FindAndReplace(aSrc, 'PointInObjectLocal(X, Y: Single): Boolean;','PointInObjectLocal(X, Y: Double): Boolean;');
    aSrc := FindAndReplace(aSrc, 'FControlAbsolutePosAtMouseDown: TpointF;','FControlAbsolutePosAtMouseDown: TALPointD;');
    aSrc := FindAndReplace(aSrc, 'FControlAbsolutePosAtMouseDown := TpointF.zero;','FControlAbsolutePosAtMouseDown := TALPointD.zero;');
    aSrc := FindAndReplace(aSrc, 'FForm: TCommonCustomForm;', '//**FForm: TCommonCustomForm;');
    aSrc := FindAndReplace(aSrc, 'property Form: TCommonCustomForm read FForm;', '//**property Form: TCommonCustomForm read FForm;');
    aSrc := FindAndReplace(aSrc, 'FForm := nil;','//**FForm := nil;');
    aSrc := FindAndReplace(aSrc, 'else //**FForm := nil;','else FForm := nil;');
    aSrc := FindAndReplace(aSrc, 'procedure DelayOnResize(Sender: TObject);','//**procedure DelayOnResize(Sender: TObject);');
    aSrc := FindAndReplace(aSrc, 'procedure DelayOnResized(Sender: TObject);','//**procedure DelayOnResized(Sender: TObject);');
    aSrc := FindAndReplace(aSrc, 'DoMouseEnter','MouseEnter');
    aSrc := FindAndReplace(aSrc, 'DoMouseLeave','MouseLeave');
    aSrc := FindAndReplace(aSrc, 'TabStop := ACustomTrack.TabStop;','//**TabStop := ACustomTrack.TabStop;');
    aSrc := FindAndReplace(aSrc, 'inherited TabStop := False;','//**inherited TabStop := False;');
    aSrc := FindAndReplace(aSrc, 'procedure _SetTabStop(const Value: Boolean);','//**procedure _SetTabStop(const Value: Boolean); virtual;');
    aSrc := FindAndReplace(aSrc, 'FThumb.TabOrder := 0;','//**FThumb.TabOrder := 0;');
    aSrc := FindAndReplace(aSrc, 'FMaxThumb.TabOrder := 1;','//**FMaxThumb.TabOrder := 1;');
    aSrc := FindAndReplace(aSrc, 'function GetTabStopController: ITabStopController; override;','//**function GetTabStopController: ITabStopController; override;');
    aSrc := FindAndReplace(aSrc, 'function GetTabListClass: TTabListClass; override;','//**function GetTabListClass: TTabListClass; override;');
    aSrc := FindAndReplace(aSrc, 'procedure DoEnter; override;','//**procedure DoEnter; override;');
    aSrc := FindAndReplace(aSrc, 'procedure DoExit; override;','//**procedure DoExit; override;');
    aSrc := FindAndReplace(aSrc, 'CanFocus := True;', '//**CanFocus := True;');
    aSrc := FindAndReplace(aSrc, 'CanFocus := False;', '//**CanFocus := False;');
    aSrc := FindAndReplace(aSrc, 'CanParentFocus := True;', '//**CanParentFocus := True;');
    aSrc := FindAndReplace(aSrc, 'CanFocus := ACustomTrack.CanFocus;','//**CanFocus := ACustomTrack.CanFocus;');
    aSrc := FindAndReplace(aSrc, 'function _GetCanFocus: Boolean;','//**function _GetCanFocus: Boolean; virtual;');
    aSrc := FindAndReplace(aSrc, 'procedure _SetCanFocus(const Value: Boolean);','//**procedure _SetCanFocus(const Value: Boolean); virtual;');
    aSrc := FindAndReplace(aSrc, 'procedure IsFocusedChanged; override;','//**procedure IsFocusedChanged; override;');
    aSrc := FindAndReplace(aSrc, 'else if Parent.IsFocused then Result := Checked.Focused','//**else if Parent.IsFocused then Result := Checked.Focused');
    aSrc := FindAndReplace(aSrc, 'else if Parent.IsFocused then Result := UnChecked.Focused','//**else if Parent.IsFocused then Result := UnChecked.Focused');
    aSrc := FindAndReplace(aSrc, 'else if Parent.IsFocused then Result := Focused','//**else if Parent.IsFocused then Result := Focused');
    aSrc := FindAndReplace(aSrc, 'If AThumb.IsFocused or Athumb.IsMouseOver or AThumb.Pressed then begin','If {AThumb.IsFocused or} Athumb.IsMouseOver or AThumb.Pressed then begin');
    aSrc := FindAndReplace(aSrc, 'procedure IsFocusedChanged; virtual;','//**procedure IsFocusedChanged; virtual;');
    aSrc := FindAndReplace(aSrc, 'FFocusOnMouseDown: Boolean;','//**FFocusOnMouseDown: Boolean;');
    aSrc := FindAndReplace(aSrc, 'FFocusOnMouseUp: Boolean;','//**FFocusOnMouseUp: Boolean;');
    aSrc := FindAndReplace(aSrc, 'FFormerMarginsChangedHandler: TNotifyEvent;','//**FFormerMarginsChangedHandler: TNotifyEvent;', 'TALDynamicExtendedControl = class(TALDynamicControl)', 'end;');
    aSrc := FindAndReplace(aSrc, 'procedure MarginsChangedHandler(Sender: TObject);','//**procedure MarginsChangedHandler(Sender: TObject);', 'TALDynamicExtendedControl = class(TALDynamicControl)', 'end;');
    aSrc := FindAndReplace(aSrc, 'Procedure MarginsChanged; virtual;','//**Procedure MarginsChanged; virtual;', 'TALDynamicExtendedControl = class(TALDynamicControl)', 'end;');
    aSrc := FindAndReplace(aSrc, 'FFormerMarginsChangedHandler := Margins.OnChange;','//**FFormerMarginsChangedHandler := Margins.OnChange;', 'constructor TALDynamicExtendedControl.Create(', 'end;');
    aSrc := FindAndReplace(aSrc, 'Margins.OnChange := MarginsChangedHandler;','//**Margins.OnChange := MarginsChangedHandler;', 'constructor TALDynamicExtendedControl.Create(', 'end;');
    aSrc := FindAndReplace(aSrc, 'FAlign: TALAlignLayout;','//**FAlign: TALAlignLayout;');
    aSrc := FindAndReplace(aSrc, 'FAlign := TALAlignLayout.None;','//**FAlign := TALAlignLayout.None;');
    aSrc := FindAndReplace(aSrc, 'property FocusOnMouseDown: Boolean read FFocusOnMouseDown write FFocusOnMouseDown;','//**property FocusOnMouseDown: Boolean read FFocusOnMouseDown write FFocusOnMouseDown;');
    aSrc := FindAndReplace(aSrc, 'FFocusOnMouseDown := False;','//**FFocusOnMouseDown := False;');
    aSrc := FindAndReplace(aSrc, 'FFocusOnMouseUp := False;','//**FFocusOnMouseUp := False;');
    aSrc := FindAndReplace(aSrc, 'property FocusOnMouseUp: Boolean read FFocusOnMouseUp write FFocusOnMouseUp;','//**property FocusOnMouseUp: Boolean read FFocusOnMouseUp write FFocusOnMouseUp;');
    aSrc := FindAndReplace(aSrc, 'function GetAlign: TALAlignLayout; Reintroduce;','//**function GetAlign: TALAlignLayout; Reintroduce;');
    aSrc := FindAndReplace(aSrc, 'procedure MakeBufDrawable; virtual;','procedure MakeBufDrawable; override;', 'TALDynamicExtendedControl = class(TALDynamicControl)', 'end;');
    aSrc := FindAndReplace(aSrc, 'procedure ClearBufDrawable; virtual;','procedure ClearBufDrawable; override;', 'TALDynamicExtendedControl = class(TALDynamicControl)', 'end;');
    aSrc := FindAndReplace(aSrc, 'procedure KeyDown(var Key: Word; var KeyChar: System.WideChar; Shift: TShiftState); override;','//**procedure KeyDown(var Key: Word; var KeyChar: System.WideChar; Shift: TShiftState); override;');
    aSrc := FindAndReplace(aSrc, 'procedure DoMatrixChanged(Sender: TObject); override;','//**procedure DoMatrixChanged(Sender: TObject); override;');
    aSrc := FindAndReplace(aSrc, 'function GetPivot: TPosition;','//**function GetPivot: TPosition;');
    aSrc := FindAndReplace(aSrc, 'procedure SetPivot(const Value: TPosition);','//**procedure SetPivot(const Value: TPosition);');
    aSrc := FindAndReplace(aSrc, 'property Pivot: TPosition read GetPivot write SetPivot;','//**property Pivot: TPosition read GetPivot write SetPivot;');
    aSrc := FindAndReplace(aSrc, 'Pivot.Point := TPointF.Create','Pivot := TPointF.Create');
    aSrc := FindAndReplace(aSrc, 'AbsoluteRect, // Const AAbsoluteRect: TRectF;','AbsoluteRect.ReducePrecision, // Const AAbsoluteRect: TRectF;');
    aSrc := FindAndReplace(aSrc, 'TouchTargetExpansion.Rect','TouchTargetExpansion');
    aSrc := FindAndReplace(aSrc, 'FValueRange := TValueRange.create(self);','FValueRange := TValueRange.create(_ALDummyComponent);');
    aSrc := FindAndReplace(aSrc, 'function GetDoubleBuffered: boolean; virtual;','function GetDoubleBuffered: boolean; override;');
    aSrc := FindAndReplace(aSrc, 'procedure SetDoubleBuffered(const AValue: Boolean); virtual;','procedure SetDoubleBuffered(const AValue: Boolean); override;');
    aSrc := FindAndReplace(aSrc, 'function IsDisplayed: Boolean; virtual;','function IsDisplayed: Boolean; override;');
    aSrc := FindAndReplace(aSrc, 'function GetAbsoluteDisplayedRect: TRectF; virtual;','//**function GetAbsoluteDisplayedRect: TRectF; virtual;');
    aSrc := FindAndReplace(aSrc, 'function IsReadyToDisplay(const AStrict: Boolean = False): Boolean; virtual;','function IsReadyToDisplay(const AStrict: Boolean = False): Boolean; override;');
    aSrc := FindAndReplace(aSrc, 'procedure IContent.Changed = ContentChanged;','//**procedure IContent.Changed = ContentChanged;');
    aSrc := FindAndReplace(aSrc, 'function IsVisibleObject(const AObject: TControl): Boolean; override;','//**function IsVisibleObject(const AObject: TControl): Boolean; override;');
    aSrc := FindAndReplace(aSrc, 'FreeNotification(AObject: TObject);','FreeNotification(const AObject: TALDynamicControl);');
    aSrc := FindAndReplace(aSrc, 'ChildrenMouseDown(const AObject: TControl; Button: TMouseButton; Shift: TShiftState; X, Y: Single);','ChildrenMouseDown(const AObject: TALDynamicControl; Button: TMouseButton; Shift: TShiftState; X, Y: Single);');
    aSrc := FindAndReplace(aSrc, 'ChildrenMouseMove(const AObject: TControl; Shift: TShiftState; X, Y: Single);','ChildrenMouseMove(const AObject: TALDynamicControl; Shift: TShiftState; X, Y: Single);');
    aSrc := FindAndReplace(aSrc, 'ChildrenMouseUp(const AObject: TControl; Button: TMouseButton; Shift: TShiftState; X, Y: Single);','ChildrenMouseUp(const AObject: TALDynamicControl; Button: TMouseButton; Shift: TShiftState; X, Y: Single);');
    aSrc := FindAndReplace(aSrc, 'ChildrenMouseLeave(const AObject: TControl);','ChildrenMouseLeave(const AObject: TALDynamicControl);');
    aSrc := FindAndReplace(aSrc, 'ApplyColorSchemeRecursive(const AControl: TControl);','ApplyColorSchemeRecursive(const AControl: TALDynamicControl);');
    aSrc := FindAndReplace(aSrc, 'AdjustSize; virtual;','AdjustSize; override;');
    aSrc := FindAndReplace(aSrc, 'DoAddObject(const AObject: TFmxObject);','DoInsertControl(const AControl: TALDynamicControl; const AIndex: Integer);');
    aSrc := FindAndReplace(aSrc, 'DoRemoveObject(const AObject: TFmxObject);','DoRemoveControl(const AControl: TALDynamicControl);');
    aSrc := FindAndReplace(aSrc, 'procedure DoDeleteChildren; override;','//**procedure DoDeleteChildren; override;');
    aSrc := FindAndReplace(aSrc, 'FFormerTouchTargetExpansionChangedHandler: TNotifyEvent;','//**FFormerTouchTargetExpansionChangedHandler: TNotifyEvent;');
    aSrc := FindAndReplace(aSrc, 'FFormerTouchTargetExpansionChangedHandler := TouchTargetExpansion.OnChange;','//**FFormerTouchTargetExpansionChangedHandler := TouchTargetExpansion.OnChange;');
    aSrc := FindAndReplace(aSrc, 'TouchTargetExpansion.OnChange := TouchTargetExpansionChanged;','//**TouchTargetExpansion.OnChange := TouchTargetExpansionChanged;');
    aSrc := FindAndReplace(aSrc, 'procedure TouchTargetExpansionChanged(Sender: TObject); virtual;','procedure SetTouchTargetExpansion(const AValue: TRectF); override;');
    aSrc := FindAndReplace(aSrc, 'procedure SetAlign(const Value: TALAlignLayout); Reintroduce; virtual;','//**procedure SetAlign(const Value: TALAlignLayout); Reintroduce; virtual;');
    aSrc := FindAndReplace(aSrc, 'property Align: TALAlignLayout read FAlign write SetAlign default TALAlignLayout.None;','//**property Align: TALAlignLayout read FAlign write SetAlign default TALAlignLayout.None;');
    aSrc := FindAndReplace(aSrc, 'AutoAlignToPixel := TALDynamicControl(Source).AutoAlignToPixel;','//**AutoAlignToPixel := TALDynamicControl(Source).AutoAlignToPixel;');
    aSrc := FindAndReplace(aSrc, 'AutoSize := TALDynamicControl(Source).AutoSize;','//**AutoSize := TALDynamicControl(Source).AutoSize;');
    aSrc := FindAndReplace(aSrc, 'DoubleBuffered := TALDynamicControl(Source).DoubleBuffered;','//**DoubleBuffered := TALDynamicControl(Source).DoubleBuffered;');
    aSrc := FindAndReplace(aSrc, 'Pivot.Assign(TALDynamicControl(Source).Pivot);','//**Pivot.Assign(TALDynamicControl(Source).Pivot);');
    aSrc := FindAndReplace(aSrc, 'Scale.assign(TALDynamicControl(Source).Scale);','//**Scale.assign(TALDynamicControl(Source).Scale);');
    aSrc := FindAndReplace(aSrc, 'FScale: TPosition;','//**FScale: TPosition;');
    aSrc := FindAndReplace(aSrc, 'procedure SetScale(const AValue: TPosition);','//**procedure SetScale(const AValue: TPosition);');
    aSrc := FindAndReplace(aSrc, 'procedure ScaleChangedHandler(Sender: TObject);','//**procedure ScaleChangedHandler(Sender: TObject);');
    aSrc := FindAndReplace(aSrc, 'property Scale: TPosition read FScale write SetScale;','//**property Scale: TPosition read FScale write SetScale;');
    aSrc := FindAndReplace(aSrc, 'FScale := TPosition.Create(TPointF.Create(1, 1));','//**FScale := TPosition.Create(TPointF.Create(1, 1));');
    aSrc := FindAndReplace(aSrc, 'FScale.OnChange := ScaleChangedHandler;','//**FScale.OnChange := ScaleChangedHandler;');
    aSrc := FindAndReplace(aSrc, 'ALFreeAndNil(FScale);','//**ALFreeAndNil(FScale);');
    aSrc := FindAndReplace(aSrc, 'Scale.Point','Scale');
    aSrc := FindAndReplace(aSrc, 'property DoubleBuffered: Boolean read GetDoubleBuffered write SetDoubleBuffered default False;','//**property DoubleBuffered: Boolean read GetDoubleBuffered write SetDoubleBuffered default False;');
    aSrc := FindAndReplace(aSrc, 'Anchors := TALDynamicControl(Source).Anchors;','//**Anchors := TALDynamicControl(Source).Anchors;');
    aSrc := FindAndReplace(aSrc, 'CanFocus := TALDynamicControl(Source).CanFocus;','//**CanFocus := TALDynamicControl(Source).CanFocus;');
    aSrc := FindAndReplace(aSrc, 'CanParentFocus := TALDynamicControl(Source).CanParentFocus;','//**CanParentFocus := TALDynamicControl(Source).CanParentFocus;');
    aSrc := FindAndReplace(aSrc, 'ClipChildren := TALDynamicControl(Source).ClipChildren;','//**ClipChildren := TALDynamicControl(Source).ClipChildren;');
    aSrc := FindAndReplace(aSrc, 'ClipParent := TALDynamicControl(Source).ClipParent;','//**ClipParent := TALDynamicControl(Source).ClipParent;');
    aSrc := FindAndReplace(aSrc, 'DragMode := TALDynamicControl(Source).DragMode;','//**DragMode := TALDynamicControl(Source).DragMode;');
    aSrc := FindAndReplace(aSrc, 'EnableDragHighlight := TALDynamicControl(Source).EnableDragHighlight;','//**EnableDragHighlight := TALDynamicControl(Source).EnableDragHighlight;');
    aSrc := FindAndReplace(aSrc, 'Hint := TALDynamicControl(Source).Hint;','//**Hint := TALDynamicControl(Source).Hint;');
    aSrc := FindAndReplace(aSrc, 'Locked := TALDynamicControl(Source).Locked;','//**Locked := TALDynamicControl(Source).Locked;');
    aSrc := FindAndReplace(aSrc, 'ParentShowHint := TALDynamicControl(Source).ParentShowHint;','//**ParentShowHint := TALDynamicControl(Source).ParentShowHint;');
    aSrc := FindAndReplace(aSrc, 'Position.Assign(TALDynamicControl(Source).Position);','//**Position.Assign(TALDynamicControl(Source).Position);');
    aSrc := FindAndReplace(aSrc, 'ShowHint := TALDynamicControl(Source).ShowHint;','//**ShowHint := TALDynamicControl(Source).ShowHint;');
    aSrc := FindAndReplace(aSrc, 'Size.Assign(TALDynamicControl(Source).Size);','//**Size.Assign(TALDynamicControl(Source).Size);');
    aSrc := FindAndReplace(aSrc, 'StyleName := TALDynamicControl(Source).StyleName;','//**StyleName := TALDynamicControl(Source).StyleName;');
    aSrc := FindAndReplace(aSrc, 'TabOrder := TALDynamicControl(Source).TabOrder;','//**TabOrder := TALDynamicControl(Source).TabOrder;');
    aSrc := FindAndReplace(aSrc, 'TabStop := TALDynamicCustomTrack(Source).TabStop;','//**TabStop := TALDynamicCustomTrack(Source).TabStop;');
    aSrc := FindAndReplace(aSrc, 'TabStop := TALDynamicControl(Source).TabStop;','//**TabStop := TALDynamicControl(Source).TabStop;');
    aSrc := FindAndReplace(aSrc, 'TagFloat := TALDynamicControl(Source).TagFloat;','//**TagFloat := TALDynamicControl(Source).TagFloat;');
    aSrc := FindAndReplace(aSrc, 'TouchTargetExpansion.Assign(TALDynamicControl(Source).TouchTargetExpansion);','//**TouchTargetExpansion.Assign(TALDynamicControl(Source).TouchTargetExpansion);');
    aSrc := FindAndReplace(aSrc, 'OnDragEnter := TALDynamicControl(Source).OnDragEnter;','//**OnDragEnter := TALDynamicControl(Source).OnDragEnter;');
    aSrc := FindAndReplace(aSrc, 'OnDragLeave := TALDynamicControl(Source).OnDragLeave;','//**OnDragLeave := TALDynamicControl(Source).OnDragLeave;');
    aSrc := FindAndReplace(aSrc, 'OnDragOver := TALDynamicControl(Source).OnDragOver;','//**OnDragOver := TALDynamicControl(Source).OnDragOver;');
    aSrc := FindAndReplace(aSrc, 'OnDragDrop := TALDynamicControl(Source).OnDragDrop;','//**OnDragDrop := TALDynamicControl(Source).OnDragDrop;');
    aSrc := FindAndReplace(aSrc, 'OnDragEnd := TALDynamicControl(Source).OnDragEnd;','//**OnDragEnd := TALDynamicControl(Source).OnDragEnd;');
    aSrc := FindAndReplace(aSrc, 'OnKeyDown := TALDynamicControl(Source).OnKeyDown;','//**OnKeyDown := TALDynamicControl(Source).OnKeyDown;');
    aSrc := FindAndReplace(aSrc, 'OnKeyUp := TALDynamicControl(Source).OnKeyUp;','//**OnKeyUp := TALDynamicControl(Source).OnKeyUp;');
    aSrc := FindAndReplace(aSrc, 'OnDblClick := TALDynamicControl(Source).OnDblClick;','//**OnDblClick := TALDynamicControl(Source).OnDblClick;');
    aSrc := FindAndReplace(aSrc, 'OnCanFocus := TALDynamicControl(Source).OnCanFocus;','//**OnCanFocus := TALDynamicControl(Source).OnCanFocus;');
    aSrc := FindAndReplace(aSrc, 'OnEnter := TALDynamicControl(Source).OnEnter;','//**OnEnter := TALDynamicControl(Source).OnEnter;');
    aSrc := FindAndReplace(aSrc, 'OnExit := TALDynamicControl(Source).OnExit;','//**OnExit := TALDynamicControl(Source).OnExit;');
    aSrc := FindAndReplace(aSrc, 'OnMouseWheel := TALDynamicControl(Source).OnMouseWheel;','//**OnMouseWheel := TALDynamicControl(Source).OnMouseWheel;');
    aSrc := FindAndReplace(aSrc, 'OnResize := TALDynamicControl(Source).OnResize;','//**OnResize := TALDynamicControl(Source).OnResize;');
    aSrc := FindAndReplace(aSrc, 'OnActivate := TALDynamicControl(Source).OnActivate;','//**OnActivate := TALDynamicControl(Source).OnActivate;');
    aSrc := FindAndReplace(aSrc, 'OnDeactivate := TALDynamicControl(Source).OnDeactivate;','//**OnDeactivate := TALDynamicControl(Source).OnDeactivate;');
    aSrc := FindAndReplace(aSrc, 'DoMatrixChanged(Sender);','Repaint; //** DoMatrixChanged(Sender);');
    aSrc := FindAndReplace(aSrc, 'Locked := True;', '//**Locked := True;');
    aSrc := FindAndReplace(aSrc, 'procedure SetNewScene(AScene: IScene); override;','//**procedure SetNewScene(AScene: IScene); override;');
    aSrc := FindAndReplace(aSrc, 'Assign(Source: TPersistent{TALDynamicControl})','Assign(Source: TALDynamicControl)');
    aSrc := FindAndReplace(aSrc, 'procedure ApplyColorScheme; virtual;','procedure ApplyColorScheme; override;','TALDynamicExtendedControl = class(', #13#10'  end;');
    aSrc := FindAndReplace(aSrc, 'FFadeOverlay.Anchors := [TAnchorKind.akLeft, TAnchorKind.akTop, TAnchorKind.akRight, TAnchorKind.akBottom];','//**FFadeOverlay.Anchors := [TAnchorKind.akLeft, TAnchorKind.akTop, TAnchorKind.akRight, TAnchorKind.akBottom];');
    aSrc := FindAndReplace(aSrc, 'FFadeOverlay.Parent := self;','//**FFadeOverlay.Parent := self;');
    aSrc := FindAndReplace(aSrc, 'FTrack.Parent := self;','//**FTrack.Parent := self;');
    aSrc := FindAndReplace(aSrc, 'FTrack.Stored := False;','//**FTrack.Stored := False;');
    aSrc := FindAndReplace(aSrc, 'FTrack.SetSubComponent(True);','//**FTrack.SetSubComponent(True);');
    aSrc := FindAndReplace(aSrc, 'FTrack.Name := ''Track'';','//**FTrack.Name := ''Track'';');
    aSrc := FindAndReplace(aSrc, 'FThumb.Parent := FTrack;','//**FThumb.Parent := FTrack;');
    aSrc := FindAndReplace(aSrc, 'FThumb.Stored := False;','//**FThumb.Stored := False;');
    aSrc := FindAndReplace(aSrc, 'FThumb.SetSubComponent(True);','//**FThumb.SetSubComponent(True);');
    aSrc := FindAndReplace(aSrc, 'FThumb.Name := ''Thumb'';','//**FThumb.Name := ''Thumb'';');
    aSrc := FindAndReplace(aSrc, 'Result.Parent := self;','//**Result.Parent := self;');
    aSrc := FindAndReplace(aSrc, 'Result.Stored := False;','//**Result.Stored := False;');
    aSrc := FindAndReplace(aSrc, 'Result.//**Locked := True;','//**Result.Locked := True;');
    aSrc := FindAndReplace(aSrc, 'Result.HitTest := False;','//**Result.HitTest := False;');
    aSrc := FindAndReplace(aSrc, 'Result.SetSubComponent(True);','//**Result.SetSubComponent(True);');
    aSrc := FindAndReplace(aSrc, 'LIndicator.Parent := Self;','//**LIndicator.Parent := Self;');
    aSrc := FindAndReplace(aSrc, 'LIndicator.Stored := False;','//**LIndicator.Stored := False;');
    aSrc := FindAndReplace(aSrc, 'LIndicator.//**Locked := True;','//**LIndicator.Locked := True;');
    aSrc := FindAndReplace(aSrc, 'LIndicator.HitTest := False;','//**LIndicator.HitTest := False;');
    aSrc := FindAndReplace(aSrc, 'FActiveIndicatorControl.Parent := Self;','//**FActiveIndicatorControl.Parent := Self;');
    aSrc := FindAndReplace(aSrc, 'FActiveIndicatorControl.Stored := False;','//**FActiveIndicatorControl.Stored := False;');
    aSrc := FindAndReplace(aSrc, 'FActiveIndicatorControl.//**Locked := True;','//**FActiveIndicatorControl.Locked := True;');
    aSrc := FindAndReplace(aSrc, 'FActiveIndicatorControl.HitTest := False;','//**FActiveIndicatorControl.HitTest := False;');
    aSrc := FindAndReplace(aSrc, 'SetAcceptsControls(False);', '//**SetAcceptsControls(False);');
    aSrc := FindAndReplace(aSrc, 'SetAcceptsControls(True);', '//**SetAcceptsControls(True);');
    aSrc := FindAndReplace(aSrc, 'function GetParentedVisible: Boolean; override;','//**function GetParentedVisible: Boolean; override;');
    aSrc := FindAndReplace(aSrc, 'procedure DoRootChanged; override;','//**procedure DoRootChanged; override;');
    aSrc := FindAndReplace(aSrc, 'procedure Loaded; override;', '//**procedure Loaded; override;');
    aSrc := FindAndReplace(aSrc, 'Create(AOwner: TComponent)', 'Create(const AOwner: TObject)');
    aSrc := FindAndReplace(aSrc, 'procedure SetName(const Value: TComponentName); override;','//**procedure SetName(const Value: TComponentName); override;');
    aSrc := FindAndReplace(aSrc, 'function HasUnconstrainedAutosizeWidth: Boolean; virtual;','function HasUnconstrainedAutosizeWidth: Boolean; override;');
    aSrc := FindAndReplace(aSrc, 'function HasUnconstrainedAutosizeHeight: Boolean; virtual;','function HasUnconstrainedAutosizeHeight: Boolean; override;');
    aSrc := FindAndReplace(aSrc, '(csDestroying in componentState)','IsDestroying');
    aSrc := FindAndReplace(aSrc, '(not (csDestroying in FPageController.ComponentState))','(not (FPageController.IsDestroying))');
    aSrc := FindAndReplace(aSrc, 'if not (csLoading in ComponentState) and Assigned(FOnChange) then','//**if {not (csLoading in ComponentState) and} Assigned(FOnChange) then');
    aSrc := FindAndReplace(aSrc, 'If ([csLoading, csDestroying, csDesigning] * Owner.parent.ComponentState <> []) then Exit;','If Owner.parent.IsDestroying then Exit;');
    aSrc := FindAndReplace(aSrc, '(not (csLoading in ComponentState)) and','//**(not (csLoading in ComponentState)) and');
    aSrc := FindAndReplace(aSrc, 'if csLoading in ComponentState then exit;','//**if csLoading in ComponentState then exit;');
    aSrc := FindAndReplace(aSrc, 'If (csLoading in componentState) or','If //**(csLoading in componentState) or');
    aSrc := FindAndReplace(aSrc, 'function IsOwnerLoading: Boolean;','//**function IsOwnerLoading: Boolean;');
    aSrc := FindAndReplace(aSrc, 'if not IsOwnerLoading then','//**if not IsOwnerLoading then');
    aSrc := FindAndReplace(aSrc, 'var LHalfHeight := GetDefaultSize.Height / 2;','//**var LHalfHeight := GetDefaultSize.Height / 2;');
    aSrc := FindAndReplace(aSrc, 'var LMarginsChange := Result.Margins.OnChange;','//**var LMarginsChange := Result.Margins.OnChange;');
    aSrc := FindAndReplace(aSrc, 'Result.Margins.OnChange := nil;','//**Result.Margins.OnChange := nil;');
    aSrc := FindAndReplace(aSrc, 'Result.Margins.DefaultValue := TrectF.Create(0,LHalfHeight-1,0,LHalfHeight-1);','//**Result.Margins.DefaultValue := TrectF.Create(0,LHalfHeight-1,0,LHalfHeight-1);');
    aSrc := FindAndReplace(aSrc, 'Result.Margins.Rect := Result.Margins.DefaultValue;','//**Result.Margins.Rect := Result.Margins.DefaultValue;');
    aSrc := FindAndReplace(aSrc, 'Result.Margins.OnChange := LMarginsChange;','//**Result.Margins.OnChange := LMarginsChange;');
    aSrc := FindAndReplace(aSrc, '(LocalRect)','(LocalRect.ReducePrecision)');
    aSrc := FindAndReplace(aSrc, '(LocalRect,','(LocalRect.ReducePrecision,');
    aSrc := FindAndReplace(aSrc, ' LocalRect,',' LocalRect.ReducePrecision,');
    aSrc := FindAndReplace(aSrc, ' LocalRect;',' LocalRect.ReducePrecision;');
    aSrc := FindAndReplace(aSrc, '.LocalRect;','.LocalRect.ReducePrecision;');
    aSrc := FindAndReplace(aSrc, ' LocalRect'#13#10, 'LocalRect.ReducePrecision'#13#10);
    aSrc := FindAndReplace(aSrc, 'Result := LPageViewClass.Create(Self);','Result := LPageViewClass.Create(nil);');
    aSrc := FindAndReplace(
              aSrc,
              '    if FForm <> nil then'#13#10+
              '      TALFMXViewBaseAccessPrivate(WindowHandleToPlatform(FForm.Handle).Handle).FShouldIgnoreNextClick := False;',
              '    //**if FForm <> nil then'#13#10+
              '    //**  TALFMXViewBaseAccessPrivate(WindowHandleToPlatform(FForm.Handle).Handle).FShouldIgnoreNextClick := False;');
    aSrc := FindAndReplace(
              aSrc,
              '  if (Owner <> nil) and (Owner is TALDynamicControl) then'#13#10+
              '    FOwner := TALDynamicControl(Owner)'#13#10+
              '  else'#13#10+
              '    //**FOwner := nil;',
              '  //**if (Owner <> nil) and (Owner is TALDynamicControl) then'#13#10+
              '  //**  FOwner := TALDynamicControl(Owner)'#13#10+
              '  //**else'#13#10+
              '  //**  FOwner := nil;');
    aSrc := FindAndReplace(
              aSrc,
              '  if not (csLoading in componentState) then'#13#10+
              '    SetActivePageIndex(AValue, TPageTransition.None)'#13#10+
              '  else'#13#10+
              '    FActivePageIndex := AValue;',
              '  //**if not (csLoading in componentState) then'#13#10+
              '    SetActivePageIndex(AValue, TPageTransition.None)'#13#10+
              '  //**else'#13#10+
              '  //**  FActivePageIndex := AValue;');
    aSrc := FindAndReplace(
              aSrc,
              '  if (FPageController.Scene <> nil) and'#13#10+
              '     (not (FPageController.IsDestroying)) then'#13#10+
              '    FPageController.Scene.ChangeScrollingState(FPageController, True);',
              '  //**if (FPageController.Scene <> nil) and'#13#10+
              '  //**   (not (FPageController.IsDestroying)) then'#13#10+
              '  //**  FPageController.Scene.ChangeScrollingState(FPageController, True);');
    aSrc := FindAndReplace(
              aSrc,
              '  if (FPageController.Scene <> nil) and'#13#10+
              '     (not (FPageController.IsDestroying)) then'#13#10+
              '    FPageController.Scene.ChangeScrollingState(nil, False);',
              '  //**if (FPageController.Scene <> nil) and'#13#10+
              '  //**   (not (FPageController.IsDestroying)) then'#13#10+
              '  //**  FPageController.Scene.ChangeScrollingState(nil, False);');
    aSrc := FindAndReplace(
              aSrc,
              '  If not (AObject is TALDynamicPageView) then FPageController.AddObject(AObject)'#13#10+
              '  else begin'#13#10+
              '    inherited;'#13#10+
              '    if FPageController.PageIndicator <> nil then'#13#10+
              '      FPageController.PageIndicator.PageCountChanged(ControlsCount, FPageController.ActivePageIndex);'#13#10+
              '  end;',
              '  //**If not (AObject is TALDynamicPageView) then FPageController.AddObject(AObject)'#13#10+
              '  //**else begin'#13#10+
              '    inherited;'#13#10+
              '    if FPageController.PageIndicator <> nil then'#13#10+
              '      FPageController.PageIndicator.PageCountChanged(ControlsCount, FPageController.ActivePageIndex);'#13#10+
              '  //**end;');
    aSrc := FindAndReplace(
              aSrc,
              '  if (AObject is TALDynamicPageView) then FContent.AddObject(AObject)'#13#10+
              '  else inherited;',
              '  //**if (AObject is TALDynamicPageView) then FContent.AddObject(AObject)'#13#10+
              '  //**else inherited;'#13#10+
              '  inherited;');
    aSrc := FindAndReplace(
              aSrc,
              'procedure TALDynamicRangeTrackBar.TMinThumb.TouchTargetExpansionChanged(Sender: TObject);'#13#10+
              'begin'#13#10+
              '  if Assigned(FFormerTouchTargetExpansionChangedHandler) then'#13#10+
              '    FFormerTouchTargetExpansionChangedHandler(Sender);'#13#10+
              '  var LMaxThumb := TALDynamicRangeTrackBar(FCustomTrack).FMaxThumb;'#13#10+
              '  if LMaxThumb <> nil then'#13#10+
              '    LMaxThumb.TouchTargetExpansion.assign(TouchTargetExpansion);'#13#10+
              'end;',
              'procedure TALDynamicRangeTrackBar.TMinThumb.SetTouchTargetExpansion(const AValue: TRectF);'#13#10+
              'begin'#13#10+
              '  Inherited;'#13#10+
              '  var LMaxThumb := TALDynamicRangeTrackBar(FCustomTrack).FMaxThumb;'#13#10+
              '  if LMaxThumb <> nil then'#13#10+
              '    LMaxThumb.TouchTargetExpansion := TouchTargetExpansion;'#13#10+
              'end;');
    aSrc := FindAndReplace(
              aSrc,
              '  if SameText(TRadioButtonGroupMessage(M).GroupName, GroupName) and (Sender <> Self) and (Root <> nil) and'+#13#10+
              '     (not (Sender is TControl) or ((Sender as TControl).Root = Root)) then begin',
              '  if SameText(TRadioButtonGroupMessage(M).GroupName, GroupName) and (Sender <> Self) and (Host <> nil) and'+#13#10+
              '     (not (Sender is TALDynamicControl) or ((Sender as TALDynamicControl).Host = Host)) then begin');
    aSrc := FindAndReplace(
              aSrc,
              '  TALDynamicPageView = class(TALDynamicBaseRectangle)',
              '  TALDynamicPageController = class;'#13#10+
              #13#10+
              '  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}'#13#10+
              '  TALDynamicPageView = class(TALDynamicBaseRectangle)');
    aSrc := FindAndReplace(
              aSrc,
              '  TALDynamicPageController = class(TALDynamicBaseRectangle, IALScrollableControl, IItemsContainer)',
              '  TALDynamicPageViewClass = class of TALDynamicPageView;'#13#10+
              #13#10+
              '  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}'#13#10+
              '  TALDynamicPageController = class(TALDynamicBaseRectangle)');
    aSrc := FindAndReplace(
              aSrc,
              '        var LALChildControl: TALDynamicControl;'+#13#10+
              '        var LALChildControlAlign: TALAlignLayout;'+#13#10+
              '        If (LChildControl is TALDynamicControl) then begin'+#13#10+
              '          LALChildControl := TALDynamicControl(LChildControl);'+#13#10+
              '          LALChildControlAlign := LALChildControl.Align'+#13#10+
              '        end'+#13#10+
              '        else begin'+#13#10+
              '          LALChildControl := nil;'+#13#10+
              '          LALChildControlAlign := TALAlignLayout(LChildControl.Align);'+#13#10+
              '        end;',
              '        //**var LALChildControl: TALDynamicControl;'+#13#10+
              '        //**var LALChildControlAlign: TALAlignLayout;'+#13#10+
              '        //**If (LChildControl is TALDynamicControl) then begin'+#13#10+
              '        //**  LALChildControl := TALDynamicControl(LChildControl);'+#13#10+
              '        //**  LALChildControlAlign := LALChildControl.Align'+#13#10+
              '        //**end'+#13#10+
              '        //**else begin'+#13#10+
              '        //**  LALChildControl := nil;'+#13#10+
              '        //**  LALChildControlAlign := TALAlignLayout(LChildControl.Align);'+#13#10+
              '        //**end;'+#13#10+
              '        var LALChildControl := LChildControl;'+#13#10+
              '        var LALChildControlAlign := LALChildControl.Align;');
    aSrc := FindAndReplace(
              aSrc,
              '  function CheckAllChildrenAreReadyToDisplay(const AControl: TControl): boolean;'+#13#10+
              '  begin'+#13#10+
              '    Result := True;'+#13#10+
              '    for var I := 0 to AControl.ControlsCount - 1 do begin'+#13#10+
              '      if AControl.Controls[i] is TALDynamicControl then Result := TALDynamicControl(AControl.Controls[i]).IsReadyToDisplay(AStrict)'+#13#10+
              '      else Result := CheckAllChildrenAreReadyToDisplay(AControl.Controls[i]);'+#13#10+
              '      if not Result then exit;'+#13#10+
              '    end;'+#13#10+
              '  end;',
              '  function CheckAllChildrenAreReadyToDisplay(const AControl: TALDynamicControl): boolean;'+#13#10+
              '  begin'+#13#10+
              '    Result := True;'+#13#10+
              '    for var I := 0 to AControl.ControlsCount - 1 do begin'+#13#10+
              '      //**if AControl.Controls[i] is TALDynamicControl then Result := TALDynamicControl(AControl.Controls[i]).IsReadyToDisplay(AStrict)'+#13#10+
              '      //**else Result := CheckAllChildrenAreReadyToDisplay(AControl.Controls[i]);'+#13#10+
              '      Result := AControl.Controls[i].IsReadyToDisplay(AStrict);'+#13#10+
              '      if not Result then exit;'+#13#10+
              '    end;'+#13#10+
              '  end;');
    aSrc := FindAndReplace(
              aSrc,
              '    if (csDesigning in ComponentState) and FChecked then inherited SetChecked(Value) // allows check/uncheck in design-mode'+#13#10+
              '    else begin'+#13#10+
              '      if (not value) and fMandatory then exit;'+#13#10+
              '      inherited SetChecked(Value);'+#13#10+
              '      if Value then begin'+#13#10+
              '        var M := TRadioButtonGroupMessage.Create(GroupName);'+#13#10+
              '        TMessageManager.DefaultManager.SendMessage(Self, M, True);'+#13#10+
              '      end;'+#13#10+
              '    end;',
              '    //**if (csDesigning in ComponentState) and FChecked then inherited SetChecked(Value) // allows check/uncheck in design-mode'+#13#10+
              '    //**else begin'+#13#10+
              '      if (not value) and fMandatory then exit;'+#13#10+
              '      inherited SetChecked(Value);'+#13#10+
              '      if Value then begin'+#13#10+
              '        var M := TRadioButtonGroupMessage.Create(GroupName);'+#13#10+
              '        TMessageManager.DefaultManager.SendMessage(Self, M, True);'+#13#10+
              '      end;'+#13#10+
              '    //**end;');
    aSrc := FindAndReplace(
              aSrc,
              '  if (csDesigning in ComponentState) and not Locked and not FInPaintTo then'+#13#10+
              '  begin'+#13#10+
              '    var R := LocalRect.ReducePrecision;'+#13#10+
              '    system.types.InflateRect(R, -0.5, -0.5);'+#13#10+
              '    Canvas.DrawDashRect(R, 0, 0, AllCorners, AbsoluteOpacity, $A0909090);'+#13#10+
              '  end;',
              '  //**if (csDesigning in ComponentState) and not Locked and not FInPaintTo then'+#13#10+
              '  //**begin'+#13#10+
              '  //**  var R := LocalRect.ReducePrecision;'+#13#10+
              '  //**  system.types.InflateRect(R, -0.5, -0.5);'+#13#10+
              '  //**  Canvas.DrawDashRect(R, 0, 0, AllCorners, AbsoluteOpacity, $A0909090);'+#13#10+
              '  //**end;');
    aSrc := FindAndReplace(
              aSrc,
              '  if (csDesigning in ComponentState) and not Locked and not FInPaintTo then'+#13#10+
              '  begin'+#13#10+
              '    var R := LocalRect.ReducePrecision;'+#13#10+
              '    InflateRect(R, -0.5, -0.5);'+#13#10+
              '    Canvas.DrawDashRect(R, 0, 0, AllCorners, AbsoluteOpacity, $A0909090);'+#13#10+
              '  end;',
              '  //**if (csDesigning in ComponentState) and not Locked and not FInPaintTo then'+#13#10+
              '  //**begin'+#13#10+
              '  //**  var R := LocalRect.ReducePrecision;'+#13#10+
              '  //**  InflateRect(R, -0.5, -0.5);'+#13#10+
              '  //**  Canvas.DrawDashRect(R, 0, 0, AllCorners, AbsoluteOpacity, $A0909090);'+#13#10+
              '  //**end;');
    aSrc := FindAndReplace(
              aSrc,
              '  if (csDesigning in ComponentState) and not Locked then'+#13#10+
              '    DrawDesignBorder;',
              '  //**if (csDesigning in ComponentState) and not Locked then'+#13#10+
              '  //**  DrawDesignBorder;');
    aSrc := FindAndReplace(
              aSrc,
              '        if (csDesigning in ComponentState) and Supports(LChildControl, IDesignerControl) then'+#13#10+
              '          Continue;',
              '        //**if (csDesigning in ComponentState) and Supports(LChildControl, IDesignerControl) then'+#13#10+
              '        //**  Continue;');
    aSrc := FindAndReplace(
              aSrc,
              '    if not (csLoading in ComponentState) then begin'+#13#10+
              '      BeginUpdate;'+#13#10+
              '      Try'+#13#10+
              '        SetBounds(Left, Top, Height, Width);'+#13#10+
              '        Margins.Rect := SwapTopBottomWithLeftRight(Margins.Rect);'+#13#10+
              '        Padding.Rect := SwapTopBottomWithLeftRight(Padding.Rect);'+#13#10+
              '        if FActiveTrack <> nil then begin'+#13#10+
              '          FActiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(FActiveTrack.Margins.Rect);'+#13#10+
              '          FActiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(FActiveTrack.Padding.Rect);'+#13#10+
              '          FActiveTrack.Align := SwapAlign(FActiveTrack.Align);'+#13#10+
              '        end;'+#13#10+
              '        if FInactiveTrack <> nil then begin'+#13#10+
              '          FInactiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(FInactiveTrack.Margins.Rect);'+#13#10+
              '          FInactiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(FInactiveTrack.Padding.Rect);'+#13#10+
              '          FInactiveTrack.Align := SwapAlign(FInactiveTrack.Align);'+#13#10+
              '        end;'+#13#10+
              '        if FThumb <> nil then begin'+#13#10+
              '          FThumb.Margins.Rect := SwapTopBottomWithLeftRight(FThumb.Margins.Rect);'+#13#10+
              '          FThumb.padding.Rect := SwapTopBottomWithLeftRight(FThumb.padding.Rect);'+#13#10+
              '          FThumb.TouchTargetExpansion := SwapTopBottomWithLeftRight(FThumb.TouchTargetExpansion);'+#13#10+
              '          var LThumbWidth := FThumb.Width;'+#13#10+
              '          FThumb.Width := FThumb.Height;'+#13#10+
              '          FThumb.Height := LThumbWidth;'+#13#10+
              '          FThumb.Align := SwapAlign(FThumb.Align);'+#13#10+
              '        end;'+#13#10+
              '      Finally'+#13#10+
              '        EndUpdate;'+#13#10+
              '      End;'+#13#10+
              '    end'+#13#10+
              '    else begin'+#13#10+
              '      if FActiveTrack <> nil then'+#13#10+
              '        FActiveTrack.Align := SwapAlign(FActiveTrack.Align);'+#13#10+
              '      if FInactiveTrack <> nil then'+#13#10+
              '        FInactiveTrack.Align := SwapAlign(FInactiveTrack.Align);'+#13#10+
              '      if FThumb <> nil then'+#13#10+
              '        FThumb.Align := SwapAlign(FThumb.Align);'+#13#10+
              '    end;',
              '    //**if not (csLoading in ComponentState) then begin'+#13#10+
              '      BeginUpdate;'+#13#10+
              '      Try'+#13#10+
              '        SetBounds(Left, Top, Height, Width);'+#13#10+
              '        Margins.Rect := SwapTopBottomWithLeftRight(Margins.Rect);'+#13#10+
              '        Padding.Rect := SwapTopBottomWithLeftRight(Padding.Rect);'+#13#10+
              '        if FActiveTrack <> nil then begin'+#13#10+
              '          FActiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(FActiveTrack.Margins.Rect);'+#13#10+
              '          FActiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(FActiveTrack.Padding.Rect);'+#13#10+
              '          FActiveTrack.Align := SwapAlign(FActiveTrack.Align);'+#13#10+
              '        end;'+#13#10+
              '        if FInactiveTrack <> nil then begin'+#13#10+
              '          FInactiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(FInactiveTrack.Margins.Rect);'+#13#10+
              '          FInactiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(FInactiveTrack.Padding.Rect);'+#13#10+
              '          FInactiveTrack.Align := SwapAlign(FInactiveTrack.Align);'+#13#10+
              '        end;'+#13#10+
              '        if FThumb <> nil then begin'+#13#10+
              '          FThumb.Margins.Rect := SwapTopBottomWithLeftRight(FThumb.Margins.Rect);'+#13#10+
              '          FThumb.padding.Rect := SwapTopBottomWithLeftRight(FThumb.padding.Rect);'+#13#10+
              '          FThumb.TouchTargetExpansion := SwapTopBottomWithLeftRight(FThumb.TouchTargetExpansion);'+#13#10+
              '          var LThumbWidth := FThumb.Width;'+#13#10+
              '          FThumb.Width := FThumb.Height;'+#13#10+
              '          FThumb.Height := LThumbWidth;'+#13#10+
              '          FThumb.Align := SwapAlign(FThumb.Align);'+#13#10+
              '        end;'+#13#10+
              '      Finally'+#13#10+
              '        EndUpdate;'+#13#10+
              '      End;'+#13#10+
              '    //**end'+#13#10+
              '    //**else begin'+#13#10+
              '    //**  if FActiveTrack <> nil then'+#13#10+
              '    //**    FActiveTrack.Align := SwapAlign(FActiveTrack.Align);'+#13#10+
              '    //**  if FInactiveTrack <> nil then'+#13#10+
              '    //**    FInactiveTrack.Align := SwapAlign(FInactiveTrack.Align);'+#13#10+
              '    //**  if FThumb <> nil then'+#13#10+
              '    //**    FThumb.Align := SwapAlign(FThumb.Align);'+#13#10+
              '    //**end;');
     aSrc := FindAndReplace(
               aSrc,
               '    if not (csLoading in ComponentState) then begin'+#13#10+
               '      BeginUpdate;'+#13#10+
               '      Try'+#13#10+
               '        inherited;'+#13#10+
               '        if FMaxInactiveTrack <> nil then begin'+#13#10+
               '          FMaxInactiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(FMaxInactiveTrack.Margins.Rect);'+#13#10+
               '          FMaxInactiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(FMaxInactiveTrack.Padding.Rect);'+#13#10+
               '          FMaxInactiveTrack.Align := SwapAlign(FMaxInactiveTrack.Align);'+#13#10+
               '        end;'+#13#10+
               '        if FMaxThumb <> nil then begin'+#13#10+
               '          FMaxThumb.Margins.Rect := SwapTopBottomWithLeftRight(FMaxThumb.Margins.Rect);'+#13#10+
               '          FMaxThumb.padding.Rect := SwapTopBottomWithLeftRight(FMaxThumb.padding.Rect);'+#13#10+
               '          FMaxThumb.TouchTargetExpansion := SwapTopBottomWithLeftRight(FMaxThumb.TouchTargetExpansion);'+#13#10+
               '          var LMaxThumbWidth := FMaxThumb.Width;'+#13#10+
               '          FMaxThumb.Width := FMaxThumb.Height;'+#13#10+
               '          FMaxThumb.Height := LMaxThumbWidth;'+#13#10+
               '          FMaxThumb.Align := SwapAlign(FMaxThumb.Align);'+#13#10+
               '        end;'+#13#10+
               '      Finally'+#13#10+
               '        EndUpdate;'+#13#10+
               '      End;'+#13#10+
               '    end'+#13#10+
               '    else begin'+#13#10+
               '      inherited;'+#13#10+
               '      if FMaxInactiveTrack <> nil then'+#13#10+
               '        FMaxInactiveTrack.Align := SwapAlign(FMaxInactiveTrack.Align);'+#13#10+
               '      if FMaxThumb <> nil then'+#13#10+
               '        FMaxThumb.Align := SwapAlign(FMaxThumb.Align);'+#13#10+
               '    end;',
               '    //**if not (csLoading in ComponentState) then begin'+#13#10+
               '      BeginUpdate;'+#13#10+
               '      Try'+#13#10+
               '        inherited;'+#13#10+
               '        if FMaxInactiveTrack <> nil then begin'+#13#10+
               '          FMaxInactiveTrack.Margins.Rect := SwapTopBottomWithLeftRight(FMaxInactiveTrack.Margins.Rect);'+#13#10+
               '          FMaxInactiveTrack.Padding.Rect := SwapTopBottomWithLeftRight(FMaxInactiveTrack.Padding.Rect);'+#13#10+
               '          FMaxInactiveTrack.Align := SwapAlign(FMaxInactiveTrack.Align);'+#13#10+
               '        end;'+#13#10+
               '        if FMaxThumb <> nil then begin'+#13#10+
               '          FMaxThumb.Margins.Rect := SwapTopBottomWithLeftRight(FMaxThumb.Margins.Rect);'+#13#10+
               '          FMaxThumb.padding.Rect := SwapTopBottomWithLeftRight(FMaxThumb.padding.Rect);'+#13#10+
               '          FMaxThumb.TouchTargetExpansion := SwapTopBottomWithLeftRight(FMaxThumb.TouchTargetExpansion);'+#13#10+
               '          var LMaxThumbWidth := FMaxThumb.Width;'+#13#10+
               '          FMaxThumb.Width := FMaxThumb.Height;'+#13#10+
               '          FMaxThumb.Height := LMaxThumbWidth;'+#13#10+
               '          FMaxThumb.Align := SwapAlign(FMaxThumb.Align);'+#13#10+
               '        end;'+#13#10+
               '      Finally'+#13#10+
               '        EndUpdate;'+#13#10+
               '      End;'+#13#10+
               '    //**end'+#13#10+
               '    //**else begin'+#13#10+
               '    //**  inherited;'+#13#10+
               '    //**  if FMaxInactiveTrack <> nil then'+#13#10+
               '    //**    FMaxInactiveTrack.Align := SwapAlign(FMaxInactiveTrack.Align);'+#13#10+
               '    //**  if FMaxThumb <> nil then'+#13#10+
               '    //**    FMaxThumb.Align := SwapAlign(FMaxThumb.Align);'+#13#10+
               '    //**end;');
    aSrc := FindAndReplace(
              aSrc,
              '    var LOldOnResize := OnResize;'+#13#10+
              '    var LOldOnResized := OnResized;'+#13#10+
              '    if CSLoading in componentState then begin'+#13#10+
              '      OnResize := DelayOnResize;'+#13#10+
              '      OnResized := DelayOnResized;'+#13#10+
              '    end;'+#13#10+
              '    try',
              '    //**var LOldOnResize := OnResize;'+#13#10+
              '    //**var LOldOnResized := OnResized;'+#13#10+
              '    //**if CSLoading in componentState then begin'+#13#10+
              '    //**  OnResize := DelayOnResize;'+#13#10+
              '    //**  OnResized := DelayOnResized;'+#13#10+
              '    //**end;'+#13#10+
              '    //**try');
    aSrc := FindAndReplace(
              aSrc,
              '    finally'+#13#10+
              '      OnResize := LOldOnResize;'+#13#10+
              '      OnResized := LOldOnResized;'+#13#10+
              '    end;',
              '    //**finally'+#13#10+
              '    //**  OnResize := LOldOnResize;'+#13#10+
              '    //**  OnResized := LOldOnResized;'+#13#10+
              '    //**end;');
    aSrc := FindAndReplace(
              aSrc,
              '  var LControlAbsolutePos := LocalToAbsolute(TPointF.Zero);'+#13#10+
              '  if (FFocusOnMouseUp) and'+#13#10+
              '     (FMouseDownAtLowVelocity) and'+#13#10+
              '     (abs(FControlAbsolutePosAtMouseDown.x - LControlAbsolutePos.x) <= TALScrollEngine.DefaultTouchSlop) and'+#13#10+
              '     (abs(FControlAbsolutePosAtMouseDown.y - LControlAbsolutePos.y) <= TALScrollEngine.DefaultTouchSlop) and'+#13#10+
              '     (not (csDesigning in ComponentState)) and'+#13#10+
              '     (not FIsFocused) then'+#13#10+
              '    SetFocus;',
              '  //**var LControlAbsolutePos := LocalToAbsolute(TPointF.Zero);'+#13#10+
              '  //**if (FFocusOnMouseUp) and'+#13#10+
              '  //**   (FMouseDownAtLowVelocity) and'+#13#10+
              '  //**   (abs(FControlAbsolutePosAtMouseDown.x - LControlAbsolutePos.x) <= TALScrollEngine.DefaultTouchSlop) and'+#13#10+
              '  //**   (abs(FControlAbsolutePosAtMouseDown.y - LControlAbsolutePos.y) <= TALScrollEngine.DefaultTouchSlop) and'+#13#10+
              '  //**   (not (csDesigning in ComponentState)) and'+#13#10+
              '  //**   (not FIsFocused) then'+#13#10+
              '  //**  SetFocus;');
    aSrc := FindAndReplace(
              aSrc,
              '    if not (csLoading in ComponentState) then begin'+#13#10+
              '      if FInternalState <> vpsIdle then begin'+#13#10+
              '        var LVideoPlayerEngine: TALBaseVideoPlayer := TALAsyncVideoPlayer.create;'+#13#10+
              '        LVideoPlayerEngine.Looping := fVideoPlayerEngine.Looping;'+#13#10+
              '        LVideoPlayerEngine.PlaybackSpeed := fVideoPlayerEngine.PlaybackSpeed;'+#13#10+
              '        LVideoPlayerEngine.Volume := fVideoPlayerEngine.Volume;'+#13#10+
              '        LVideoPlayerEngine.OnError := fVideoPlayerEngine.OnError;'+#13#10+
              '        LVideoPlayerEngine.OnPrepared := fVideoPlayerEngine.OnPrepared;'+#13#10+
              '        LVideoPlayerEngine.OnCompletion := fVideoPlayerEngine.OnCompletion;'+#13#10+
              '        LVideoPlayerEngine.OnVideoSizeChanged := fVideoPlayerEngine.OnVideoSizeChanged;'+#13#10+
              '        LVideoPlayerEngine.OnFrameAvailable := DoOnFrameAvailable;'+#13#10+
              '        //--'+#13#10+
              '        ALFreeAndNil(fVideoPlayerEngine);'+#13#10+
              '        fVideoPlayerEngine := LVideoPlayerEngine;'+#13#10+
              '      end;'+#13#10+
              '      if FDataSource <> '''' then begin'+#13#10+
              '        FVideoPlayerEngine.Prepare(FDataSource);'+#13#10+
              '        if AutoStartMode = TAutoStartMode.WhenPrepared then'+#13#10+
              '          FVideoPlayerEngine.Start;'+#13#10+
              '      end;'+#13#10+
              '    end;',
              '    //**if not (csLoading in ComponentState) then begin'+#13#10+
              '      if FInternalState <> vpsIdle then begin'+#13#10+
              '        var LVideoPlayerEngine: TALBaseVideoPlayer := TALAsyncVideoPlayer.create;'+#13#10+
              '        LVideoPlayerEngine.Looping := fVideoPlayerEngine.Looping;'+#13#10+
              '        LVideoPlayerEngine.PlaybackSpeed := fVideoPlayerEngine.PlaybackSpeed;'+#13#10+
              '        LVideoPlayerEngine.Volume := fVideoPlayerEngine.Volume;'+#13#10+
              '        LVideoPlayerEngine.OnError := fVideoPlayerEngine.OnError;'+#13#10+
              '        LVideoPlayerEngine.OnPrepared := fVideoPlayerEngine.OnPrepared;'+#13#10+
              '        LVideoPlayerEngine.OnCompletion := fVideoPlayerEngine.OnCompletion;'+#13#10+
              '        LVideoPlayerEngine.OnVideoSizeChanged := fVideoPlayerEngine.OnVideoSizeChanged;'+#13#10+
              '        LVideoPlayerEngine.OnFrameAvailable := DoOnFrameAvailable;'+#13#10+
              '        //--'+#13#10+
              '        ALFreeAndNil(fVideoPlayerEngine);'+#13#10+
              '        fVideoPlayerEngine := LVideoPlayerEngine;'+#13#10+
              '      end;'+#13#10+
              '      if FDataSource <> '''' then begin'+#13#10+
              '        FVideoPlayerEngine.Prepare(FDataSource);'+#13#10+
              '        if AutoStartMode = TAutoStartMode.WhenPrepared then'+#13#10+
              '          FVideoPlayerEngine.Start;'+#13#10+
              '      end;'+#13#10+
              '    //**end;');
    //--
    var LSrcLst := TALStringListA.Create;
    Try
      LSrcLst.Text := aSrc;
      var i := 0;
      While I <= LSrcLst.Count - 1 do begin
        var LSrcLine := LSrcLst[i];
        //--
        if (alposIgnoreCaseA('.Loaded;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.DoEnter;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.DoExit;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('TALDynamicExtendedControl.IsSizeStored: Boolean;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.DoRootChanged;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.SetNewScene(AScene: IScene);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.IsOwnerLoading: Boolean;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('TALDynamicExtendedControl.SetAlign(const Value: TALAlignLayout);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.GetParentedVisible: Boolean;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.GetAlign: TALAlignLayout;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.IsFocusedChanged;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('TALDynamicExtendedControl.MarginsChangedHandler(Sender: TObject);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('TALDynamicExtendedControl.MarginsChanged;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('._GetCanFocus: Boolean;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('._SetCanFocus(const Value: Boolean);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('._SetTabStop(const Value: Boolean);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.TContent.IsVisibleObject(const AObject: TControl): Boolean;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('TALDynamicExtendedControl.SetScale(const AValue: TPosition)', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('TALDynamicExtendedControl.ScaleChangedHandler(Sender: TObject)', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.GetPivot: TPosition;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.SetPivot(const Value: TPosition);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.DoMatrixChanged(Sender: TObject);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.GetAbsoluteDisplayedRect: TRectF;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.SetName(const Value: TComponentName);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.GetItemsCount: Integer;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.GetItem(const AIndex: Integer)', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.DoDeleteChildren;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.GetTabListClass: TTabListClass;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.GetTabStopController: ITabStopController;', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.KeyDown(var Key: Word; var KeyChar: System.WideChar; Shift: TShiftState);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.DelayOnResize(Sender: TObject);', ALTrim(LSrcLine)) > 0) or
           (alposIgnoreCaseA('.DelayOnResized(Sender: TObject);', ALTrim(LSrcLine)) > 0) then begin
          While I <= LSrcLst.Count - 1 do begin
            LSrcLine := LSrcLst[i];
            LSrcLst[i] := '//**' + LSrcLst[i];
            if ALSameTextA(LSrcLine, 'end;') then Break;
            inc(i);
          end;
        end
        //--
        else if ALSameTextA(ALTrim(LSrcLine), 'If (integer(FAlign) >= integer(TALAlignLayout.TopCenter)) and') then begin
          var P1 := ALPosA('If (integer(FAlign) >= integer(TALAlignLayout.TopCenter)) and', LSrcLine);
          var LEndStr: ansiString := '';
          for var J := 1 to P1 - 1 do LEndStr := LEndStr + ' ';
          LEndStr := LEndStr + 'end;';
          While I <= LSrcLst.Count - 1 do begin
            LSrcLine := LSrcLst[i];
            LSrcLst[i] := AlCopyStr(LSrcLine, 1, P1-1) + '//**' + AlCopyStr(LSrcLine, P1, MAxint);
            if ALSameTextA(LSrcLine, LEndStr) then Break;
            inc(i);
          end;
        end
        //--
        else if ALSameTextA(ALTrim(LSrcLine), 'if (not FFocusOnMouseDown) or (FFocusOnMouseUp) or (not FMouseDownAtLowVelocity) then begin') then begin
          var P1 := ALPosA('if (not FFocusOnMouseDown) or (FFocusOnMouseUp) or (not FMouseDownAtLowVelocity) then begin', LSrcLine);
          While I <= LSrcLst.Count - 1 do begin
            LSrcLine := LSrcLst[i];
            LSrcLst[i] := AlCopyStr(LSrcLine, 1, P1-1) + '//**' + AlCopyStr(LSrcLine, P1, MAxint);
            if ALSameTextA(ALTrim(LSrcLine), 'else') then Break;
            inc(i);
          end;
        end
        //--
        else if ALSameTextA(ALTrim(LSrcLine), '{$IF defined(ALBackwardCompatible)}') then begin
          var P1 := ALPosA('{$IF defined(ALBackwardCompatible)}', LSrcLine);
          While I <= LSrcLst.Count - 1 do begin
            LSrcLine := LSrcLst[i];
            LSrcLst[i] := AlCopyStr(LSrcLine, 1, P1-1) + '//**' + AlCopyStr(LSrcLine, P1, MAxint);
            if ALSameTextA(ALTrim(LSrcLine), '{$ENDIF}') then Break;
            inc(i);
          end;
        end;
        inc(i);
      end;
      aSrc := ALTrim(LSrcLst.Text);
    Finally
      ALFreeAndNil(LSrcLst);
    End;
    //--
    aSrc := AddDefaultBoundsClass(aSrc, 'TALDynamicSwitch.TThumb', 'Margins', '4,4,4,4');
    aSrc := AddDefaultBoundsClass(aSrc, 'TALDynamicButton', 'Padding', '12{Left}, 6{Top}, 12{Right}, 6{Bottom}');
    aSrc := AddDefaultBoundsClass(aSrc, 'TALDynamicToggleButton', 'Padding', '12{Left}, 6{Top}, 12{Right}, 6{Bottom}');
    aSrc := AddDefaultBoundsClass(aSrc, 'TALDynamicCustomTrack.TValueIndicator', 'Margins', '6{Left}, 4{Top}, 6{Right}, 4{Bottom}');
    aSrc := AddDefaultBoundsClass(aSrc, 'TALDynamicCustomTrack.TValueIndicator', 'Padding', '16{Left}, 12{Top}, 16{Right}, 12{Bottom}');
    aSrc := AddDefaultBoundsClass(aSrc, 'TALDynamicCustomTrack.TTrack', 'Margins', '0{Left}, 15{Top}, 0{Right}, 15{Bottom}');
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function ExtractClassInterface(Const aSrc: ansiString; Const AClassName: AnsiString): AnsiString;
  begin

    //  TALShape = class(TALControl)
    //  strict private
    //    FFill: TALBrush;
    //    FStroke: TALStrokeBrush;
    //    fShadow: TALShadow;
    //    function GetFill: TALBrush;
    //    procedure SetFill(const Value: TALBrush);
    //    function GetStroke: TALStrokeBrush;
    //    procedure SetStroke(const Value: TALStrokeBrush);
    //    function GetShadow: TALShadow;
    //    procedure SetShadow(const Value: TALShadow);
    //  protected
    //    procedure FillChanged(Sender: TObject); virtual;
    //    procedure StrokeChanged(Sender: TObject); virtual;
    //    procedure ShadowChanged(Sender: TObject); virtual;
    //  public
    //    constructor Create(AOwner: TComponent); override;
    //    destructor Destroy; override;
    //    procedure AlignToPixel; override;
    //    property Fill: TALBrush read GetFill write SetFill;
    //    property Stroke: TALStrokeBrush read GetStroke write SetStroke;
    //    property Shadow: TALShadow read GetShadow write SetShadow;
    //  end;

    Var P1 := AlposIgnoreCaseA('  '+AClassName+' = class(', aSrc); // TALShape = class(TALControl)
    If P1 <= low(aSrc) then
      raise Exception.Create('Error BEDEF98F-7167-459E-B26C-1F30FC4B43DC');
    inc(P1,2); //  TALShape = class(TALControl)
               //  ^P1
    var LIndent: AnsiString := '';
    While (P1 > low(aSrc)) and (not (aSrc[P1-1] in [#13, #10])) do begin
      LIndent := aSrc[P1-1] + LIndent;
      dec(P1); //  TALShape = class(TALControl)
               //^P1
    end;
    If P1 <= low(aSrc) then raise Exception.Create('Error BEDEF98F-7167-459E-B26C-1F30FC4B43DC');
    var P2 := AlposIgnoreCaseA(#13#10+LIndent+'end;', aSrc, P1); // end;
    If P2 <= 0 then raise Exception.Create('Error 4514C0C2-F078-4239-A711-408DA0C10BEC');
    inc(P2, length(#13#10+LIndent+'end;'));
    Result := '{~~~~}' +#13#10+ AlCopyStr(aSrc, P1, P2 - P1);

  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function ExtractClassImplementation(Const aSrc: ansiString; Const AClassName: AnsiString): AnsiString;
  begin

    //{*********************************}
    //{$IF defined(ALBackwardCompatible)}
    //constructor TALShape.Create(AOwner: TComponent);
    //begin
    //  inherited;
    //  FFill := TALBrush.Create($FFE0E0E0);
    //  FFill.OnChanged := FillChanged;
    //  FStroke := TALStrokeBrush.Create($FF000000);
    //  FStroke.OnChanged := StrokeChanged;
    //  fShadow := TALShadow.Create;
    //  fShadow.OnChanged := ShadowChanged;
    //end;
    //{$ENDIF}

    Result := '';
    Var P1 := 0;
    While true do begin
      P1 := AlposIgnoreCaseA(' '+AClassName+'.', aSrc, P1+1); //constructor TALShape.Create(AOwner: TComponent);
      If P1 <= low(aSrc) then break;                          //           ^P1
      //--
      var P0 := P1;
      While (P0 > low(aSrc)) and (not (aSrc[P0] in [#13, #10])) do dec(P0);
      If P0 <= low(aSrc) then raise Exception.Create('Error 0B02D0D7-D561-4C76-B3BB-630BB644D36F');
      inc(P0); //constructor TALShape.Create(AOwner: TComponent);
               //^P0        ^P1
      var LMethodspecifier := ALTrim(ALcopyStr(aSrc, P0, P1-P0)); //constructor
      If (not ALSameTextA(LMethodspecifier, 'procedure')) and
         (not ALSameTextA(LMethodspecifier, 'function')) and
         (not ALSameTextA(LMethodspecifier, 'class procedure')) and
         (not ALSameTextA(LMethodspecifier, 'class function')) and
         (not ALSameTextA(LMethodspecifier, 'constructor')) and
         (not ALSameTextA(LMethodspecifier, 'destructor')) then
        continue;
      P1 := P0; //constructor TALShape.Create(AOwner: TComponent);
                //^P1
      While (P1 > low(aSrc)) and (AlPosA(#13#10#13#10, aSrc, P1) <> P1) do dec(P1);
      If P1 <= low(aSrc) then raise Exception.Create('Error F6CFAE13-4FB3-4BF3-BFF1-DE626FFB1615');
      //--
      var P2 := AlposIgnoreCaseA(#13#10'end;', aSrc, P1); //#13#10end;
      If P2 <= 0 then raise Exception.Create('Error 0524A10F-F395-48DF-ABA4-65D7731FD77D');
      inc(P2, length(#13#10'end;'));
      While (P2 < High(aSrc)) and (AlPosA(#13#10#13#10, aSrc, P2) <> P2) do inc(P2);
      If P2 >= High(aSrc) then raise Exception.Create('Error 08829838-0D8C-426B-922E-55903082066E');
      Result := Result + #13#10#13#10 + ALTrim(AlCopyStr(aSrc, P1, P2 - P1));
      P1 := P2;
    end;
    Result := ALTrim(Result);

  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  procedure ExtractClass(Const aSrc: ansiString; Const AClassName: AnsiString; var AWholeInterface, AWholeImplementation, AOutputInterface, OutputImplementation: AnsiString);
  begin
    var LInterface := ExtractClassInterface(aSrc, AClassName);
    var LImplementation := ExtractClassImplementation(aSrc, AClassName);
    AWholeInterface := ALTrim(AWholeInterface + #13#10#13#10 + LInterface);
    AWholeImplementation := ALTrim(AWholeImplementation + #13#10#13#10 + LImplementation);
    AOutputInterface := ALTrim(AOutputInterface + #13#10#13#10 + LInterface);
    OutputImplementation := ALTrim(OutputImplementation + #13#10#13#10 + LImplementation);
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  procedure UpdateUnit(var ASource: AnsiString; const AUnitName: String);
  begin
    var Lboundary: AnsiString := #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}('+AnsiString(AUnitName)+')'#13#10;
    var P1:= alposA(Lboundary,ASource);
    if (P1 <= 0) then raise Exception.Create('Error F72CBC76-F79E-4A90-8C17-1B9D55DA5CA8');
    var P2 := alposA(Lboundary,ASource, P1 + 1);
    if (P2 <= 0) then raise Exception.Create('Error 63E75E8E-E239-47EB-8586-71C2C82EC642');
    var LOutputInterface := ALCopyStr(ASource, P1, P2 - P1);
    var P3 := alposA(Lboundary,ASource, P2 + 1);
    if (P3 <= 0) then raise Exception.Create('Error BBB8D061-BF0A-42A3-B602-F18636EC3907');
    var LOutputImplementation := ALCopyStr(ASource, P2, P3 - P2);
    //-----
    LOutputInterface := ALTrim(ALStringReplaceA(LOutputInterface,Lboundary,'', [RFReplaceALL]));
    LOutputInterface := 'type'#13#10#13#10'  ' + LOutputInterface;
    LOutputImplementation := ALTrim(ALStringReplaceA(LOutputImplementation,Lboundary,'', [RFReplaceALL]));
    //-----
    NormalizeSourceCode(LOutputInterface);
    NormalizeSourceCode(LOutputImplementation);
    //-----
    var LUnitSourceCode: AnsiString := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\'+AUnitName);
    ReplaceAutoGeneratedRegion(LUnitSourceCode{ASource}, 1{ARegionNumber}, ALTrim(LOutputInterface){AReplacementText});
    ReplaceAutoGeneratedRegion(LUnitSourceCode{ASource}, 2{ARegionNumber}, ALTrim(LOutputImplementation){AReplacementText});
    ALSaveStringToFile(LUnitSourceCode, ALgetModulePathW + '\..\..\Source\'+AUnitName);
  end;

begin

  var LWholeInterface: AnsiString := '';
  var LWholeImplementation: AnsiString := '';
  //-----
  var LAlcinoeFMXControlsPas := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.Controls.pas');
  LAlcinoeFMXControlsPas := FindAndReplace(LAlcinoeFMXControlsPas, 'TALControl = class(TControl)', 'TALDynamicExtendedControl = class(TALDynamicControl)');
  LAlcinoeFMXControlsPas := FindAndReplace(LAlcinoeFMXControlsPas, ' TALControl.', ' TALDynamicExtendedControl.');
  var LOutputFMXControlsInterface: AnsiString := '';
  var LOutputFMXControlsImplementation: AnsiString := '';
  ExtractClass(LAlcinoeFMXControlsPas, 'TALDynamicExtendedControl', LWholeInterface, LWholeImplementation, LOutputFMXControlsInterface, LOutputFMXControlsImplementation);
  ExtractClass(LAlcinoeFMXControlsPas, 'TALContent', LWholeInterface, LWholeImplementation, LOutputFMXControlsInterface, LOutputFMXControlsImplementation);
  //-----
  var LAlcinoeFMXObjectsPas := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.Objects.pas');
  var LOutputFMXObjectsInterface: AnsiString := '';
  var LOutputFMXObjectsImplementation: AnsiString := '';
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALShape', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALImage', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALAnimatedImage', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALBaseRectangle', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALRectangle', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALCircle', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALLine', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALBaseText', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  ExtractClass(LAlcinoeFMXObjectsPas, 'TALText', LWholeInterface, LWholeImplementation, LOutputFMXObjectsInterface, LOutputFMXObjectsImplementation);
  //-----
  var LAlcinoeFMXCommonPas := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.Common.pas');
  var LOutputFMXCommonInterface: AnsiString := '';
  var LOutputFMXCommonImplementation: AnsiString := '';
  ExtractClass(LAlcinoeFMXCommonPas, 'TALBaseStateStyle', LWholeInterface, LWholeImplementation, LOutputFMXCommonInterface, LOutputFMXCommonImplementation);
  ExtractClass(LAlcinoeFMXCommonPas, 'TALBaseStateStyles', LWholeInterface, LWholeImplementation, LOutputFMXCommonInterface, LOutputFMXCommonImplementation);
  //-----
  var LAlcinoeFMXStdCtrlsPas := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.StdCtrls.pas');
  var LOutputFMXStdCtrlsInterface: AnsiString := '';
  var LOutputFMXStdCtrlsImplementation: AnsiString := '';
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALAniIndicator', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALBaseCheckBox', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALCheckBox', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALRadioButton', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALSwitch', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALButton', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALToggleButton', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALCustomTrack', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALTrackBar', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALRangeTrackBar', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALCustomScrollBar', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  ExtractClass(LAlcinoeFMXStdCtrlsPas, 'TALScrollBar', LWholeInterface, LWholeImplementation, LOutputFMXStdCtrlsInterface, LOutputFMXStdCtrlsImplementation);
  //-----
  var LAlcinoeFMXVideoPlayerPas := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.VideoPlayer.pas');
  var LOutputFMXVideoPlayerInterface: AnsiString := '';
  var LOutputFMXVideoPlayerImplementation: AnsiString := '';
  ExtractClass(LAlcinoeFMXVideoPlayerPas, 'TALVideoPlayerSurface', LWholeInterface, LWholeImplementation, LOutputFMXVideoPlayerInterface, LOutputFMXVideoPlayerImplementation);
  //-----
  var LAlcinoeFMXLayoutsPas := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.Layouts.pas');
  var LOutputFMXLayoutsInterface: AnsiString := '';
  var LOutputFMXLayoutsImplementation: AnsiString := '';
  ExtractClass(LAlcinoeFMXLayoutsPas, 'TALLayout', LWholeInterface, LWholeImplementation, LOutputFMXLayoutsInterface, LOutputFMXLayoutsImplementation);
  //-----
  var LAlcinoeFMXPagecontrollerPas := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.PageController.pas');
  var LOutputFMXPagecontrollerInterface: AnsiString := '';
  var LOutputFMXPagecontrollerImplementation: AnsiString := '';
  ExtractClass(LAlcinoeFMXPagecontrollerPas, 'TALBasePageIndicator', LWholeInterface, LWholeImplementation, LOutputFMXPagecontrollerInterface, LOutputFMXPagecontrollerImplementation);
  ExtractClass(LAlcinoeFMXPagecontrollerPas, 'TALPageIndicator', LWholeInterface, LWholeImplementation, LOutputFMXPagecontrollerInterface, LOutputFMXPagecontrollerImplementation);
  ExtractClass(LAlcinoeFMXPagecontrollerPas, 'TALPageView', LWholeInterface, LWholeImplementation, LOutputFMXPagecontrollerInterface, LOutputFMXPagecontrollerImplementation);
  ExtractClass(LAlcinoeFMXPagecontrollerPas, 'TALPageController', LWholeInterface, LWholeImplementation, LOutputFMXPagecontrollerInterface, LOutputFMXPagecontrollerImplementation);
  //-----
  var LTmpSrcCode :=  #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}'#13#10+
                      LWholeInterface +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}'#13#10+
                      LWholeImplementation +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}'#13#10+
                      //--
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Controls.pas)'#13#10+
                      LOutputFMXControlsInterface +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Controls.pas)'#13#10+
                      LOutputFMXControlsImplementation +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Controls.pas)'#13#10+
                      //--
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Objects.pas)'#13#10+
                      LOutputFMXObjectsInterface +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Objects.pas)'#13#10+
                      LOutputFMXObjectsImplementation +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Objects.pas)'#13#10+
                      //--
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Common.pas)'#13#10+
                      LOutputFMXCommonInterface +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Common.pas)'#13#10+
                      LOutputFMXCommonImplementation +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Common.pas)'#13#10+
                      //--
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.StdCtrls.pas)'#13#10+
                      LOutputFMXStdCtrlsInterface +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.StdCtrls.pas)'#13#10+
                      LOutputFMXStdCtrlsImplementation +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.StdCtrls.pas)'#13#10+
                      //--
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.VideoPlayer.pas)'#13#10+
                      LOutputFMXVideoPlayerInterface +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.VideoPlayer.pas)'#13#10+
                      LOutputFMXVideoPlayerImplementation +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.VideoPlayer.pas)'#13#10+
                      //--
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Layouts.pas)'#13#10+
                      LOutputFMXLayoutsInterface +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Layouts.pas)'#13#10+
                      LOutputFMXLayoutsImplementation +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.Layouts.pas)'#13#10+
                      //--
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.PageController.pas)'#13#10+
                      LOutputFMXPagecontrollerInterface +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.PageController.pas)'#13#10+
                      LOutputFMXPagecontrollerImplementation +
                      #13#10'{1BA246ED-4E3A-417C-ABF8-860681681835}(Alcinoe.FMX.Dynamic.PageController.pas)'#13#10;
  UpdateSourceCode(LTmpSrcCode);
  LTmpSrcCode := LTmpSrcCode + #13#10;
  UpdateUnit(LTmpSrcCode, 'Alcinoe.FMX.Dynamic.Controls.pas');
  UpdateUnit(LTmpSrcCode, 'Alcinoe.FMX.Dynamic.Objects.pas');
  UpdateUnit(LTmpSrcCode, 'Alcinoe.FMX.Dynamic.Common.pas');
  UpdateUnit(LTmpSrcCode, 'Alcinoe.FMX.Dynamic.StdCtrls.pas');
  UpdateUnit(LTmpSrcCode, 'Alcinoe.FMX.Dynamic.VideoPlayer.pas');
  UpdateUnit(LTmpSrcCode, 'Alcinoe.FMX.Dynamic.Layouts.pas');
  UpdateUnit(LTmpSrcCode, 'Alcinoe.FMX.Dynamic.PageController.pas');

end;

{******************************}
Procedure BuildAlcinoeFMXStyles;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  procedure ExtractSection(Const aSrc: ansiString; Const ASectionName: AnsiString; var OutputImplementation: AnsiString);
  begin
    var P1 := AlposIgnoreCaseA('// '+ASectionName+' //', aSrc); // // CONTROL //
    If P1 <= low(aSrc) then Raise Exception.Create('Error 097DD14F-3FD6-4D90-98ED-A24B0E9A9D5D');
    var P0 := P1-1;
    While (P0 > low(aSrc)) and (aSrc[P0] in [#13, #10]) do dec(P0);
    While (P0 > low(aSrc)) and (not (aSrc[P0] in [#13, #10])) do dec(P0);
    If P0 <= low(aSrc) then raise Exception.Create('Error EC5E3550-9A3D-4FB0-98F0-F4809CAF7A47');
    inc(P0); /////////////
    While (P1 < high(aSrc)) and (not (aSrc[P1] in [#13, #10])) do inc(P1);
    While (P1 < high(aSrc)) and (aSrc[P1] in [#13, #10]) do inc(P1);
    While (P1 < high(aSrc)) and (not (aSrc[P1] in [#13, #10])) do inc(P1);
    var P2 := AlposIgnoreCaseA('///////', aSrc, P1 + 1); ///////
    var LSection := ALTrim(ALcopyStr(aSrc, P0, P2-P0));
    LSection := ALStringReplaceA(LSection, '// '+ASectionName+' //', '// Dynamic'+ASectionName+' //', [RfIgnoreCase]);
    LSection := ALStringReplaceA(LSection, '///////'#13#10, '//////////////'#13#10, [RfIgnoreCase, RfReplaceALL]);
    OutputImplementation := ALTrim(OutputImplementation + #13#10 + #13#10 + Lsection);
  end;

begin

  var LOutputImplementation: AnsiString := '';
  var LAlcinoeFMXStylesPas := ALGetStringFromFile(ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.Styles.pas');
  ExtractSection(LAlcinoeFMXStylesPas, 'CONTROL', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'SHAPE', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'RECTANGLE', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'LAYOUT', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'IMAGE', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'TEXT', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'BUTTON', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'TOGGLEBUTTON', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'CHECKBOX', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'RADIOBUTTON', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'SWITCH', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'TRACKBAR', LOutputImplementation);
  ExtractSection(LAlcinoeFMXStylesPas, 'SCROLLBAR', LOutputImplementation);
  //-----
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALControl', 'TALDynamicControl', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALShape', 'TALDynamicShape', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALImage', 'TALDynamicImage', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALAnimatedImage', 'TALDynamicAnimatedImage', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALBaseRectangle', 'TALDynamicBaseRectangle', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALRectangle', 'TALDynamicRectangle', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALCircle', 'TALDynamicCircle', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALLine', 'TALDynamicLine', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALBaseText', 'TALDynamicBaseText', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALText', 'TALDynamicText', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALBaseCheckBox', 'TALDynamicBaseCheckBox', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALCheckBox', 'TALDynamicCheckBox', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALRadioButton', 'TALDynamicRadioButton', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALSwitch', 'TALDynamicSwitch', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALButton', 'TALDynamicButton', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALToggleButton', 'TALDynamicToggleButton', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALCustomTrack', 'TALDynamicCustomTrack', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALTrackBar', 'TALDynamicTrackBar', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALRangeTrackBar', 'TALDynamicRangeTrackBar', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALCustomScrollBar', 'TALDynamicCustomScrollBar', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALScrollBar', 'TALDynamicScrollBar', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALLayout', 'TALDynamicLayout', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALVideoPlayerSurface', 'TALDynamicVideoPlayerSurface', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALBasePageIndicator', 'TALDynamicBasePageIndicator', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALPageIndicator', 'TALDynamicPageIndicator', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALPageView', 'TALDynamicPageView', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TALPageController', 'TALDynamicPageController', [rfIgnoreCase, RfReplaceALL]);
  //-----
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'ALReset', 'ALResetDynamic', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'ALApplyMaterial3', 'ALApplyMaterial3Dynamic', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'ALApplyMaterial3DynamicExpressive', 'ALApplyMaterial3ExpressiveDynamic', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TouchTargetExpansion.Rect','TouchTargetExpansion', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'InactiveTrack.TouchTargetExpansion.DefaultValue','TRectF.Empty', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'ActiveTrack.TouchTargetExpansion.DefaultValue','TRectF.Empty', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'Track.TouchTargetExpansion.DefaultValue','TRectF.Empty', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'Thumb.TouchTargetExpansion.DefaultValue','TRectF.Empty', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'ValueIndicator.TouchTargetExpansion.DefaultValue','TRectF.Empty', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'TouchTargetExpansion.DefaultValue','TRectF.Empty', [rfIgnoreCase, RfReplaceALL]);
  LOutputImplementation := AlStringReplaceA(LOutputImplementation, 'Size.Size := LSize;','SetSize(LSize);', [rfIgnoreCase, RfReplaceALL]);
  //-----
  NormalizeSourceCode(LOutputImplementation);
  //-----
  ReplaceAutoGeneratedRegion(LAlcinoeFMXStylesPas{ASource}, 1{ARegionNumber}, ALTrim(LOutputImplementation){AReplacementText});
  //-----
  ALSaveStringToFile(LAlcinoeFMXStylesPas, ALgetModulePathW + '\..\..\Source\Alcinoe.FMX.Styles.pas');

end;


begin
  try
    var LParamLst := TALStringListW.Create;
    try

      // Init LParamLst
      for var I := 1 to ParamCount do
        LParamLst.Add(ParamStr(i));

      // Init LNoInteraction
      var LNoInteraction: Boolean := AlStrToBool(ALTrim(LParamLst.Values['-NoInteraction']));

      // Build Alcinoe.FMX.Dynamic.VideoPlayer.pas
      BuildAlcinoeFMXDynamicControls;
      Writeln('The code for Alcinoe.FMX.Dynamic.Common.pas was auto-generated successfully');
      Writeln('The code for Alcinoe.FMX.Dynamic.Controls.pas was auto-generated successfully');
      Writeln('The code for Alcinoe.FMX.Dynamic.Layouts.pas was auto-generated successfully');
      Writeln('The code for Alcinoe.FMX.Dynamic.Objects.pas was auto-generated successfully');
      Writeln('The code for Alcinoe.FMX.Dynamic.PageController.pas was auto-generated successfully');
      Writeln('The code for Alcinoe.FMX.Dynamic.StdCtrls.pas was auto-generated successfully');
      Writeln('The code for Alcinoe.FMX.Dynamic.VideoPlayer.pas was auto-generated successfully');

      // Build Alcinoe.FMX.Styles.pas
      BuildAlcinoeFMXStyles;
      Writeln('The code for Alcinoe.FMX.Styles.pas was auto-generated successfully');

      // Alcinoe.Localization.pas
      BuildAlcinoeLocalization;
      Writeln('The code for Alcinoe.Localization.pas was auto-generated successfully');

      // Finished
      if not LNoInteraction then begin
        Writeln('');
        Writeln('Build successful');
        Writeln('Press <Enter> key to quit');
        Readln;
      end;

    finally
      ALFreeandNil(LParamLst);
    end;
  except
    on E: Exception do begin
      Writeln(E.ClassName, ': ', E.Message);
      Writeln('');
      Writeln('');
      Writeln('Build failed!');
      Writeln('Press <Enter> key to quit');
      Readln;
      halt(1);
    end;
  end;
end.

Index: fmx/FMX.Canvas.GPU.Helpers.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Canvas.GPU.Helpers.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Canvas.GPU.Helpers.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Canvas.GPU.Helpers.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Canvas.GPU.Helpers.pas	(working copy)
@@ -12,11 +12,12 @@
 
 interface
 
+{$HINTS OFF}
 {$SCOPEDENUMS ON}
 
 uses
-  System.Types, System.UITypes, FMX.Types, FMX.Types3D, FMX.Materials.Canvas, FMX.Graphics, 
-  System.Math.Vectors;
+  System.Types, System.UITypes, FMX.Types, FMX.Types3D, FMX.Materials.Canvas, FMX.Graphics,
+  System.Math.Vectors, ALFMXTypes3D;
 
 type
   TDrawingMode = (Normal, WriteStencilInvert, ReadStencil, ClearStencil);
@@ -320,8 +321,10 @@
 
   if Material <> nil then
     M := Material
-  else if Texture <> nil then
-    M := FTexMat
+  else if Texture <> nil then begin
+    if (Texture is TalTexture) and (TalTexture(Texture).material <> nil) then M := TalTexture(Texture).material  // https://quality.embarcadero.com/browse/RSP-23501
+    else M := FTexMat
+  end
   else
     M := FSolidMat;
 
@@ -431,7 +434,8 @@
 var
   SolidDecl: TVertexDeclaration;
 begin
-  if FCurrentMaterial = FTexMat then
+  if (FCurrentMaterial = FTexMat) or
+     (FCurrentMaterial is TALCanvasTextureMaterial) then // https://quality.embarcadero.com/browse/RSP-23501
   begin
     SetLength(SolidDecl, 3);
     SolidDecl[0].Format := TVertexFormat.Vertex;
@@ -440,7 +444,8 @@
     SolidDecl[1].Offset := 12;
     SolidDecl[2].Format := TVertexFormat.Color0;
     SolidDecl[2].Offset := 20;
-    FTexMat.Texture := FCurrentTexture;
+    if (FCurrentMaterial = FTexMat) then FTexMat.Texture := FCurrentTexture
+    else TALCanvasTextureMaterial(FCurrentMaterial).Texture := FCurrentTexture; // https://quality.embarcadero.com/browse/RSP-23501
     FContext.DrawPrimitives(TPrimitivesKind.Triangles, @FBatchVertexBuffer[0], @FBatchIndexBuffer[0], SolidDecl,
       SizeOf(TVertexBufferItem), FBatchedVertices, SizeOf(TIndexBufferItem), FBatchedIndices, FCurrentMaterial, 1);
   end else if FCurrentMaterial <> FSolidMat then
Index: fmx/FMX.Canvas.GPU.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Canvas.GPU.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Canvas.GPU.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Canvas.GPU.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Canvas.GPU.pas	(working copy)
@@ -72,6 +72,8 @@
 procedure RegisterCanvasClasses;
 procedure UnregisterCanvasClasses;
 
+function CanvasHelper: TCanvasHelper; // << https://quality.embarcadero.com/browse/RSP-18797
+
 implementation
 
 uses
@@ -1193,6 +1195,12 @@
   TCanvasGpu.FreeResources;
 end;
 
+//https://quality.embarcadero.com/browse/RSP-18797
+function CanvasHelper: TCanvasHelper;
+begin
+  result := TCanvasGpu.FCanvasHelper;
+end;
+
 initialization
   TCustomCanvasGpu.ModulateColor := $FFFFFFFF;
   TCustomCanvasGpu.AlignToPixels := False;
Index: fmx/FMX.Context.GLES.Android.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.Android.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.Android.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.Android.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.Android.pas	(working copy)
@@ -405,18 +405,17 @@
   end
   else
   begin
-    if not FThreadDictionary.TryGetValue(TThread.CurrentThread.ThreadID, Pair) then
-    begin
-      Pair.Context := eglCreateContext(FSharedDisplay, FSharedConfig, FSharedContext, @ContextAttributes[0]);
-      Pair.Surface := CreateEGLSurface(1, 1);
-
-      TMonitor.Enter(FThreadDictionary);
-      try
+    TMonitor.Enter(FThreadDictionary); // https://quality.embarcadero.com/browse/RSP-34481
+    try                                //
+      if not FThreadDictionary.TryGetValue(TThread.CurrentThread.ThreadID, Pair) then
+      begin
+        Pair.Context := eglCreateContext(FSharedDisplay, FSharedConfig, FSharedContext, @ContextAttributes[0]);
+        Pair.Surface := CreateEGLPBufferSurface(1, 1); // https://quality.embarcadero.com/browse/RSP-34482
         FThreadDictionary.Add(TThread.CurrentThread.ThreadID, Pair);
-      finally
-        TMonitor.Exit(FThreadDictionary);
       end;
-    end;
+    finally                              //
+      TMonitor.Exit(FThreadDictionary);  // https://quality.embarcadero.com/browse/RSP-34481
+    end;                                 //
     if eglGetCurrentContext <> Pair.Context then
       Result := eglMakeCurrent(FSharedDisplay, Pair.Surface, Pair.Surface, Pair.Context) <> EGL_FALSE;
   end;
Index: fmx/FMX.Context.GLES.iOS.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.iOS.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.iOS.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.iOS.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.iOS.pas	(working copy)
@@ -100,17 +100,17 @@
     Result := FSharedContext
   else
   begin
-    if not FThreadDictionary.TryGetValue(TThread.CurrentThread.ThreadID, Result) then
-    begin
-      Result := TEAGLContext.Wrap(TEAGLContext.Alloc.initWithAPI(kEAGLRenderingAPIOpenGLES2, FSharedContext.sharegroup));
-      Result.retain;
-      TMonitor.Enter(FThreadDictionary);
-      try
+    TMonitor.Enter(FThreadDictionary); // https://quality.embarcadero.com/browse/RSP-34481
+    try                                //
+      if not FThreadDictionary.TryGetValue(TThread.CurrentThread.ThreadID, Result) then
+      begin
+        Result := TEAGLContext.Wrap(TEAGLContext.Alloc.initWithAPI(kEAGLRenderingAPIOpenGLES2, FSharedContext.sharegroup));
+        Result.retain;
         FThreadDictionary.Add(TThread.CurrentThread.ThreadID, Result);
-      finally
-        TMonitor.Exit(FThreadDictionary);
       end;
-    end;
+    finally                              //
+      TMonitor.Exit(FThreadDictionary);  // https://quality.embarcadero.com/browse/RSP-34481
+    end;                                 //
   end;
 end;
 
Index: fmx/FMX.Context.GLES.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Context.GLES.pas	(working copy)
@@ -188,7 +188,7 @@
 {$IFDEF MACOS}
   Macapi.CoreFoundation,
 {$ENDIF}
-  FMX.Consts, FMX.Canvas.GPU, FMX.Materials, FMX.Utils;
+  FMX.Consts, FMX.Canvas.GPU, FMX.Materials, FMX.Utils, ALfmxTypes3D;
 
 class procedure TGlesDiagnostic.CollectErrors;
 const
@@ -1279,8 +1279,15 @@
 
         if Texture = nil then
           glBindTexture(GL_TEXTURE_2D, 0)
-        else
+        else begin
+          {$IF defined(ANDROID)}
+          // https://quality.embarcadero.com/browse/RSP-16830
+          if (Texture is TalTexture) and (TalTexture(Texture).material is TALCanvasExternalOESTextureMaterial) then
+            glBindTexture(GL_TEXTURE_EXTERNAL_OES, Texture.Handle)
+          else
+          {$ENDIF}
           glBindTexture(GL_TEXTURE_2D, Texture.Handle);
+        end;
 
         glUniform1i(Variable.Index, Variable.TextureUnit);
         glActiveTexture(GL_TEXTURE0);
Index: fmx/FMX.Controls.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Controls.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Controls.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Controls.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Controls.pas	(working copy)
@@ -113,7 +113,7 @@
     /// <summary>Register a class to create hint instances. When a new THint instance is needed, the registered classes are invoked
     /// to create the needed instance.</summary>
     class procedure RegisterClass(const AClass: THintClass);
-    /// <summary>Returns an instance created by the first available registered class. This method can return nil if there are no classes 
+    /// <summary>Returns an instance created by the first available registered class. This method can return nil if there are no classes
     /// registered or none of the registered classes can create a THint instance.</summary>
     class function CreateNewInstance(const AHandle: TWindowHandle): THint;
     /// <summary>Returns True if there are some THint class registered.</summary>
@@ -507,6 +507,11 @@
     procedure MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Single); virtual;
     procedure MouseWheel(Shift: TShiftState; WheelDelta: Integer; var Handled: Boolean); virtual;
     procedure MouseClick(Button: TMouseButton; Shift: TShiftState; X, Y: Single); virtual;
+    procedure ChildrenMouseDown(const AObject: TControl; Button: TMouseButton; Shift: TShiftState; X, Y: Single); virtual; // https://quality.embarcadero.com/browse/RSP-24397
+    procedure ChildrenMouseMove(const AObject: TControl; Shift: TShiftState; X, Y: Single); virtual; // https://quality.embarcadero.com/browse/RSP-24397
+    procedure ChildrenMouseUp(const AObject: TControl; Button: TMouseButton; Shift: TShiftState; X, Y: Single); virtual; // https://quality.embarcadero.com/browse/RSP-24397
+    procedure ChildrenMouseEnter(const AObject: TControl); virtual; // https://quality.embarcadero.com/browse/RSP-24397
+    procedure ChildrenMouseLeave(const AObject: TControl); virtual; // https://quality.embarcadero.com/browse/RSP-24397
     procedure KeyDown(var Key: Word; var KeyChar: WideChar; Shift: TShiftState); virtual;
     procedure KeyUp(var Key: Word; var KeyChar: WideChar; Shift: TShiftState); virtual;
     procedure DialogKey(var Key: Word; Shift: TShiftState); virtual;
@@ -2208,6 +2213,7 @@
   TabStop: IControl;
   ChildControl: TControl;
   NeedRepaint: Boolean;
+  i: integer; // https://quality.embarcadero.com/browse/RSP-21013
 begin
   DisableDisappear := True;
   try
@@ -2214,7 +2220,10 @@
     if AObject is TControl then
     begin
       ChildControl := TControl(AObject);
-      ChildControl.FUpdating := FUpdating;
+      //https://quality.embarcadero.com/browse/RSP-21013
+      //ChildControl.FUpdating := FUpdating;
+      for I := 1 to FUpdating do
+        ChildControl.beginUpdate;
     end
     else
       ChildControl := nil;
@@ -2254,7 +2263,8 @@
         ChildControl.TempCanvas := TempCanvas;
       if FInPaintTo then
         ChildControl.FInPaintTo := True;
-      ChildControl.FUpdating := FUpdating;
+      //https://quality.embarcadero.com/browse/RSP-21013
+      //ChildControl.FUpdating := FUpdating;
       if not FSimpleTransform then
         ChildControl.FSimpleTransform := False;
       ChildControl.RecalcEnabled;
@@ -2284,8 +2294,20 @@
   var
     I: Integer;
   begin
-    for I := 1 to AControl.FUpdating do
-      AControl.EndUpdate;
+    // https://quality.embarcadero.com/browse/RSP-21013
+    // Also no need to call EndUpdate when we are destroying
+    // AControl because at this level most of the members
+    // of Acontrol have been freed and if we call EndUpdate
+    // with this transient state it's can cause trouble if
+    // AControl have a custom overloaded EndUpdate. Also
+    // in any case endupdate will not be call for any of
+    // the childreen of AControl as the property FControls
+    // of Acontrol used in EndUpdate to enumerate all childreen
+    // of Acontrol is already freed.
+    if (not (csDestroying in ComponentState)) and
+       (not (csDestroying in AControl.ComponentState)) then
+      for I := 1 to FUpdating do
+        AControl.EndUpdate;
   end;
 
 var
@@ -3672,7 +3694,7 @@
   Result := Touch.InteractiveGestures;
   if Result = [] then
     if (Parent <> nil) and Supports(Parent, IGestureControl, LGObj) then
-      Result := LGObj.GetListOfInteractiveGestures;                 
+      Result := LGObj.GetListOfInteractiveGestures;
 end;
 
 function TControl.GetLocked: Boolean;
@@ -4118,6 +4140,7 @@
   ApplyTriggerEffect(Self, 'IsMouseOver');
   if Assigned(FOnMouseEnter) then
     FOnMouseEnter(Self);
+  if fparentControl <> nil then fparentControl.ChildrenMouseEnter(Self); // https://quality.embarcadero.com/browse/RSP-24397
 end;
 
 procedure TControl.DoMouseLeave;
@@ -4127,6 +4150,7 @@
   ApplyTriggerEffect(Self, 'IsMouseOver');
   if Assigned(FOnMouseLeave) then
     FOnMouseLeave(Self);
+  if fparentControl <> nil then fparentControl.ChildrenMouseLeave(Self); // https://quality.embarcadero.com/browse/RSP-24397
 end;
 
 function TControl.GetCanFocus: Boolean;
@@ -4426,7 +4450,7 @@
     end;
 
   if not Handled and (FParent <> nil) and (EventInfo.GestureID <> sgiNoGesture) and Supports(Parent, IGestureControl, LGObj) then
-    LGObj.CMGesture(EventInfo);                  
+    LGObj.CMGesture(EventInfo);
 end;
 
 procedure TControl.DblClick;
@@ -4535,6 +4559,7 @@
 
   if Assigned(FOnMouseDown) then
     FOnMouseDown(Self, Button, Shift, X, Y);
+  if fparentControl <> nil then fparentControl.ChildrenMouseDown(Self, Button, Shift, X, Y); // https://quality.embarcadero.com/browse/RSP-24397
   if FAutoCapture then
     Capture;
   if (ssDouble in Shift) then
@@ -4554,6 +4579,7 @@
 begin
   if Assigned(FOnMouseMove) then
     FOnMouseMove(Self, Shift, X, Y);
+  if fparentControl <> nil then fparentControl.ChildrenMouseMove(Self, Shift, X, Y); // https://quality.embarcadero.com/browse/RSP-24397
 end;
 
 procedure TControl.MouseUp(Button: TMouseButton; Shift: TShiftState; X, Y: Single);
@@ -4562,6 +4588,7 @@
 
   if Assigned(FOnMouseUp) then
     FOnMouseUp(Self, Button, Shift, X, Y);
+  if fparentControl <> nil then fparentControl.ChildrenMouseUp(Self, Button, Shift, X, Y); // https://quality.embarcadero.com/browse/RSP-24397
   if FPressed then
   begin
     FPressed := False;
@@ -4576,6 +4603,41 @@
     FOnMouseWheel(Self, Shift, WheelDelta, Handled)
 end;
 
+// https://quality.embarcadero.com/browse/RSP-24397
+procedure TControl.ChildrenMouseDown(const AObject: TControl; Button: TMouseButton; Shift: TShiftState; X, Y: Single);
+begin
+  if fParentControl <> nil then
+    fParentControl.ChildrenMouseDown(AObject, Button, Shift, X, Y);
+end;
+
+// https://quality.embarcadero.com/browse/RSP-24397
+procedure TControl.ChildrenMouseMove(const AObject: TControl; Shift: TShiftState; X, Y: Single);
+begin
+  if fParentControl <> nil then
+    fParentControl.ChildrenMouseMove(AObject, Shift, X, Y);
+end;
+
+// https://quality.embarcadero.com/browse/RSP-24397
+procedure TControl.ChildrenMouseUp(const AObject: TControl; Button: TMouseButton; Shift: TShiftState; X, Y: Single);
+begin
+  if fParentControl <> nil then
+    fParentControl.ChildrenMouseUp(AObject, Button, Shift, X, Y);
+end;
+
+// https://quality.embarcadero.com/browse/RSP-24397
+procedure TControl.ChildrenMouseEnter(const AObject: TControl);
+begin
+  if fParentControl <> nil then
+    fParentControl.ChildrenMouseEnter(AObject);
+end;
+
+// https://quality.embarcadero.com/browse/RSP-24397
+procedure TControl.ChildrenMouseLeave(const AObject: TControl);
+begin
+  if fParentControl <> nil then
+    fParentControl.ChildrenMouseLeave(AObject);
+end;
+
 procedure TControl.DragEnter(const Data: TDragObject; const Point: TPointF);
 var
   Operation: TDragOperation;
@@ -5985,7 +6047,7 @@
   KillResourceLink;
   if csLoading in ComponentState then
     Exit;
-  Repaint;                             
+  Repaint;
 end;
 
 procedure TStyledControl.AdjustSize;
@@ -7124,7 +7186,7 @@
 var
   LFontColor: TAlphaColor;
 begin
-                                                                                          
+
 {$IFDEF LONGINT64}
   IdentToAlphaColor(Reader.ReadIdent, Integer(LFontColor));
 {$ELSE !LONGINT64}
Index: fmx/FMX.Dialogs.iOS.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Dialogs.iOS.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Dialogs.iOS.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Dialogs.iOS.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Dialogs.iOS.pas	(working copy)
@@ -246,7 +246,7 @@
   try
     AlertView := TUIAlertView.Wrap(AlertView.initWithTitle(StrToNSStr(Translate(MsgTitles[ADialogType])), StrToNSStr(AMessage),
       Delegate.GetObjectID, nil, nil));
-    for B := Low(TMsgDlgBtn) to High(TMsgDlgBtn) do
+    for B := High(TMsgDlgBtn) downto Low(TMsgDlgBtn) do // https://quality.embarcadero.com/browse/RSP-15971
       if B in AButtons then
         AlertView.addButtonWithTitle(StrToNSStr(Translate(ButtonCaptions[B])));
     AlertView.Show;
@@ -280,7 +280,7 @@
   AlertView := TUIAlertView.Alloc;
   AlertView := TUIAlertView.Wrap(AlertView.initWithTitle(StrToNSStr(Translate(MsgTitles[ADialogType])), StrToNSStr(AMessage),
     Delegate.GetObjectID, nil, nil));
-  for B := Low(TMsgDlgBtn) to High(TMsgDlgBtn) do
+  for B := High(TMsgDlgBtn) downto Low(TMsgDlgBtn) do // https://quality.embarcadero.com/browse/RSP-15971
     if B in AButtons then
       AlertView.addButtonWithTitle(StrToNSStr(Translate(ButtonCaptions[B])));
   AlertView.Show;
@@ -359,7 +359,7 @@
   try
     AlertView := TUIAlertView.Wrap(AlertView.initWithTitle(StrToNSStr(Translate(MsgTitles[ADialogType])), StrToNSStr(AMessage),
       Delegate.GetObjectID, nil, nil));
-    for B := Low(TMsgDlgBtn) to High(TMsgDlgBtn) do
+    for B := High(TMsgDlgBtn) downto Low(TMsgDlgBtn) do // https://quality.embarcadero.com/browse/RSP-15971
       if B in AButtons then
         AlertView.addButtonWithTitle(StrToNSStr(Translate(ButtonCaptions[B])));
     AlertView.Show;
@@ -450,7 +450,7 @@
   AlertView := TUIAlertView.Alloc;
   AlertView := TUIAlertView.Wrap(AlertView.initWithTitle(StrToNSStr(Translate(MsgTitles[ADialogType])), StrToNSStr(AMessage),
     Delegate.GetObjectID, nil, nil));
-  for B := Low(TMsgDlgBtn) to High(TMsgDlgBtn) do
+  for B := High(TMsgDlgBtn) downto Low(TMsgDlgBtn) do // https://quality.embarcadero.com/browse/RSP-15971
     if B in AButtons then
       AlertView.addButtonWithTitle(StrToNSStr(Translate(ButtonCaptions[B])));
   AlertView.Show;
@@ -551,7 +551,7 @@
   inherited Create;
   FParentList := nil;
   FInputCloseQueryProc := AInputCloseQueryProc;
-  for B := Low(TMsgDlgBtn) to High(TMsgDlgBtn) do
+  for B := High(TMsgDlgBtn) downto Low(TMsgDlgBtn) do // https://quality.embarcadero.com/browse/RSP-15971
     if B in AButtons then
     begin
       SetLength(FResults, Length(FResults) + 1);
Index: fmx/FMX.Edit.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Edit.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Edit.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Edit.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Edit.pas	(working copy)
@@ -11,6 +11,7 @@
 
 interface
 
+{$HINTS OFF}
 {$SCOPEDENUMS ON}
 
 uses
Index: fmx/FMX.Filter.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Filter.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Filter.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Filter.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Filter.pas	(working copy)
@@ -11,6 +11,7 @@
 
 interface
 
+{$HINTS OFF}
 {$SCOPEDENUMS ON}
 
 uses
@@ -615,7 +616,7 @@
     begin
       if CompareText(FValues[I].Name, 'Output') = 0 then
       begin
-        if not FProcessing and FModified then 
+        if not FProcessing and FModified then
           Apply;
         Result := TFilterManager.GetTexture(FPass);
         FValues[I].Value := Result;
@@ -846,17 +847,19 @@
 
 function TFilter.InputTexture: TTexture;
 begin
-  if TCanvasStyle.NeedGPUSurface in TCanvasManager.DefaultCanvas.GetCanvasStyle then
-    Result := TContextManager.DefaultContextClass.BitmapToTexture(FInputBitmap)
-  else
+  //https://quality.embarcadero.com/browse/RSP-20825
+  //if TCanvasStyle.NeedGPUSurface in TCanvasManager.DefaultCanvas.GetCanvasStyle then
+  //  Result := TContextManager.DefaultContextClass.BitmapToTexture(FInputBitmap)
+  //else
     Result := FInput;
 end;
 
 function TFilter.TargetTexture: TTexture;
 begin
-  if TCanvasStyle.NeedGPUSurface in TCanvasManager.DefaultCanvas.GetCanvasStyle then
-    Result := TContextManager.DefaultContextClass.BitmapToTexture(FTargetBitmap)
-  else
+  //https://quality.embarcadero.com/browse/RSP-20825
+  //if TCanvasStyle.NeedGPUSurface in TCanvasManager.DefaultCanvas.GetCanvasStyle then
+  //  Result := TContextManager.DefaultContextClass.BitmapToTexture(FTargetBitmap)
+  //else
     Result := FTarget;
 end;
 
Index: fmx/FMX.Forms.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Forms.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Forms.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Forms.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Forms.pas	(working copy)
@@ -9,6 +9,7 @@
 
 unit FMX.Forms;
 
+{$HINTS OFF}
 {$MINENUMSIZE 4}
 {$H+}
 
@@ -4249,7 +4250,10 @@
 
 procedure TCommonCustomForm.SetHovered(const Value: IControl);
 begin
-  if (Value <> FHovered) then
+  //https://quality.embarcadero.com/browse/RSP-36612
+  if ((Value <> nil) and (FHovered = nil)) or
+     ((Value = nil) and (FHovered <> nil)) or
+     ((Value <> nil) and (FHovered <> nil) and (Value.GetObject <> FHovered.GetObject)) then
   begin
     if FHovered <> nil then
     begin
@@ -4682,7 +4686,10 @@
     LControl := AControl
   else
     LControl := nil;
-  if LControl <> FLastHinted then
+  //https://quality.embarcadero.com/browse/RSP-36612
+  if ((LControl <> nil) and (FLastHinted = nil)) or
+     ((LControl = nil) and (FLastHinted <> nil)) or
+     ((LControl <> nil) and (FLastHinted <> nil) and (LControl.GetObject <> FLastHinted.GetObject)) then
   begin
     if Application.ShowHint and (LControl <> nil) then
     begin
@@ -5454,7 +5461,10 @@
 
 procedure TCommonCustomForm.SetCaptured(const Value: IControl);
 begin
-  if FCaptured <> Value then
+  //https://quality.embarcadero.com/browse/RSP-36612
+  if ((Value <> nil) and (FCaptured = nil)) or
+     ((Value = nil) and (FCaptured <> nil)) or
+     ((Value <> nil) and (FCaptured <> nil) and (Value.GetObject <> FCaptured.GetObject)) then
   begin
     if FCaptured <> nil then
     begin
@@ -5743,7 +5753,10 @@
 
 procedure TCommonCustomForm.SetActiveControl(const AControl: IControl);
 begin
-  if AControl <> FActiveControl then
+  //https://quality.embarcadero.com/browse/RSP-36612
+  if ((AControl <> nil) and (FActiveControl = nil)) or
+     ((AControl = nil) and (FActiveControl <> nil)) or
+     ((AControl <> nil) and (FActiveControl <> nil) and (AControl.GetObject <> FActiveControl.GetObject)) then
   begin
     if FActiveControl <> nil then
       FActiveControl.RemoveFreeNotify(Self);
@@ -5964,8 +5977,9 @@
 procedure TCustomForm.EndUpdate;
 begin
   inherited;
-  if FUpdating = 0 then
-    Realign;
+  //https://quality.embarcadero.com/browse/RSP-36652
+  //if FUpdating = 0 then
+  //  Realign;
 end;
 
 procedure TCustomForm.AddUpdateRect(R: TRectF);
@@ -5986,6 +6000,7 @@
     TGlyphsManager.Default.DisableGlyphPopulation := Active;
 end;
 
+// https://quality.embarcadero.com/browse/RSP-20970
 procedure TCustomForm.PaintBackground;
 var
   I: Integer;
@@ -5996,22 +6011,26 @@
   else
     ClearColor := TAlphaColorRec.Null;
 
-  if (FFill.Kind = TBrushKind.None) or ((FFill.Color and TAlphaColorRec.Alpha = 0) and
-     (FFill.Kind = TBrushKind.Solid)) then
+  if (FFill.Kind = TBrushKind.None) or
+     (FFill.Kind = TBrushKind.Solid) then
   begin
     if not (TCanvasStyle.SupportClipRects in TCanvasManager.DefaultCanvas.GetCanvasStyle) then
     begin
       if Transparency then
         Canvas.Clear(ClearColor)
+      else if FFill.Kind = TBrushKind.None then
+        Canvas.Clear(FFill.Color and $FFFFFF)
       else
-        Canvas.Clear(FFill.Color and $FFFFFF);
+        Canvas.Clear(FFill.Color)
     end
     else
       for I := Low(FUpdateRects) to High(FUpdateRects) do
         if Transparency then
           Canvas.ClearRect(FUpdateRects[I], ClearColor)
+        else if FFill.Kind = TBrushKind.None then
+          Canvas.ClearRect(FUpdateRects[I], FFill.Color and $FFFFFF)
         else
-          Canvas.ClearRect(FUpdateRects[I], FFill.Color and $FFFFFF);
+          Canvas.ClearRect(FUpdateRects[I], FFill.Color);
   end
   else
   begin
@@ -6213,6 +6232,11 @@
 
 procedure TCustomForm.Realign;
 begin
+  //https://quality.embarcadero.com/browse/RSP-36653
+  if FDisableAlign then
+    Exit;
+  if (FUpdating > 0) then
+    Exit;
   if not (csDesigning in ComponentState) then
   begin
     if FLastWidth <= 0 then
Index: fmx/FMX.Graphics.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Graphics.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Graphics.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Graphics.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Graphics.pas	(working copy)
@@ -2949,6 +2949,9 @@
   if FFontColor <> Value then
   begin
     FFontColor := Value;
+    {$IF defined(IOS)}        //
+    IsAdjustChanged := True;  // << https://quality.embarcadero.com/browse/RSP-20676
+    {$ENDIF}                  //
     Change;
   end;
 end;
@@ -6107,7 +6110,7 @@
 function TCanvas.LoadFontFromStream(const AStream: TStream): Boolean;
 begin
   Result := False;
-                                                       
+
 end;
 
 procedure TCanvas.MeasureLines(const ALines: TLineMetricInfo; const ARect: TRectF; const AText: string; const WordWrap: Boolean; const Flags: TFillTextFlags;
Index: fmx/FMX.Materials.Canvas.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Materials.Canvas.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Materials.Canvas.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Materials.Canvas.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Materials.Canvas.pas	(working copy)
@@ -440,18 +440,46 @@
     {$ENDREGION}
 
     {$REGION 'TContextShaderArch.GLSL'}
-    TContextShaderSource.Create(TContextShaderArch.GLSL, [
-      $76, $61, $72, $79, $69, $6E, $67, $20, $76, $65, $63, $34, $20, $43, $4F, $4C, $4F, $52, $30, $3B, $0D, $0A, $76, $61, $72, $79, $69, $6E, $67, $20, $76, $65, $63, $34, $20, $54, $45, $58, $30, $3B,
-      $0D, $0A, $76, $65, $63, $34, $20, $5F, $72, $65, $74, $5F, $30, $3B, $0D, $0A, $66, $6C, $6F, $61, $74, $20, $5F, $54, $4D, $50, $31, $3B, $0D, $0A, $66, $6C, $6F, $61, $74, $20, $5F, $54, $4D, $50,
-      $30, $3B, $0D, $0A, $76, $65, $63, $32, $20, $5F, $63, $30, $30, $30, $38, $3B, $0D, $0A, $75, $6E, $69, $66, $6F, $72, $6D, $20, $73, $61, $6D, $70, $6C, $65, $72, $32, $44, $20, $5F, $74, $65, $78,
-      $74, $75, $72, $65, $30, $3B, $0D, $0A, $76, $6F, $69, $64, $20, $6D, $61, $69, $6E, $28, $29, $0D, $0A, $7B, $0D, $0A, $20, $20, $20, $20, $76, $65, $63, $34, $20, $5F, $74, $65, $78, $43, $6F, $6C,
-      $6F, $72, $3B, $0D, $0A, $20, $20, $20, $20, $5F, $54, $4D, $50, $30, $20, $3D, $20, $66, $72, $61, $63, $74, $28, $54, $45, $58, $30, $2E, $78, $29, $3B, $0D, $0A, $20, $20, $20, $20, $5F, $54, $4D,
-      $50, $31, $20, $3D, $20, $66, $72, $61, $63, $74, $28, $54, $45, $58, $30, $2E, $79, $29, $3B, $0D, $0A, $20, $20, $20, $20, $5F, $63, $30, $30, $30, $38, $20, $3D, $20, $76, $65, $63, $32, $28, $5F,
-      $54, $4D, $50, $30, $2C, $20, $5F, $54, $4D, $50, $31, $29, $3B, $0D, $0A, $20, $20, $20, $20, $5F, $74, $65, $78, $43, $6F, $6C, $6F, $72, $20, $3D, $20, $74, $65, $78, $74, $75, $72, $65, $32, $44,
-      $28, $5F, $74, $65, $78, $74, $75, $72, $65, $30, $2C, $20, $5F, $63, $30, $30, $30, $38, $29, $3B, $0D, $0A, $20, $20, $20, $20, $5F, $72, $65, $74, $5F, $30, $20, $3D, $20, $5F, $74, $65, $78, $43,
-      $6F, $6C, $6F, $72, $2A, $43, $4F, $4C, $4F, $52, $30, $3B, $0D, $0A, $20, $20, $20, $20, $67, $6C, $5F, $46, $72, $61, $67, $43, $6F, $6C, $6F, $72, $20, $3D, $20, $5F, $72, $65, $74, $5F, $30, $3B,
-      $0D, $0A, $20, $20, $20, $20, $72, $65, $74, $75, $72, $6E, $3B, $0D, $0A, $7D, $20, $0D, $0A], [
-      TContextShaderVariable.Create('texture0', TContextShaderVariableKind.Texture, 0, 0)]
+    //https://quality.embarcadero.com/browse/RSP-22952
+    //
+    //ORIGINAL:
+    //
+    //varying vec4 COLOR0;
+    //varying vec4 TEX0;
+    //vec4 _ret_0;
+    //float _TMP1;
+    //float _TMP0;
+    //vec2 _c0008;
+    //uniform sampler2D _texture0;
+    //void main()
+    //{
+    //    vec4 _texColor;
+    //    _TMP0 = fract(TEX0.x);
+    //    _TMP1 = fract(TEX0.y);
+    //    _c0008 = vec2(_TMP0, _TMP1);
+    //    _texColor = texture2D(_texture0, _c0008);
+    //    _ret_0 = _texColor*COLOR0;
+    //    gl_FragColor = _ret_0;
+    //    return;
+    //}
+    //
+    TContextShaderSource.Create(
+      TContextShaderArch.GLSL,
+      TEncoding.UTF8.GetBytes(
+
+        'varying vec4 COLOR0;'+
+        'varying vec4 TEX0;'+
+        'uniform sampler2D _texture0;'+
+
+        'void main()'+
+        '{'+
+
+           'gl_FragColor = texture2D(_texture0, TEX0.xy) * COLOR0;'+
+
+        '}'
+
+      ),
+      [TContextShaderVariable.Create('texture0', TContextShaderVariableKind.Texture, 0, 0)]
     )
     {$ENDREGION}
 
Index: fmx/FMX.Platform.iOS.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Platform.iOS.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Platform.iOS.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Platform.iOS.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Platform.iOS.pas	(working copy)
@@ -1,4 +1,4 @@
-{*******************************************************}
+﻿{*******************************************************}
 {                                                       }
 {              Delphi FireMonkey Platform               }
 {                                                       }
@@ -73,7 +73,7 @@
   FMX.Context.GLES, FMX.Forms3D, FMX.Utils, FMX.Graphics.iOS, FMX.Context.GLES.iOS, FMX.Controls.iOS, FMX.Gestures.iOS,
   FMX.Helpers.iOS, FMX.Dialogs.iOS, FMX.Platform, FMX.Platform.Timer.iOS, FMX.Platform.SaveState.iOS,
   FMX.MultiTouch.iOS, FMX.Platform.Metrics.iOS, FMX.Platform.Device.iOS, FMX.Platform.Screen.iOS,
-  FMX.Platform.Logger.iOS, FMX.Controls.Presentation;
+  FMX.Platform.Logger.iOS, FMX.Controls.Presentation, ALFmxEdit, ALFmxMemo; // // https://quality.embarcadero.com/browse/RSP-33594
 
 type
 
@@ -2270,7 +2270,10 @@
 
   function IsNativeControl(const AControl: TFmxObject): Boolean;
   begin
-    Result := (AControl is TPresentedControl) and (TPresentedControl(AControl).ControlType = TControlType.Platform);
+    // https://quality.embarcadero.com/browse/RSP-33594
+    Result := ((AControl is TPresentedControl) and (TPresentedControl(AControl).ControlType = TControlType.Platform)) or
+              (AControl is TALiOSEdit) or
+              (AControl is TALiOSMemo);
   end;
 
 begin
Index: fmx/FMX.Platform.UI.Android.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Platform.UI.Android.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Platform.UI.Android.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Platform.UI.Android.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Platform.UI.Android.pas	(working copy)
@@ -28,7 +28,7 @@
   TTextServiceAndroid = class;
 
   /// <summary>Render of form. It is responsible for drawing FireMonkey form on native Surface.</summary>
-  TFormRender = class(TJavaLocal, JRunnable)
+  TFormRender = class(TJavaLocal, JChoreographer_FrameCallback) // https://quality.embarcadero.com/browse/RSP-38660
   private
     [Weak] FHandle: TAndroidWindowHandle;
     FIsNeededUpdate: Boolean;
@@ -38,8 +38,8 @@
     constructor Create(const AHandle: TAndroidWindowHandle);
     destructor Destroy; override;
 
-    { JRunnable }
-    procedure run; cdecl;
+    { JChoreographer_FrameCallback } // https://quality.embarcadero.com/browse/RSP-38660
+    procedure doFrame(frameTimeNanos: Int64); cdecl; // https://quality.embarcadero.com/browse/RSP-38660
 
     /// <summary>Renders form Immediately.</summary>
     procedure Render;
@@ -2300,7 +2300,7 @@
 begin
   TMessageManager.DefaultManager.Unsubscribe(TApplicationEventMessage, ApplicationEventHandler);
   AtomicIncrement(FRefCount);
-  TAndroidHelper.MainHandler.removeCallbacks(Self);
+  TJChoreographer.JavaClass.getInstance.removeFrameCallback(Self); // https://quality.embarcadero.com/browse/RSP-38660
   AtomicDecrement(FRefCount);
   inherited;
 end;
@@ -2321,7 +2321,7 @@
     end;
 end;
 
-procedure TFormRender.run;
+procedure TFormRender.doFrame(frameTimeNanos: Int64); // https://quality.embarcadero.com/browse/RSP-38660
 begin
   Render;
   FIsNeededUpdate := False;
@@ -2332,7 +2332,7 @@
   if not FIsNeededUpdate then
   begin
     FIsNeededUpdate := True;
-    TAndroidHelper.MainHandler.post(Self);
+    TJChoreographer.JavaClass.getInstance.postFrameCallback(Self); // https://quality.embarcadero.com/browse/RSP-38660
   end;
 end;
 
Index: fmx/FMX.StrokeBuilder.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.StrokeBuilder.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.StrokeBuilder.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.StrokeBuilder.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.StrokeBuilder.pas	(working copy)
@@ -1074,9 +1074,11 @@
   FUndeterminedMode := True;
   InitArrayPointers;
 
-  StepSize := FThickness;
-  if StepSize < 2 then
-    StepSize := 2;
+  //https://quality.embarcadero.com/browse/RSP-28136
+  //StepSize := FThickness;
+  //if StepSize < 2 then
+  //  StepSize := 2;
+  StepSize := 1;
 
   CurIndex := 0;
 
Index: fmx/FMX.Types3D.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.Types3D.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.Types3D.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.Types3D.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.Types3D.pas	(working copy)
@@ -3089,6 +3089,7 @@
   begin
     FContextLostId := -1;
     FContextResetId := -1;
+    Include(FStyle, TTextureStyle.volatile); // https://quality.embarcadero.com/browse/RSP-33388
   end;
 end;
 
Index: fmx/FMX.VirtualKeyboard.Android.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.VirtualKeyboard.Android.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.VirtualKeyboard.Android.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.VirtualKeyboard.Android.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.VirtualKeyboard.Android.pas	(working copy)
@@ -213,8 +213,15 @@
   VKRect.TopLeft := ConvertPixelToPoint(TPointF.Create(newFrame.Left, newFrame.Top)).Round;
   VKRect.BottomRight := ConvertPixelToPoint(TPointF.Create(newFrame.Right, newFrame.Bottom)).Round;
 
-  if (FNeedNotifyAboutFrameChanges or ((MainActivity.getVirtualKeyboard.isVirtualKeyboardShown) and (VKRect.Height > 0)))
-     and (FPreviousVKRect <> VKRect) then
+  // https://quality.embarcadero.com/browse/RSP-24737
+  // I made the conclusion that the event onVirtualKeyboardWillHidden and onVirtualKeyboardWillShown
+  // are inconsistent. often the onVirtualKeyboardWillHidden is not fired (for exemple when you
+  // click on the return key of the keybord in the bottom left) and sometime (more hard to reproduce
+  // but I guarantee I see it) the onVirtualKeyboardWillShown is not fired. But what seam consistant
+  // is the fire to this function onVirtualKeyboardFrameChanged with good value for VKRect
+  // So I decide to only take care of this event
+
+  if (FPreviousVKRect <> VKRect) then
     try
       FKeyboardService.SendNotificationAboutKeyboardEvent(VKRect);
       FPreviousVKRect := VKRect;
Index: fmx/FMX.WebBrowser.Android.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Android.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Android.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Android.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Android.pas	(working copy)
@@ -70,6 +70,7 @@
     FChildrenContainer: JViewGroup;
     FURL: string;
     [Weak] FWebControl: TCustomWebBrowser;
+    [Weak] FForm: TCommonCustomForm; // https://quality.embarcadero.com/browse/RSP-24736
     function GetZOrderManager: TAndroidZOrderManager;
   protected
     function QueryInterface(const IID: TGUID; out Obj): HResult; stdcall;
@@ -78,6 +79,7 @@
     procedure Show;
     procedure Hide;
     procedure UpdateContentFromControl;
+    procedure RootChanged(const aRoot: IRoot); // https://quality.embarcadero.com/browse/RSP-24736
     procedure DoNavigate(const AURL: string);
     procedure DoReload;
     { IFMXWebBrowserService }
@@ -157,14 +159,12 @@
   Result := FWebControl.Visible;
 end;
 
+//https://quality.embarcadero.com/browse/RSP-24736
 function TAndroidWebBrowserService.GetZOrderManager: TAndroidZOrderManager;
-var
-  Form: TCommonCustomForm;
 begin
-  if (FWebControl <> nil) and (FWebControl.Root <> nil) and (FWebControl.Root.GetObject is TCommonCustomForm) then
+  if (fForm <> nil) and (fForm.Handle <> nil) then
   begin
-    Form := TCommonCustomForm(FWebControl.Root);
-    Result := WindowHandleToPlatform(Form.Handle).ZOrderManager;
+    Result := WindowHandleToPlatform(fForm.Handle).ZOrderManager
   end
   else
     Result := nil;
@@ -305,7 +305,7 @@
   FWebViewContainer.addView(FWebView, LayoutParams);
   LayoutParams := TJRelativeLayout_LayoutParams.JavaClass.init(TJViewGroup_LayoutParams.JavaClass.MATCH_PARENT, TJViewGroup_LayoutParams.JavaClass.MATCH_PARENT);
   FWebViewContainer.addView(FChildrenContainer, LayoutParams);
- 
+
   SetEnableCaching(True);
 end;
 
@@ -343,7 +343,7 @@
 
 destructor TAndroidWebBrowserService.Destroy;
 begin
-  if ZOrderManager <> nil then
+  if (ZOrderManager <> nil) and (FWebControl <> nil) then // https://quality.embarcadero.com/browse/RSP-24736
     ZOrderManager.RemoveLink(FWebControl);
 
   FWebView.SetWebViewListener(nil);
@@ -354,7 +354,8 @@
 begin
   if (FWebControl <> nil) and (ZOrderManager <> nil) then
   begin
-    ZOrderManager.AddOrSetLink(FWebControl, FWebViewContainer, FChildrenContainer);
+    // https://quality.embarcadero.com/browse/RSP-24736
+    // ZOrderManager.AddOrSetLink(FWebControl, FWebViewContainer, FChildrenContainer);
     ZOrderManager.UpdateOrderAndBounds(FWebControl);
   end
   else
@@ -361,6 +362,20 @@
     Hide;
 end;
 
+// https://quality.embarcadero.com/browse/RSP-24736
+procedure TAndroidWebBrowserService.RootChanged(const aRoot: IRoot);
+begin
+  // Changing root for native control means changing ZOrderManager, because one form owns ZOrderManager.
+  // So we need to remove itself from old one and add to new one.
+  if (ZOrderManager <> nil) and (FWebControl <> nil) then ZOrderManager.RemoveLink(FWebControl);
+
+  if aRoot is TCommonCustomForm then FForm := TCommonCustomForm(aRoot)
+  else FForm := nil;
+
+  if (ZOrderManager <> nil) and (FWebControl <> nil) then ZOrderManager.AddOrSetLink(FWebControl, FWebViewContainer, FChildrenContainer);
+  UpdateContentFromControl;
+end;
+
 { TAndroidWBService }
 
 function TAndroidWBService.DoCreateWebBrowser: ICustomBrowser;
Index: fmx/FMX.WebBrowser.Cocoa.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Cocoa.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Cocoa.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Cocoa.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Cocoa.pas	(working copy)
@@ -45,6 +45,7 @@
 
   TCommonWebBrowserService = class(TInterfacedObject, ICustomBrowser)
   private
+    [Weak] FForm: TCommonCustomForm; // https://quality.embarcadero.com/browse/RSP-24736
     FWebView: INativeWebView;
     FURL: string;
     FWebControl: TCustomWebBrowser;
@@ -58,6 +59,7 @@
     procedure Show;
     procedure Hide;
     procedure UpdateContentFromControl;
+    procedure RootChanged(const aRoot: IRoot); // https://quality.embarcadero.com/browse/RSP-24736
     procedure DoNavigate(const URL: string);
     procedure DoGoBack;
     procedure DoGoForward;
@@ -259,8 +261,8 @@
 destructor TCommonWebBrowserService.Destroy;
 begin
 {$IFDEF IOS}
-  if (FWebControl <> nil) and (FWebControl.Root is TCommonCustomForm) then
-    WindowHandleToPlatform(TCommonCustomForm(FWebControl.Root).Handle).ZOrderManager.RemoveLink(FWebControl);
+  if (fForm <> nil) and (fForm.Handle <> nil) and (FWebControl <> nil) then //https://quality.embarcadero.com/browse/RSP-24736
+    WindowHandleToPlatform(fForm.Handle).ZOrderManager.RemoveLink(FWebControl); //https://quality.embarcadero.com/browse/RSP-24736
   if FWebView.isLoading then
     FWebView.stopLoading;
 {$ENDIF}
@@ -379,7 +381,6 @@
 {$ENDIF}
 
 var
-  Form: TCommonCustomForm;
 {$IFDEF IOS}
   ZOrderManager: TiOSZOrderManager;
 {$ELSE}
@@ -388,12 +389,11 @@
 {$ENDIF}
 begin
   if (FWebControl <> nil) and not (csDesigning in FWebControl.ComponentState) and
-     (FWebControl.Root is TCommonCustomForm) then
+     (fForm <> nil) and (fForm.Handle <> nil) then //https://quality.embarcadero.com/browse/RSP-24736
   begin
-    Form := TCommonCustomForm(FWebControl.Root);
   {$IFDEF IOS}
-    ZOrderManager := WindowHandleToPlatform(Form.Handle).ZOrderManager;
-    ZOrderManager.AddOrSetLink(FWebControl, FWebView, nil);
+    ZOrderManager := WindowHandleToPlatform(fForm.Handle).ZOrderManager; //https://quality.embarcadero.com/browse/RSP-24736
+    // ZOrderManager.AddOrSetLink(FWebControl, FWebView, nil); //https://quality.embarcadero.com/browse/RSP-24736
     ZOrderManager.UpdateOrderAndBounds(FWebControl);
     // WKWebView has a bug, It doesn't hide virtual keyboard itself, if we hide view from screen.
     // So we have to do it manually. If WebView is not visible and still have focus, we have to reset it.
@@ -409,7 +409,7 @@
   {$ELSE}
     Bounds := TRectF.Create(0,0,FWebControl.Width,FWebControl.Height);
     Bounds.Fit(FWebControl.AbsoluteRect);
-    View := WindowHandleToPlatform(Form.Handle).View;
+    View := WindowHandleToPlatform(fForm.Handle).View;
     View.addSubview(FWebView);
     if SameValue(Bounds.Width, 0) or SameValue(Bounds.Height, 0) then
       FWebView.setHidden(True)
@@ -424,6 +424,24 @@
     FWebView.setHidden(True);
 end;
 
+// https://quality.embarcadero.com/browse/RSP-24736
+procedure TCommonWebBrowserService.RootChanged(const aRoot: IRoot);
+begin
+  {$IFDEF IOS}
+  // Changing root for native control means changing ZOrderManager, because one form owns ZOrderManager.
+  // So we need to remove itself from old one and add to new one.
+  if (fForm <> nil) and (fForm.Handle <> nil) and (FWebControl <> nil) then WindowHandleToPlatform(fForm.Handle).ZOrderManager.RemoveLink(FWebControl);
+  {$ENDIF}
+
+  if aRoot is TCommonCustomForm then FForm := TCommonCustomForm(aRoot)
+  else FForm := nil;
+
+  {$IFDEF IOS}
+  if (fForm <> nil) and (fForm.Handle <> nil) and (FWebControl <> nil) then WindowHandleToPlatform(fForm.Handle).ZOrderManager.AddOrSetLink(FWebControl, FWebView, nil);
+  {$ENDIF}
+  UpdateContentFromControl;
+end;
+
 { TCommonWBService }
 
 function TCommonWBService.DoCreateWebBrowser: ICustomBrowser;
Index: fmx/FMX.WebBrowser.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.pas	(working copy)
@@ -40,6 +40,7 @@
     function GetParent: TFmxObject;
     function GetVisible : Boolean;
     procedure UpdateContentFromControl;
+    procedure RootChanged(const aRoot: IRoot); // https://quality.embarcadero.com/browse/RSP-24736
     procedure Navigate;
     procedure Reload;
     procedure Stop;
@@ -102,6 +103,7 @@
     procedure AncestorVisibleChanged(const Visible: Boolean); override;
     procedure ParentChanged; override;
     procedure DoAbsoluteChanged; override;
+    procedure DoRootChanged; override; // https://quality.embarcadero.com/browse/RSP-24736
     procedure Move; override;
     procedure Resize; override;
     procedure Paint; override;
@@ -265,6 +267,14 @@
     FWeb.UpdateContentFromControl;
 end;
 
+//https://quality.embarcadero.com/browse/RSP-24736
+procedure TCustomWebBrowser.DoRootChanged;
+begin
+  inherited;
+  if FWeb <> nil then
+    FWeb.RootChanged(root);
+end;
+
 procedure TCustomWebBrowser.FailLoadingWithError;
 begin
   if Assigned(FOnDidFailLoadWithError) then
Index: fmx/FMX.WebBrowser.Win.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Win.pas b/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Win.pas
--- a/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Win.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/fmx/FMX.WebBrowser.Win.pas	(working copy)
@@ -70,6 +70,7 @@
     procedure SetWebBrowserControl(const AValue: TCustomWebBrowser);
     function GetVisible: Boolean;
     procedure UpdateContentFromControl;
+    procedure RootChanged(const aRoot: IRoot); // https://quality.embarcadero.com/browse/RSP-24736
     procedure Navigate;
     procedure Reload;
     procedure Stop;
@@ -481,6 +482,11 @@
   end;
 end;
 
+// https://quality.embarcadero.com/browse/RSP-24736
+procedure TWindowsWebBrowserService.RootChanged(const aRoot: IRoot);
+begin
+end;
+
 procedure TWindowsWebBrowserService.WBCommandStateChange(Sender: TObject; Command: Integer; Enable: WordBool);
 begin
   case Command of
Index: rtl/android/Androidapi.JNI.App.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/android/Androidapi.JNI.App.pas b/Embarcadero/Sydney/10_4_2/rtl/android/Androidapi.JNI.App.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/android/Androidapi.JNI.App.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/android/Androidapi.JNI.App.pas	(working copy)
@@ -16,7 +16,8 @@
   Androidapi.JNI.JavaTypes,
   Androidapi.JNI.Os,
   Androidapi.JNI.Util,
-  Androidapi.JNI.Widget;
+  Androidapi.JNI.Widget,
+  Androidapi.JNI.Net; // https://quality.embarcadero.com/browse/RSP-21294
 
 type
 // ===== Forward declarations =====
@@ -76,6 +77,20 @@
 
 // ===== Interface declarations =====
 
+  // https://quality.embarcadero.com/browse/RSP-21294
+  // This dummy class is just to avoid circular reference
+  JAudioAttributesClass = interface(JObjectClass)
+    ['{FDBDFCB3-4B3F-4E1B-9007-4E5B9EA6546A}']
+  end;
+
+  // https://quality.embarcadero.com/browse/RSP-21294
+  // This dummy class is just to avoid circular reference
+  [JavaSignature('android/media/AudioAttributes')]
+  JAudioAttributes = interface(JObject)
+    ['{CEC09B65-8360-46BD-A5E8-780E4927C9AA}']
+  end;
+  TJAudioAttributes = class(TJavaGenericImport<JAudioAttributesClass, JAudioAttributes>) end;
+
   JActionBarClass = interface(JObjectClass)
     ['{C1A41981-8687-4794-91A5-AA384F60A546}']
     {class} function _GetDISPLAY_HOME_AS_UP: Integer; cdecl;
@@ -1469,7 +1484,7 @@
 
   JNotificationClass = interface(JObjectClass)
     ['{4584515F-7E22-49A9-A55B-A6DE3BFD7E1C}']
-    //{class} function _GetAUDIO_ATTRIBUTES_DEFAULT: JAudioAttributes; cdecl;
+    {class} function _GetAUDIO_ATTRIBUTES_DEFAULT: JAudioAttributes; cdecl; // https://quality.embarcadero.com/browse/RSP-21296
     {class} function _GetBADGE_ICON_LARGE: Integer; cdecl;
     {class} function _GetBADGE_ICON_NONE: Integer; cdecl;
     {class} function _GetBADGE_ICON_SMALL: Integer; cdecl;
@@ -1553,7 +1568,7 @@
     {class} function init: JNotification; cdecl; overload;
     {class} function init(icon: Integer; tickerText: JCharSequence; when: Int64): JNotification; cdecl; overload;//Deprecated
     {class} function init(parcel: JParcel): JNotification; cdecl; overload;
-    //{class} property AUDIO_ATTRIBUTES_DEFAULT: JAudioAttributes read _GetAUDIO_ATTRIBUTES_DEFAULT;
+    {class} property AUDIO_ATTRIBUTES_DEFAULT: JAudioAttributes read _GetAUDIO_ATTRIBUTES_DEFAULT; // https://quality.embarcadero.com/browse/RSP-21296
     {class} property BADGE_ICON_LARGE: Integer read _GetBADGE_ICON_LARGE;
     {class} property BADGE_ICON_NONE: Integer read _GetBADGE_ICON_NONE;
     {class} property BADGE_ICON_SMALL: Integer read _GetBADGE_ICON_SMALL;
@@ -1813,7 +1828,7 @@
     procedure setLockscreenVisibility(lockscreenVisibility: Integer); cdecl;
     procedure setName(name: JCharSequence); cdecl;
     procedure setShowBadge(showBadge: Boolean); cdecl;
-    //procedure setSound(sound: Jnet_Uri; audioAttributes: JAudioAttributes); cdecl;
+    procedure setSound(sound: Jnet_Uri; audioAttributes: JAudioAttributes); cdecl; // https://quality.embarcadero.com/browse/RSP-21294
     procedure setVibrationPattern(vibrationPattern: TJavaArray<Int64>); cdecl;
     function shouldShowLights: Boolean; cdecl;
     function shouldVibrate: Boolean; cdecl;
@@ -2276,6 +2291,7 @@
 
 procedure RegisterTypes;
 begin
+  TRegTypes.RegisterType('Androidapi.JNI.App.JAudioAttributes', TypeInfo(Androidapi.JNI.App.JAudioAttributes)); // dummy class to avoid circular reference - https://quality.embarcadero.com/browse/RSP-21294
   TRegTypes.RegisterType('Androidapi.JNI.App.JActionBar', TypeInfo(Androidapi.JNI.App.JActionBar));
   TRegTypes.RegisterType('Androidapi.JNI.App.JActionBar_LayoutParams', TypeInfo(Androidapi.JNI.App.JActionBar_LayoutParams));
   TRegTypes.RegisterType('Androidapi.JNI.App.JActionBar_OnMenuVisibilityListener', TypeInfo(Androidapi.JNI.App.JActionBar_OnMenuVisibilityListener));
Index: rtl/android/Androidapi.JNI.Location.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/android/Androidapi.JNI.Location.pas b/Embarcadero/Sydney/10_4_2/rtl/android/Androidapi.JNI.Location.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/android/Androidapi.JNI.Location.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/android/Androidapi.JNI.Location.pas	(working copy)
@@ -660,6 +660,7 @@
     procedure unregisterGnssMeasurementsCallback(callback: JGnssMeasurementsEvent_Callback); cdecl;
     procedure unregisterGnssNavigationMessageCallback(callback: JGnssNavigationMessage_Callback); cdecl;
     procedure unregisterGnssStatusCallback(callback: JGnssStatus_Callback); cdecl;
+    function isLocationEnabled: boolean; cdecl; // https://quality.embarcadero.com/browse/RSP-21365
   end;
   TJLocationManager = class(TJavaGenericImport<JLocationManagerClass, JLocationManager>) end;
 
Index: rtl/ios/iOSapi.AVFoundation.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.AVFoundation.pas b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.AVFoundation.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.AVFoundation.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.AVFoundation.pas	(working copy)
@@ -730,6 +730,8 @@
     function timedMetadata: NSArray; cdecl;
     function tracks: NSArray; cdecl;
     function videoComposition: AVVideoComposition; cdecl;
+    procedure addOutput(output: AVPlayerItemOutput); cdecl; // https://quality.embarcadero.com/browse/RSP-16853
+    procedure removeOutput(output: AVPlayerItemOutput); cdecl; // https://quality.embarcadero.com/browse/RSP-16853
   end;
   TAVPlayerItem = class(TOCGenericImport<AVPlayerItemClass, AVPlayerItem>)  end;
 
Index: rtl/ios/iOSapi.CoreImage.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.CoreImage.pas b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.CoreImage.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.CoreImage.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.CoreImage.pas	(working copy)
@@ -218,8 +218,25 @@
   end;
   TCIFaceFeature = class(TOCGenericImport<CIFaceFeatureClass, CIFaceFeature>)  end;
 
+function kCIInputImageKey: NSString; // https://quality.embarcadero.com/browse/RSP-19878
+function kCIInputRadiusKey: NSString; // https://quality.embarcadero.com/browse/RSP-19878
 
-
 implementation
 
+// https://quality.embarcadero.com/browse/RSP-19878
+const
+  CoreImageFwk: string = '/System/Library/Frameworks/CoreImage.framework/CoreImage';
+
+// https://quality.embarcadero.com/browse/RSP-19878
+function kCIInputImageKey: NSString;
+begin
+  result := CocoaNSStringConst(CoreImageFwk, 'kCIInputImageKey');
+end;
+
+// https://quality.embarcadero.com/browse/RSP-19878
+function kCIInputRadiusKey: NSString;
+begin
+  result := CocoaNSStringConst(CoreImageFwk, 'kCIInputRadiusKey');
+end;
+
 end.
Index: rtl/ios/iOSapi.CoreLocation.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.CoreLocation.pas b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.CoreLocation.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.CoreLocation.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.CoreLocation.pas	(working copy)
@@ -33,7 +33,7 @@
   kCLAuthorizationStatusNotDetermined = 0;
   kCLAuthorizationStatusRestricted = 1;
   kCLAuthorizationStatusAuthorizedAlways  = kCLAuthorizationStatusAuthorized ;
-  kCLAuthorizationStatusAuthorizedWhenInUse = 4; 
+  kCLAuthorizationStatusAuthorizedWhenInUse = 4;
   kCLErrorDenied = 1;
   kCLErrorGeocodeCanceled = 10;
   kCLErrorGeocodeFoundNoResult = 8;
@@ -110,6 +110,7 @@
 
   CLPlacemark = interface;
   CLRegion = interface;
+  CLVisit = interface; // https://quality.embarcadero.com/browse/RSP-18621
   CLLocationManager = interface;
   CLGeocoder = interface;
   CLHeading = interface;
@@ -144,6 +145,8 @@
     procedure locationManagerDidResumeLocationUpdates(manager: CLLocationManager); cdecl;
     [MethodName('locationManager:didFinishDeferredUpdatesWithError:')]
     procedure locationManagerDidFinishDeferredUpdatesWithError(manager: CLLocationManager; error: NSError); cdecl;
+    [MethodName('locationManager:didVisit:')]                                             // https://quality.embarcadero.com/browse/RSP-18621
+    procedure locationManagerDidVisit(manager: CLLocationManager; visit: CLVisit); cdecl; // https://quality.embarcadero.com/browse/RSP-18621
   end;
 
 // ===== Interface declarations =====
@@ -190,6 +193,19 @@
   end;
   TCLRegion = class(TOCGenericImport<CLRegionClass, CLRegion>)  end;
 
+  // https://quality.embarcadero.com/browse/RSP-18621
+  CLVisitClass = interface(NSObjectClass)
+    ['{8526B69B-5AD8-4B4B-91DC-6C06474BE925}']
+  end;
+  CLVisit = interface(NSObject)
+    ['{BB121072-B081-4C90-BB85-6FCC24DF8223}']
+    function arrivalDate: NSDate; cdecl;
+    function departureDate: NSDate; cdecl;
+    function coordinate: CLLocationCoordinate2D; cdecl;
+    function horizontalAccuracy: CLLocationAccuracy; cdecl;
+  end;
+  TCLVisit = class(TOCGenericImport<CLVisitClass, CLVisit>)  end;
+
   CLLocationManagerClass = interface(NSObjectClass)
     ['{4422C248-523F-4237-8966-2A322F58A77C}']
     {class} function authorizationStatus: CLAuthorizationStatus; cdecl;
@@ -248,6 +264,8 @@
     procedure stopRangingBeaconsInRegion(region: CLBeaconRegion); cdecl;
     procedure stopUpdatingHeading; cdecl;
     procedure stopUpdatingLocation; cdecl;
+    procedure startMonitoringVisits; cdecl; // https://quality.embarcadero.com/browse/RSP-18621
+    procedure stopMonitoringVisits; cdecl; // https://quality.embarcadero.com/browse/RSP-18621
   end;
   TCLLocationManager = class(TOCGenericImport<CLLocationManagerClass, CLLocationManager>)  end;
 
@@ -348,7 +366,7 @@
 
   CLCircularRegion = interface(CLRegion)
     ['{FF4DCF91-376B-41BB-B60A-880BEBB5B4EE}']
-    function initWithCenter(center: CLLocationCoordinate2D; radius: CLLocationDistance; identifier: NSString): Pointer; cdecl;
+    function initWithCenter(center: CLLocationCoordinate2D; radius: CLLocationDistance; identifier: pointer): Pointer; cdecl; // https://quality.embarcadero.com/browse/RSP-15717
     function center: CLLocationCoordinate2D; cdecl;
     function radius: CLLocationDistance; cdecl;
     function containsCoordinate(coordinate: CLLocationCoordinate2D): Boolean; cdecl;
Index: rtl/ios/iOSapi.Foundation.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.Foundation.pas b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.Foundation.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.Foundation.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.Foundation.pas	(working copy)
@@ -5566,8 +5566,28 @@
       downloadTask: NSURLSessionDownloadTask; didResumeAtOffset: Int64; expectedTotalBytes: Int64); cdecl;
   end;
 
+  //https://quality.embarcadero.com/browse/RSP-28096
+  NSPersonNameComponentsClass = interface(NSObjectClass)
+    ['{2EDFEAC4-A0B4-4BB2-BAD9-4581B92DA4C7}']
+  end;
+  NSPersonNameComponents = interface(NSObject)
+    ['{821B6CD5-BE9B-4708-928B-FD5CE5D12788}']
+    procedure setNamePrefix(namePrefix: NSString); cdecl;
+    function namePrefix : NSString; cdecl;
+    procedure setGivenName(givenName: NSString); cdecl;
+    function givenName : NSString; cdecl;
+    procedure setMiddleName(middleName: NSString); cdecl;
+    function middleName : NSString; cdecl;
+    procedure setFamilyName(familyName: NSString); cdecl;
+    function familyName : NSString; cdecl;
+    procedure setNameSuffix(nameSuffix: NSString); cdecl;
+    function nameSuffix : NSString; cdecl;
+    procedure setNickname(nickname: NSString); cdecl;
+    function nickname : NSString; cdecl;
+    procedure setPhoneticRepresentation(phoneticRepresentation: NSPersonNameComponents); cdecl;
+    function phoneticRepresentation : NSPersonNameComponents; cdecl;
+  end;
 
-
 // Convenience method for creating an NSString from a Delphi Unicode string
 function NSSTR(const Str: string): NSString; inline; deprecated 'use StrToNSStr instead';
 
@@ -5755,6 +5775,24 @@
   end;
 end;
 
+//https://quality.embarcadero.com/browse/RSP-23241
+function GetFrameworkDic: TDictionary<string, THandle>;
+var
+  LFrameworkDic: TDictionary<string, THandle>;
+begin
+  if FrameworkDic = nil then
+  begin
+    LFrameworkDic := TDictionary<string, THandle>.Create;
+    if AtomicCmpExchange(Pointer(FrameworkDic), Pointer(LFrameworkDic), nil) <> nil then
+      LFrameworkDic.Free
+{$IFDEF AUTOREFCOUNT}
+    else
+      FrameworkDic.__ObjAddRef
+{$ENDIF AUTOREFCOUNT};
+  end;
+  Result := FrameworkDic;
+end;
+
 function CocoaIntegerConst(const Fwk: string; const ConstStr: string): Integer;
 var
   Obj: Pointer;
@@ -5769,18 +5807,22 @@
 function CocoaPointerConst(const Fwk: string; const ConstStr: string): Pointer;
 var
   FrameworkMod: HMODULE;
+  LFrameworkDic: TDictionary<string, THandle>; //https://quality.embarcadero.com/browse/RSP-23241
 begin
-  if FrameworkDic = nil then
-    FrameworkDic := TDictionary<string, THandle>.Create;
-
   Result := nil;
   FrameworkMod := 0;
 
-  if not FrameworkDic.TryGetValue(Fwk, FrameworkMod) then
-  begin
-    FrameworkMod := LoadLibrary(PWideChar(Fwk));
-    FrameworkDic.Add(Fwk, FrameworkMod);
-  end;
+  LFrameworkDic := GetFrameworkDic; //
+  Tmonitor.Enter(LFrameworkDic);    //https://quality.embarcadero.com/browse/RSP-23241
+  try                               //
+    if not LFrameworkDic.TryGetValue(Fwk, FrameworkMod) then
+    begin
+      FrameworkMod := LoadLibrary(PWideChar(Fwk));
+      LFrameworkDic.Add(Fwk, FrameworkMod);
+    end;
+  finally                         //
+    Tmonitor.exit(LFrameworkDic); //https://quality.embarcadero.com/browse/RSP-23241
+  end;                            //
 
   if FrameworkMod <> 0 then
     Result := GetProcAddress(FrameworkMod, PWideChar(ConstStr));
Index: rtl/ios/iOSapi.Security.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.Security.pas b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.Security.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.Security.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.Security.pas	(working copy)
@@ -620,6 +620,8 @@
 function kSecAttrKeyClassSymmetric: NSString;
 function kSecAttrKeyTypeRSA: NSString;
 function kSecAttrKeyTypeEC: NSString;
+function kSecValueRef: NSString; // https://quality.embarcadero.com/browse/RSP-20279
+function kSecValueData: NSString; // https://quality.embarcadero.com/browse/RSP-20279
 
 
 implementation
@@ -1250,6 +1252,18 @@
   result := CocoaNSStringConst(libSecurity, 'kSecAttrKeyTypeEC');
 end;
 
+// https://quality.embarcadero.com/browse/RSP-20279
+function kSecValueRef: NSString;
+begin
+  result := CocoaNSStringConst(libSecurity, 'kSecValueRef');
+end;
+
+// https://quality.embarcadero.com/browse/RSP-20279
+function kSecValueData: NSString;
+begin
+  result := CocoaNSStringConst(libSecurity, 'kSecValueData');
+end;
+
 {$IF defined(IOS) and NOT defined(CPUARM)}
 
 initialization
Index: rtl/ios/iOSapi.UIKit.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.UIKit.pas b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.UIKit.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.UIKit.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/ios/iOSapi.UIKit.pas	(working copy)
@@ -3828,7 +3828,7 @@
     function currentUserNotificationSettings: UIUserNotificationSettings; cdecl;
     function delegate: UIApplicationDelegate; cdecl;
     function enabledRemoteNotificationTypes: Pointer; cdecl;
-    procedure endBackgroundTask(identifier: Pointer); cdecl;
+    procedure endBackgroundTask(identifier: UIBackgroundTaskIdentifier); cdecl; // https://quality.embarcadero.com/browse/RSP-18656
     procedure endIgnoringInteractionEvents; cdecl;
     procedure endReceivingRemoteControlEvents; cdecl;
     procedure ignoreSnapshotOnNextApplicationLaunch; cdecl;
@@ -5119,6 +5119,8 @@
     procedure setTextColor(textColor: UIColor); cdecl;
     procedure setTintAdjustmentMode(mode: UIViewTintAdjustmentMode); cdecl;
     procedure setAttributedText(attributedText: NSAttributedString); cdecl;
+    procedure setDefaultTextAttributes(defaultTextAttributes: NSDictionary); cdecl; // https://quality.embarcadero.com/browse/RSP-16971
+    procedure setAttributedPlaceholder(attributedPlaceholder: NSAttributedString); cdecl; // https://quality.embarcadero.com/browse/RSP-16971
     function text: Pointer; cdecl;
     function textAlignment: UITextAlignment; cdecl;
     function textColor: UIColor; cdecl;
@@ -7216,8 +7218,14 @@
 function UIKeyboardCenterBeginUserInfoKey: NSString;
 function UIKeyboardCenterEndUserInfoKey: NSString;
 function UIKeyboardBoundsUserInfoKey: NSString;
+function UIApplicationOpenURLOptionsAnnotationKey: NSString;  // https://quality.embarcadero.com/browse/RSP-18013
+function UIApplicationOpenURLOptionsSourceApplicationKey: NSString; // https://quality.embarcadero.com/browse/RSP-18013
+function UIApplicationOpenSettingsURLString: NSString; // https://quality.embarcadero.com/browse/RSP-18013
+function UIBackgroundTaskInvalid: UIBackgroundTaskIdentifier; // https://quality.embarcadero.com/browse/RSP-18656
+function UIApplicationBackgroundFetchIntervalNever: NSTimeInterval; // https://quality.embarcadero.com/browse/RSP-18669
+function UIApplicationBackgroundFetchIntervalMinimum: NSTimeInterval; // https://quality.embarcadero.com/browse/RSP-18669
+function UIImagePickerControllerPHAsset: NSString; // https://quality.embarcadero.com/browse/RSP-21373
 
-
 // ===== External functions =====
 const
   libUIKit = '/System/Library/Frameworks/UIKit.framework/UIKit';
@@ -7353,11 +7361,17 @@
 {$IF defined(IOS) and NOT defined(CPUARM)}
 
 uses
+  System.SysUtils,
   Posix.Dlfcn;
 
 var
   UIKitModule: THandle;
 
+{$ELSE}
+
+uses
+  System.SysUtils;
+
 {$ENDIF IOS}
 
 const
@@ -8536,6 +8550,67 @@
   Result := CocoaNSStringConst(UIKitFwk, 'UIKeyboardBoundsUserInfoKey');
 end;
 
+// https://quality.embarcadero.com/browse/RSP-18013
+function UIApplicationOpenURLOptionsAnnotationKey: NSString;
+begin
+  if (TOSVersion.Check(9, 0)) then
+    Result := CocoaNSStringConst(UIKitFwk, 'UIApplicationOpenURLOptionsAnnotationKey')
+  else
+    Result := nil;
+end;
+
+// https://quality.embarcadero.com/browse/RSP-18013
+function UIApplicationOpenURLOptionsSourceApplicationKey: NSString;
+begin
+  if (TOSVersion.Check(9, 0)) then
+    Result := CocoaNSStringConst(UIKitFwk, 'UIApplicationOpenURLOptionsSourceApplicationKey')
+  else
+    Result := nil;
+end;
+
+// https://quality.embarcadero.com/browse/RSP-18013
+function UIApplicationOpenSettingsURLString: NSString;
+begin
+  if (TOSVersion.Check(8, 0)) then
+    Result := CocoaNSStringConst(UIKitFwk, 'UIApplicationOpenSettingsURLString')
+  else
+    Result := nil;
+end;
+
+// https://quality.embarcadero.com/browse/RSP-18656
+function UIBackgroundTaskInvalid: UIBackgroundTaskIdentifier;
+begin
+  Result := CocoaIntegerConst(UIKitFwk, 'UIBackgroundTaskInvalid');
+end;
+
+// https://quality.embarcadero.com/browse/RSP-18669
+function UIApplicationBackgroundFetchIntervalNever: NSTimeInterval;
+var Obj: Pointer;
+begin
+  Obj := CocoaPointerConst(UIKitFwk, 'UIApplicationBackgroundFetchIntervalNever');
+  if Obj <> nil then
+    Result := double(Obj^)
+  else
+    Result := 0;
+end;
+
+// https://quality.embarcadero.com/browse/RSP-18669
+function UIApplicationBackgroundFetchIntervalMinimum: NSTimeInterval;
+var Obj: Pointer;
+begin
+  Obj := CocoaPointerConst(UIKitFwk, 'UIApplicationBackgroundFetchIntervalMinimum');
+  if Obj <> nil then
+    Result := double(Obj^)
+  else
+    Result := 0;
+end;
+
+// https://quality.embarcadero.com/browse/RSP-21373
+function UIImagePickerControllerPHAsset: NSString;
+begin
+  Result := CocoaNSStringConst(UIKitFwk, 'UIImagePickerControllerPHAsset');
+end;
+
 {$IF defined(IOS) and NOT defined(CPUARM)}
 
 initialization
Index: rtl/win/Winapi.Isapi2.pas
===================================================================
diff --git a/Embarcadero/Sydney/10_4_2/rtl/win/Winapi.Isapi2.pas b/Embarcadero/Sydney/10_4_2/rtl/win/Winapi.Isapi2.pas
--- a/Embarcadero/Sydney/10_4_2/rtl/win/Winapi.Isapi2.pas	(revision 26937)
+++ b/Embarcadero/Sydney/10_4_2/rtl/win/Winapi.Isapi2.pas	(working copy)
@@ -397,7 +397,7 @@
     dwReserved: DWORD): Pointer; stdcall;
 
   TFilterServerSupportFunctionProc = function (var pfc{: THTTP_FILTER_CONTEXT};
-    sfReq: DWORD; pData: Pointer; ul1, ul2: DWORD): BOOL; stdcall;
+    sfReq: DWORD; pData: Pointer; ul1, ul2: ULONG_PTR): BOOL; stdcall; // https://quality.embarcadero.com/browse/RSP-33754
 
   PHTTP_FILTER_CONTEXT = ^THTTP_FILTER_CONTEXT;
   THTTP_FILTER_CONTEXT = record

unit uPSI_uib;
{$I uib.inc}
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;

type
(*----------------------------------------------------------------------------*)
  TPSImport_uib = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;


{ compile-time registration functions }
procedure SIRegister_TUIBConfig(CL: TPSPascalCompiler);
procedure SIRegister_TUIBEventThread(CL: TPSPascalCompiler);
procedure SIRegister_TUIBEvents(CL: TPSPascalCompiler);
procedure SIRegister_TUIBRepair(CL: TPSPascalCompiler);
procedure SIRegister_TUIBSecurity(CL: TPSPascalCompiler);
procedure SIRegister_TUserInfo(CL: TPSPascalCompiler);
procedure SIRegister_TUIBRestore(CL: TPSPascalCompiler);
procedure SIRegister_TUIBBackup(CL: TPSPascalCompiler);
procedure SIRegister_TUIBBackupRestore(CL: TPSPascalCompiler);
procedure SIRegister_TUIBService(CL: TPSPascalCompiler);
procedure SIRegister_TUIBScript(CL: TPSPascalCompiler);
procedure SIRegister_TUIBQuery(CL: TPSPascalCompiler);
procedure SIRegister_TUIBStatement(CL: TPSPascalCompiler);
procedure SIRegister_TUIBTransaction(CL: TPSPascalCompiler);
procedure SIRegister_TUIBDataBase(CL: TPSPascalCompiler);
procedure SIRegister_TMetaDataOptions(CL: TPSPascalCompiler);
procedure SIRegister_TUIBComponent(CL: TPSPascalCompiler);
procedure SIRegister_uib(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TUIBConfig(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBEventThread(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBEvents(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBRepair(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBSecurity(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUserInfo(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBRestore(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBBackup(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBBackupRestore(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBService(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBScript(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBQuery(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBStatement(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBTransaction(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBDataBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaDataOptions(CL: TPSRuntimeClassImporter);
procedure RIRegister_TUIBComponent(CL: TPSRuntimeClassImporter);
procedure RIRegister_uib(CL: TPSRuntimeClassImporter);

procedure Register;

implementation
uses
   Windows
  ,SyncObjs
  ,Contnrs
  ,uiblib
  ,uibase
  ,uibsqlparser
  ,uibconst
  ,uib
  ;

type
  TUIBStatementOverload = class(TUIBStatement)
  public
    procedure ReadBlobStream(const Index: Word; Stream: TStream);
    procedure ReadBlobString(const Index: Word; var str: string);
    procedure ReadBlobVariant(const Index: Word; var Value: Variant);
    procedure ReadBlobNameStream(const name: string; Stream: TStream);
    procedure ReadBlobNameString(const name: string; var str: string);
    procedure ReadBlobNameVariant(const name: string; var Value: Variant);
    procedure ParamsSetBlobStream(const Index: Word; Stream: TStream);
    procedure ParamsSetBlobString(const Index: Word; var str: string);
    procedure ParamsSetBlobNameStream(const Name: string; Stream: TStream);
    procedure ParamsSetBlobNameString(const Name: string; var str: string);
  end;

  TUIBDatabaseOverload = class(TUIBDatabase)
  public
    procedure RegisterExceptionByID(Excpt: EUIBExceptionClass; ID: Integer);
    function RegisterExceptionByName(Excpt: EUIBExceptionClass; const Name: string): Integer;
  end;

  TUIBTransactionOverload = class(TUIBTransaction)
  public
    procedure RemoveDatabaseByClass(ADataBase: TUIBDataBase);
    procedure RemoveDatabaseByIndex(Index: Integer);
  end;

const
  iptR = uPSCompiler.iptR;

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uib]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBConfig(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBService', 'TUIBConfig') do
  with CL.AddClassN(CL.FindClass('TUIBService'),'TUIBConfig') do
  begin
    RegisterMethod('Procedure ShutdownDatabase( Options : TShutdownMode; Wait : Integer)');
    RegisterMethod('Procedure SetSweepInterval( Value : Integer)');
    RegisterMethod('Procedure SetDBSqlDialect( Value : Integer)');
    RegisterMethod('Procedure SetPageBuffers( Value : Integer)');
    RegisterMethod('Procedure ActivateShadow');
    RegisterMethod('Procedure BringDatabaseOnline');
    RegisterMethod('Procedure SetReserveSpace( Value : Boolean)');
    RegisterMethod('Procedure SetAsyncMode( Value : Boolean)');
    RegisterMethod('Procedure SetReadOnly( Value : Boolean)');
    RegisterProperty('DatabaseName', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBEventThread(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TThread', 'TUIBEventThread') do
  with CL.AddClassN(CL.FindClass('TThread'),'TUIBEventThread') do
  begin
    RegisterMethod('Constructor Create( Owner : TUIBEvents; Block : Integer; SyncMainThread : boolean)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBEvents(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBComponent', 'TUIBEvents') do
  with CL.AddClassN(CL.FindClass('TUIBComponent'),'TUIBEvents') do
  begin
    RegisterMethod('Procedure RegisterEvents');
    RegisterMethod('Procedure UnRegisterEvents');
    RegisterMethod('Procedure SetAutoRegister( const Value : boolean)');
    RegisterProperty('AutoRegister', 'boolean', iptrw);
    RegisterProperty('Database', 'TUIBDataBase', iptrw);
    RegisterProperty('Events', 'TStrings', iptrw);
    RegisterProperty('Registered', 'boolean', iptrw);
    RegisterProperty('SyncMainThread', 'boolean', iptrw);
    RegisterProperty('OnEvent', 'TOnEvent', iptrw);
    RegisterProperty('OnException', 'TOnExceptionEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBRepair(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBService', 'TUIBRepair') do
  with CL.AddClassN(CL.FindClass('TUIBService'),'TUIBRepair') do
  begin
    RegisterMethod('Procedure Run');
    RegisterProperty('Options', 'TRepairOptions', iptrw);
    RegisterProperty('Database', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBSecurity(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBService', 'TUIBSecurity') do
  with CL.AddClassN(CL.FindClass('TUIBService'),'TUIBSecurity') do
  begin
    RegisterMethod('Procedure AddUser');
    RegisterMethod('Procedure DeleteUser');
    RegisterMethod('Procedure ModifyUser');
    RegisterMethod('Procedure DisplayUser');
    RegisterMethod('Procedure DisplayUsers');
    RegisterProperty('UserInfo', 'TUserInfo Integer', iptr);
    RegisterProperty('UserInfoCount', 'Integer', iptr);
    RegisterProperty('Role', 'string', iptrw);
    RegisterProperty('User', 'string', iptrw);
    RegisterProperty('Pass', 'string', iptrw);
    RegisterProperty('FirstName', 'string', iptrw);
    RegisterProperty('MiddleName', 'string', iptrw);
    RegisterProperty('LastName', 'string', iptrw);
    RegisterProperty('UserID', 'Integer', iptrw);
    RegisterProperty('GroupID', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUserInfo(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TUserInfo') do
  with CL.AddClassN(CL.FindClass('TObject'),'TUserInfo') do
  begin
    RegisterProperty('UserName', 'string', iptrw);
    RegisterProperty('FirstName', 'string', iptrw);
    RegisterProperty('MiddleName', 'string', iptrw);
    RegisterProperty('LastName', 'string', iptrw);
    RegisterProperty('GroupID', 'Integer', iptrw);
    RegisterProperty('UserID', 'Integer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBRestore(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBBackupRestore', 'TUIBRestore') do
  with CL.AddClassN(CL.FindClass('TUIBBackupRestore'),'TUIBRestore') do
  begin
    RegisterProperty('Options', 'TRestoreOptions', iptrw);
    RegisterProperty('PageSize', 'Cardinal', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBBackup(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBBackupRestore', 'TUIBBackup') do
  with CL.AddClassN(CL.FindClass('TUIBBackupRestore'),'TUIBBackup') do
  begin
    RegisterProperty('Options', 'TBackupOptions', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBBackupRestore(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBService', 'TUIBBackupRestore') do
  with CL.AddClassN(CL.FindClass('TUIBService'),'TUIBBackupRestore') do
  begin
    RegisterMethod('Procedure Run');
    RegisterProperty('BackupFiles', 'TStrings', iptrw);
    RegisterProperty('Database', 'string', iptrw);
    RegisterProperty('OnVerbose', 'TVerboseEvent', iptrw);
    RegisterProperty('Verbose', 'boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBService(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBComponent', 'TUIBService') do
  with CL.AddClassN(CL.FindClass('TUIBComponent'),'TUIBService') do
  begin
    RegisterProperty('UserName', 'string', iptrw);
    RegisterProperty('PassWord', 'string', iptrw);
    RegisterProperty('Host', 'string', iptrw);
    RegisterProperty('Protocol', 'TUIBProtocol', iptrw);
    RegisterProperty('LibraryName', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBScript(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBComponent', 'TUIBScript') do
  with CL.AddClassN(CL.FindClass('TUIBComponent'),'TUIBScript') do
  begin
    RegisterMethod('Procedure ExecuteScript');
    RegisterProperty('Transaction', 'TUIBTransaction', iptrw);
    RegisterProperty('Script', 'TStrings', iptrw);
    RegisterProperty('AutoDDL', 'boolean', iptrw);
    RegisterProperty('OnParse', 'TOnParse', iptrw);
    RegisterProperty('OnComment', 'TOnComment', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBQuery(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBStatement', 'TUIBQuery') do
  with CL.AddClassN(CL.FindClass('TUIBStatement'),'TUIBQuery') do
  begin
    RegisterMethod('Procedure BuildStoredProc( const StoredProc : string; forSelect : boolean)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBStatement(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBComponent', 'TUIBStatement') do
  with CL.AddClassN(CL.FindClass('TUIBComponent'),'TUIBStatement') do
  begin
    RegisterMethod('Procedure Close( const Mode : TEndTransMode)');
    RegisterMethod('Procedure CloseCursor');
    RegisterMethod('Procedure FetchAll');
    RegisterMethod('Procedure Open( FetchFirst : boolean)');
    RegisterMethod('Procedure Prepare');
    RegisterMethod('Procedure Execute');
    RegisterMethod('Procedure ExecSQL');
    RegisterMethod('Procedure Next');
    RegisterMethod('Procedure Prior');
    RegisterMethod('Procedure Last');
    RegisterMethod('Procedure First');
    RegisterMethod('Procedure ReadBlobStream( const Index : Word; Stream : TStream)');
    RegisterMethod('Procedure ReadBlobString( const Index : Word; var str : string)');
    RegisterMethod('Procedure ReadBlobVariant( const Index : Word; var Value : Variant)');
    RegisterMethod('Procedure ReadBlobNameStream( const name : string; Stream : TStream)');
    RegisterMethod('Procedure ReadBlobNameString( const name : string; var str : string)');
    RegisterMethod('Procedure ReadBlobNameVariant( const name : string; var Value : Variant)');
    RegisterMethod('Procedure ParamsSetBlobStream( const Index : Word; Stream : TStream)');
    RegisterMethod('Procedure ParamsSetBlobString( const Index : Word; var str : string)');
    RegisterMethod('Procedure ParamsSetBlobNameStream( const Name : string; Stream : TStream)');
    RegisterMethod('Procedure ParamsSetBlobNameString( const Name : string; var str : string)');
    RegisterMethod('Function FieldBlobSize( const Index : Word) : Cardinal');
    RegisterMethod('Function ParamBlobSize( const Index : Word) : Cardinal');
    RegisterProperty('StHandle', 'IscStmtHandle', iptr);
    RegisterProperty('Fields', 'TSQLResult', iptr);
    RegisterProperty('Params', 'TSQLParams', iptr);
    RegisterProperty('CursorName', 'string', iptr);
    RegisterProperty('CurrentState', 'TQueryState', iptr);
    RegisterProperty('Eof', 'boolean', iptr);
    RegisterProperty('Bof', 'boolean', iptr);
    RegisterProperty('ParseParams', 'boolean', iptrw);
    RegisterProperty('Plan', 'string', iptr);
    RegisterProperty('StatementType', 'TUIBStatementType', iptr);
    RegisterProperty('RowsAffected', 'Cardinal', iptr);
    RegisterProperty('UseCursor', 'boolean', iptrw);
    RegisterProperty('SQL', 'TStrings', iptrw);
    RegisterProperty('Transaction', 'TUIBTransaction', iptrw);
    RegisterProperty('DataBase', 'TUIBDataBase', iptrw);
    RegisterProperty('OnError', 'TEndTransMode', iptrw);
    RegisterProperty('CachedFetch', 'boolean', iptrw);
    RegisterProperty('FetchBlobs', 'boolean', iptrw);
    RegisterProperty('BufferChunks', 'Cardinal', iptrw);
    RegisterProperty('OnClose', 'TNotifyEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBTransaction(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBComponent', 'TUIBTransaction') do
  with CL.AddClassN(CL.FindClass('TUIBComponent'),'TUIBTransaction') do
  begin
    RegisterMethod('Procedure AddDataBase( ADataBase : TUIBDataBase)');
    RegisterMethod('Procedure RemoveDatabaseByClass( ADataBase : TUIBDataBase)');
    RegisterMethod('Procedure RemoveDatabaseByIndex( Index : Integer)');
    RegisterMethod('Procedure StartTransaction');
    RegisterMethod('Procedure Commit');
    RegisterMethod('Procedure CommitRetaining');
    RegisterMethod('Procedure RollBack');
    RegisterMethod('Procedure RollBackRetaining');
    RegisterMethod('Procedure ExecuteImmediate( const sql : string)');
{$IFDEF IB71_UP}
    RegisterMethod('Procedure SavepointRelease( const Name : string)');
    RegisterMethod('Procedure SavepointRollback( const Name : string; Option : Word)');
    RegisterMethod('Procedure SavepointStart( const Name : string)');
{$ENDIF}
    RegisterProperty('InTransaction', 'boolean', iptr);
    RegisterProperty('TrHandle', 'IscTrHandle', iptr);
    RegisterProperty('Statements', 'TUIBStatement Integer', iptr);
    RegisterProperty('StatementsCount', 'Integer', iptr);
    RegisterProperty('Databases', 'TUIBDataBase Integer', iptr);
    RegisterProperty('DatabasesCount', 'Integer', iptr);
    RegisterProperty('DataBase', 'TUIBDataBase', iptrw);
    RegisterProperty('Options', 'TTransParams', iptrw);
    RegisterProperty('LockRead', 'string', iptrw);
    RegisterProperty('LockWrite', 'string', iptrw);
    RegisterProperty('OnStartTransaction', 'TNotifyEvent', iptrw);
    RegisterProperty('OnEndTransaction', 'TOnEndTransaction', iptrw);
    RegisterProperty('AutoRetain', 'boolean', iptrw);
    RegisterProperty('AutoStart', 'boolean', iptrw);
    RegisterProperty('AutoStop', 'boolean', iptrw);
    RegisterProperty('DefaultAction', 'TEndTransMode', iptrw);
{$IFDEF FB20_UP}
    RegisterProperty('LockTimeout', 'Word', iptrw);
{$ENDIF}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBDataBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TUIBComponent', 'TUIBDataBase') do
  with CL.AddClassN(CL.FindClass('TUIBComponent'),'TUIBDataBase') do
  begin
    RegisterMethod('Procedure ExecuteImmediate( const Statement : string)');
    RegisterMethod('Procedure ClearExceptions');
    RegisterMethod('Procedure RegisterExceptionByID( Excpt : EUIBExceptionClass; ID : Integer)');
    RegisterMethod('Function RegisterExceptionByName( Excpt : EUIBExceptionClass; const Name : string) : Integer');
    RegisterMethod('Procedure UnRegisterException( Number : Integer)');
    RegisterMethod('Procedure UnRegisterExceptions( Excpt : EUIBExceptionClass)');
    RegisterMethod('Procedure CreateDatabase( PageSize : Integer)');
    RegisterMethod('Function GetMetadata( Refresh : boolean) : TObject');
    RegisterMethod('Procedure ActiveAllTriggers');
    RegisterMethod('Procedure DeactiveAllTriggers');
    RegisterMethod('Procedure RecomputeSelectivityIndices');
    RegisterMethod('Procedure RecompileAllProcedures');
    RegisterMethod('Procedure RecompileAllTriggers');
    RegisterProperty('DbHandle', 'IscDbHandle', iptrw);
    RegisterProperty('IsHandleShared', 'boolean', iptr);
    RegisterProperty('Transactions', 'TUIBTransaction Cardinal', iptr);
    RegisterProperty('TransactionsCount', 'Cardinal', iptr);
    RegisterProperty('Lib', 'TUIBLibrary', iptr);
    RegisterProperty('InfoReads', 'Integer', iptr);
    RegisterProperty('InfoWrites', 'Integer', iptr);
    RegisterProperty('InfoFetches', 'Integer', iptr);
    RegisterProperty('InfoMarks', 'Integer', iptr);
    RegisterProperty('InfoPageSize', 'Integer', iptr);
    RegisterProperty('InfoNumBuffers', 'Integer', iptr);
    RegisterProperty('InfoSetPageBuffers', 'Integer', iptr);
    RegisterProperty('InfoCurrentMemory', 'Integer', iptr);
    RegisterProperty('InfoMaxMemory', 'Integer', iptr);
    RegisterProperty('InfoAttachmentId', 'Integer', iptr);
    RegisterProperty('InfoOdsVersion', 'Integer', iptr);
    RegisterProperty('InfoOdsMinorVersion', 'Integer', iptr);
    RegisterProperty('InfoAllocation', 'Integer', iptr);
    RegisterProperty('InfoSweepInterval', 'Integer', iptr);
    RegisterProperty('InfoNoReserve', 'boolean', iptr);
    RegisterProperty('InfoForcedWrites', 'boolean', iptr);
    RegisterProperty('InfoPageErrors', 'Integer', iptr);
    RegisterProperty('InfoBPageErrors', 'Integer', iptr);
    RegisterProperty('InfoRecordErrors', 'Integer', iptr);
    RegisterProperty('InfoDPageErrors', 'Integer', iptr);
    RegisterProperty('InfoIPageErrors', 'Integer', iptr);
    RegisterProperty('InfoPPageErrors', 'Integer', iptr);
    RegisterProperty('InfoTPageErrors', 'Integer', iptr);
    RegisterProperty('InfoDbSqlDialect', 'Integer', iptr);
    RegisterProperty('InfoDbReadOnly', 'boolean', iptr);
    RegisterProperty('InfoDbSizeInPages', 'Integer', iptr);
    RegisterProperty('InfoDbFileName', 'string', iptr);
    RegisterProperty('InfoDbSiteName', 'string', iptr);
    RegisterProperty('InfoImplementation', 'Integer', iptr);
    RegisterProperty('InfoBaseLevel', 'Integer', iptr);
    RegisterProperty('InfoVersion', 'string', iptr);
    RegisterProperty('InfoReadSeqCount', 'Integer', iptr);
    RegisterProperty('InfoReadIdxCount', 'Integer', iptr);
    RegisterProperty('InfoUpdateCount', 'Integer', iptr);
    RegisterProperty('InfoInsertCount', 'Integer', iptr);
    RegisterProperty('InfoDeleteCount', 'Integer', iptr);
    RegisterProperty('InfoBackoutCount', 'Integer', iptr);
    RegisterProperty('InfoPurgeCount', 'Integer', iptr);
    RegisterProperty('InfoExpungeCount', 'Integer', iptr);
    RegisterProperty('InfoLimbo', 'integer', iptr);
    RegisterProperty('InfoUserNames', 'Integer', iptr);
{$IFDEF FB102_UP}
    RegisterProperty('InfoOldestTransaction', 'Integer', iptr);
    RegisterProperty('InfoOldestActive', 'Integer', iptr);
    RegisterProperty('InfoOldestSnapshot', 'Integer', iptr);
    RegisterProperty('InfoNextTransaction', 'Integer', iptr);
    RegisterProperty('InfoDbProvider', 'Integer', iptr);
    RegisterProperty('InfoDbClass', 'Integer', iptr);
    RegisterProperty('InfoAttCharset', 'Integer', iptr);
    RegisterProperty('InfoFirebirdVersion', 'string', iptr);
    RegisterProperty('InfoActiveTransactions', 'Integer', iptr);
{$ENDIF}
{$IFDEF IB7_UP}
    RegisterProperty('InfoDbReads', 'Integer', iptr);
    RegisterProperty('InfoDbWrites', 'Integer', iptr);
    RegisterProperty('InfoDbFetches', 'Integer', iptr);
    RegisterProperty('InfoDbMarks', 'Integer', iptr);
    RegisterProperty('InfoDbGroupCommit', 'boolean', iptr);
{$ENDIF}
{$IFDEF IB71_UP}
    RegisterProperty('InfoAttCharset', 'Integer', iptr);
    RegisterProperty('InfoSvrMinVer', 'Integer', iptr);
{$ENDIF}
    RegisterProperty('Params', 'TStrings', iptrw);
    RegisterProperty('DatabaseName', 'string', iptrw);
    RegisterProperty('SQLDialect', 'Integer', iptrw);
    RegisterProperty('CharacterSet', 'TCharacterSet', iptrw);
    RegisterProperty('UserName', 'string', iptrw);
    RegisterProperty('PassWord', 'string', iptrw);
    RegisterProperty('LibraryName', 'string', iptrw);
    RegisterProperty('AfterConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('AfterDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('OnConnectionLost', 'TNotifyEvent', iptrw);
    RegisterProperty('SegmentSize', 'Word', iptrw);
    RegisterProperty('MetaDataOptions', 'TMetaDataOptions', iptr);
    RegisterProperty('Shutdown', 'TShutdownOptions', iptrw);
    RegisterProperty('Connected', 'boolean', iptrw);
    RegisterProperty('Role', 'string', iptrw);
    RegisterProperty('OnInfoReadSeqCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoReadIdxCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoUpdateCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoInsertCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoDeleteCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoBackoutCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoPurgeCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoExpungeCount', 'TOnInfoTableOpCount', iptrw);
    RegisterProperty('OnInfoActiveTransactions', 'TOnInfoIntegerCount', iptrw);
    RegisterProperty('OnInfoLimbo', 'TOnInfoIntegerCount', iptrw);
    RegisterProperty('OnInfoUserNames', 'TOnInfoStringCount', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaDataOptions(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TMetaDataOptions') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TMetaDataOptions') do
  begin
    RegisterMethod('Constructor Create');
    RegisterProperty('Objects', 'TOIDDatabases', iptrw);
    RegisterProperty('Tables', 'TOIDTables', iptrw);
    RegisterProperty('Views', 'TOIDViews', iptrw);
    RegisterProperty('Procedures', 'TOIDProcedures', iptrw);
    RegisterProperty('UDFs', 'TOIDUDFs', iptrw);
    RegisterProperty('SysInfos', 'boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TUIBComponent(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TUIBComponent') do
{$IFDEF UIB_NO_COMPONENT}
  with CL.AddClassN(CL.FindClass('TObject'),'TUIBComponent') do
{$ELSE}
  with CL.AddClassN(CL.FindClass('TComponent'),'TUIBComponent') do
{$ENDIF}
  begin
{$IFDEF UIB_NO_COMPONENT}
    RegisterMethod('Constructor Create');
{$ENDIF}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uib(CL: TPSPascalCompiler);
begin
  SIRegister_TUIBComponent(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'TUIBTransaction');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TUIBQuery');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TUIBStatement');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TUIBDataBase');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TUIBEvents');
  SIRegister_TMetaDataOptions(CL);
  CL.AddTypeS('TShutdownOption', '( sdCache, sdAttachment, sdTransaction, sdFor'
   +'ce )');
  CL.AddTypeS('TShutdownOptions', 'set of TShutdownOption');
  CL.AddTypeS('TTableOperation', 'record TableId : Word; Count : Integer; end');
  CL.AddTypeS('TOnInfoTableOpCount', 'Procedure ( Sender : TObject; var TableOp'
   +' : TTableOperation)');
  CL.AddTypeS('TOnInfoIntegerCount', 'Procedure ( Sender : TObject; Value : Int'
   +'eger)');
  CL.AddTypeS('TOnInfoStringCount', 'Procedure ( Sender : TObject; Value : stri'
   +'ng)');
  SIRegister_TUIBDataBase(CL);
  CL.AddTypeS('TEndTransMode', '( etmDefault, etmStayIn, etmCommit, etmCommitRe'
   +'taining, etmRollback, etmRollbackRetaining )');
  CL.AddTypeS('TQueryState', '( qsDataBase, qsTransaction, qsExecImme, qsStatem'
   +'ent, qsPrepare, qsExecute )');
  CL.AddTypeS('TTransParam', '( tpConsistency, tpConcurrency, tpShared, tpProte'
   +'cted, tpExclusive, tpWait, tpNowait, tpRead, tpWrite, tpLockRead, tpLockWr'
   +'ite, tpVerbTime, tpCommitTime, tpIgnoreLimbo, tpReadCommitted, tpAutoCommi'
   +'t, tpRecVersion, tpNoRecVersion, tpRestartRequests, tpNoAutoUndo'
{$IFDEF FB20_UP}
   +', tpLockTimeout'
{$ENDIF}
   +')');
  CL.AddTypeS('TTransParams', 'set of TTransParam');
  CL.AddTypeS('TOnEndTransaction', 'Procedure ( Sender : TObject; var Mode : TE'
   +'ndTransMode)');
  SIRegister_TUIBTransaction(CL);
  SIRegister_TUIBStatement(CL);
  SIRegister_TUIBQuery(CL);
  CL.AddTypeS('TOnParse', 'Procedure ( Sender : TObject; NodeType : TSQLStateme'
   +'nt; const Statement : string)');
  SIRegister_TUIBScript(CL);
  CL.AddTypeS('TUIBProtocol', '( proLocalHost, proTCPIP, proNetBEUI )');
  SIRegister_TUIBService(CL);
  CL.AddTypeS('TVerboseEvent', 'Procedure ( Sender : TObject; Message : string)');
  SIRegister_TUIBBackupRestore(CL);
  CL.AddTypeS('TBackupOption', '( boIgnoreChecksums, boIgnoreLimbo, boMetadataO'
   +'nly, boNoGarbageCollection, boOldMetadataDesc, boNonTransportable, boConve'
   +'rtExtTables, boExpand )');
  CL.AddTypeS('TBackupOptions', 'set of TBackupOption');
  SIRegister_TUIBBackup(CL);
  CL.AddTypeS('TRestoreOption', '( roDeactivateIndexes, roNoShadow, roNoValidit'
   +'yCheck, roOneRelationAtATime, roReplace, roCreateNewDB, roUseAllSpace'
{$IFDEF IB71_UP}
   +', roValidate'
{$ENDIF}
   +')');
  CL.AddTypeS('TRestoreOptions', 'set of TRestoreOption');
  SIRegister_TUIBRestore(CL);
  CL.AddTypeS('TSecurityAction', '( saAddUser, saDeleteUser, saModifyUser, saDi'
   +'splayUser, saDisplayUsers )');
  CL.AddTypeS('TSecurityParam', '( spRole, spUser, spPass, spFirstName, spMiddl'
   +'eName, spLastName, spUserID, spGroupID )');
  CL.AddTypeS('TSecurityParams', 'set of TSecurityParam');
  SIRegister_TUserInfo(CL);
  SIRegister_TUIBSecurity(CL);
  CL.AddTypeS('TRepairOption', '( roValidateDB, roValidateFull, roSweepDB, roMe'
   +'ndDB, roListLimboTrans, roCheckDB, roIgnoreChecksum, roKillShadows )');
  CL.AddTypeS('TRepairOptions', 'set of TRepairOption');
  SIRegister_TUIBRepair(CL);
  CL.AddTypeS('TOnEvent', 'Procedure ( Sender : TObject; const EventName : stri'
   +'ng; Count : Integer; var Cancel : boolean)');
  CL.AddTypeS('TOnExceptionEvent', 'Procedure ( Error : EException)');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TUIBEventThread');
  SIRegister_TUIBEvents(CL);
  SIRegister_TUIBEventThread(CL);
  CL.AddTypeS('TShutdownMode', '( smForced, smDenyTransaction, smDenyAttachment'
   +' )');
  SIRegister_TUIBConfig(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TUIBConfigDatabaseName_W(Self: TUIBConfig; const T: String);
begin Self.DatabaseName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBConfigDatabaseName_R(Self: TUIBConfig; var T: String);
begin T := Self.DatabaseName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsOnException_W(Self: TUIBEvents; const T: TOnExceptionEvent);
begin Self.OnException := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsOnException_R(Self: TUIBEvents; var T: TOnExceptionEvent);
begin T := Self.OnException; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsOnEvent_W(Self: TUIBEvents; const T: TOnEvent);
begin Self.OnEvent := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsOnEvent_R(Self: TUIBEvents; var T: TOnEvent);
begin T := Self.OnEvent; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsSyncMainThread_W(Self: TUIBEvents; const T: boolean);
begin Self.SyncMainThread := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsSyncMainThread_R(Self: TUIBEvents; var T: boolean);
begin T := Self.SyncMainThread; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsRegistered_W(Self: TUIBEvents; const T: boolean);
begin Self.Registered := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsRegistered_R(Self: TUIBEvents; var T: boolean);
begin T := Self.Registered; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsEvents_W(Self: TUIBEvents; const T: TStrings);
begin Self.Events := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsEvents_R(Self: TUIBEvents; var T: TStrings);
begin T := Self.Events; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsDatabase_W(Self: TUIBEvents; const T: TUIBDataBase);
begin Self.Database := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsDatabase_R(Self: TUIBEvents; var T: TUIBDataBase);
begin T := Self.Database; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsAutoRegister_W(Self: TUIBEvents; const T: boolean);
begin Self.AutoRegister := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBEventsAutoRegister_R(Self: TUIBEvents; var T: boolean);
begin T := Self.AutoRegister; end;

(*----------------------------------------------------------------------------*)
procedure TUIBRepairDatabase_W(Self: TUIBRepair; const T: string);
begin Self.Database := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBRepairDatabase_R(Self: TUIBRepair; var T: string);
begin T := Self.Database; end;

(*----------------------------------------------------------------------------*)
procedure TUIBRepairOptions_W(Self: TUIBRepair; const T: TRepairOptions);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBRepairOptions_R(Self: TUIBRepair; var T: TRepairOptions);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityGroupID_W(Self: TUIBSecurity; const T: Integer);
begin Self.GroupID := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityGroupID_R(Self: TUIBSecurity; var T: Integer);
begin T := Self.GroupID; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityUserID_W(Self: TUIBSecurity; const T: Integer);
begin Self.UserID := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityUserID_R(Self: TUIBSecurity; var T: Integer);
begin T := Self.UserID; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityLastName_W(Self: TUIBSecurity; const T: string);
begin Self.LastName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityLastName_R(Self: TUIBSecurity; var T: string);
begin T := Self.LastName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityMiddleName_W(Self: TUIBSecurity; const T: string);
begin Self.MiddleName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityMiddleName_R(Self: TUIBSecurity; var T: string);
begin T := Self.MiddleName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityFirstName_W(Self: TUIBSecurity; const T: string);
begin Self.FirstName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityFirstName_R(Self: TUIBSecurity; var T: string);
begin T := Self.FirstName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityPass_W(Self: TUIBSecurity; const T: string);
begin Self.Pass := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityPass_R(Self: TUIBSecurity; var T: string);
begin T := Self.Pass; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityUser_W(Self: TUIBSecurity; const T: string);
begin Self.User := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityUser_R(Self: TUIBSecurity; var T: string);
begin T := Self.User; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityRole_W(Self: TUIBSecurity; const T: string);
begin Self.Role := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityRole_R(Self: TUIBSecurity; var T: string);
begin T := Self.Role; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityUserInfoCount_R(Self: TUIBSecurity; var T: Integer);
begin T := Self.UserInfoCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBSecurityUserInfo_R(Self: TUIBSecurity; var T: TUserInfo; const t1: Integer);
begin T := Self.UserInfo[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoUserID_W(Self: TUserInfo; const T: Integer);
Begin Self.UserID := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoUserID_R(Self: TUserInfo; var T: Integer);
Begin T := Self.UserID; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoGroupID_W(Self: TUserInfo; const T: Integer);
Begin Self.GroupID := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoGroupID_R(Self: TUserInfo; var T: Integer);
Begin T := Self.GroupID; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoLastName_W(Self: TUserInfo; const T: string);
Begin Self.LastName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoLastName_R(Self: TUserInfo; var T: string);
Begin T := Self.LastName; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoMiddleName_W(Self: TUserInfo; const T: string);
Begin Self.MiddleName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoMiddleName_R(Self: TUserInfo; var T: string);
Begin T := Self.MiddleName; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoFirstName_W(Self: TUserInfo; const T: string);
Begin Self.FirstName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoFirstName_R(Self: TUserInfo; var T: string);
Begin T := Self.FirstName; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoUserName_W(Self: TUserInfo; const T: string);
Begin Self.UserName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUserInfoUserName_R(Self: TUserInfo; var T: string);
Begin T := Self.UserName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBRestorePageSize_W(Self: TUIBRestore; const T: Cardinal);
begin Self.PageSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBRestorePageSize_R(Self: TUIBRestore; var T: Cardinal);
begin T := Self.PageSize; end;

(*----------------------------------------------------------------------------*)
procedure TUIBRestoreOptions_W(Self: TUIBRestore; const T: TRestoreOptions);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBRestoreOptions_R(Self: TUIBRestore; var T: TRestoreOptions);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupOptions_W(Self: TUIBBackup; const T: TBackupOptions);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupOptions_R(Self: TUIBBackup; var T: TBackupOptions);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupRestoreVerbose_W(Self: TUIBBackupRestore; const T: boolean);
begin Self.Verbose := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupRestoreVerbose_R(Self: TUIBBackupRestore; var T: boolean);
begin T := Self.Verbose; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupRestoreOnVerbose_W(Self: TUIBBackupRestore; const T: TVerboseEvent);
begin Self.OnVerbose := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupRestoreOnVerbose_R(Self: TUIBBackupRestore; var T: TVerboseEvent);
begin T := Self.OnVerbose; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupRestoreDatabase_W(Self: TUIBBackupRestore; const T: String);
begin Self.Database := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupRestoreDatabase_R(Self: TUIBBackupRestore; var T: String);
begin T := Self.Database; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupRestoreBackupFiles_W(Self: TUIBBackupRestore; const T: TStrings);
begin Self.BackupFiles := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBBackupRestoreBackupFiles_R(Self: TUIBBackupRestore; var T: TStrings);
begin T := Self.BackupFiles; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServiceLibraryName_W(Self: TUIBService; const T: string);
begin Self.LibraryName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServiceLibraryName_R(Self: TUIBService; var T: string);
begin T := Self.LibraryName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServiceProtocol_W(Self: TUIBService; const T: TUIBProtocol);
begin Self.Protocol := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServiceProtocol_R(Self: TUIBService; var T: TUIBProtocol);
begin T := Self.Protocol; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServiceHost_W(Self: TUIBService; const T: string);
begin Self.Host := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServiceHost_R(Self: TUIBService; var T: string);
begin T := Self.Host; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServicePassWord_W(Self: TUIBService; const T: string);
begin Self.PassWord := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServicePassWord_R(Self: TUIBService; var T: string);
begin T := Self.PassWord; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServiceUserName_W(Self: TUIBService; const T: string);
begin Self.UserName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBServiceUserName_R(Self: TUIBService; var T: string);
begin T := Self.UserName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptOnComment_W(Self: TUIBScript; const T: TOnComment);
begin Self.OnComment := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptOnComment_R(Self: TUIBScript; var T: TOnComment);
begin T := Self.OnComment; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptOnParse_W(Self: TUIBScript; const T: TOnParse);
begin Self.OnParse := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptOnParse_R(Self: TUIBScript; var T: TOnParse);
begin T := Self.OnParse; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptAutoDDL_W(Self: TUIBScript; const T: boolean);
begin Self.AutoDDL := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptAutoDDL_R(Self: TUIBScript; var T: boolean);
begin T := Self.AutoDDL; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptScript_W(Self: TUIBScript; const T: TStrings);
begin Self.Script := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptScript_R(Self: TUIBScript; var T: TStrings);
begin T := Self.Script; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptTransaction_W(Self: TUIBScript; const T: TUIBTransaction);
begin Self.Transaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBScriptTransaction_R(Self: TUIBScript; var T: TUIBTransaction);
begin T := Self.Transaction; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementOnClose_W(Self: TUIBStatement; const T: TNotifyEvent);
begin Self.OnClose := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementOnClose_R(Self: TUIBStatement; var T: TNotifyEvent);
begin T := Self.OnClose; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementBufferChunks_W(Self: TUIBStatement; const T: Cardinal);
begin Self.BufferChunks := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementBufferChunks_R(Self: TUIBStatement; var T: Cardinal);
begin T := Self.BufferChunks; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementFetchBlobs_W(Self: TUIBStatement; const T: boolean);
begin Self.FetchBlobs := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementFetchBlobs_R(Self: TUIBStatement; var T: boolean);
begin T := Self.FetchBlobs; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementCachedFetch_W(Self: TUIBStatement; const T: boolean);
begin Self.CachedFetch := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementCachedFetch_R(Self: TUIBStatement; var T: boolean);
begin T := Self.CachedFetch; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementOnError_W(Self: TUIBStatement; const T: TEndTransMode);
begin Self.OnError := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementOnError_R(Self: TUIBStatement; var T: TEndTransMode);
begin T := Self.OnError; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementDataBase_W(Self: TUIBStatement; const T: TUIBDataBase);
begin Self.DataBase := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementDataBase_R(Self: TUIBStatement; var T: TUIBDataBase);
begin T := Self.DataBase; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementTransaction_W(Self: TUIBStatement; const T: TUIBTransaction);
begin Self.Transaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementTransaction_R(Self: TUIBStatement; var T: TUIBTransaction);
begin T := Self.Transaction; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementSQL_W(Self: TUIBStatement; const T: TStrings);
begin Self.SQL := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementSQL_R(Self: TUIBStatement; var T: TStrings);
begin T := Self.SQL; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementUseCursor_W(Self: TUIBStatement; const T: boolean);
begin Self.UseCursor := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementUseCursor_R(Self: TUIBStatement; var T: boolean);
begin T := Self.UseCursor; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementRowsAffected_R(Self: TUIBStatement; var T: Cardinal);
begin T := Self.RowsAffected; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementStatementType_R(Self: TUIBStatement; var T: TUIBStatementType);
begin T := Self.StatementType; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementPlan_R(Self: TUIBStatement; var T: string);
begin T := Self.Plan; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementParseParams_W(Self: TUIBStatement; const T: boolean);
begin Self.ParseParams := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementParseParams_R(Self: TUIBStatement; var T: boolean);
begin T := Self.ParseParams; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementBof_R(Self: TUIBStatement; var T: boolean);
begin T := Self.Bof; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementEof_R(Self: TUIBStatement; var T: boolean);
begin T := Self.Eof; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementCurrentState_R(Self: TUIBStatement; var T: TQueryState);
begin T := Self.CurrentState; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementCursorName_R(Self: TUIBStatement; var T: string);
begin T := Self.CursorName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementParams_R(Self: TUIBStatement; var T: TSQLParams);
begin T := Self.Params; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementFields_R(Self: TUIBStatement; var T: TSQLResult);
begin T := Self.Fields; end;

(*----------------------------------------------------------------------------*)
procedure TUIBStatementStHandle_R(Self: TUIBStatement; var T: IscStmtHandle);
begin T := Self.StHandle; end;

{$IFDEF FB20_UP}
(*----------------------------------------------------------------------------*)
procedure TUIBTransactionLockTimeout_W(Self: TUIBTransaction; const T: Word);
begin Self.LockTimeout := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionLockTimeout_R(Self: TUIBTransaction; var T: Word);
begin T := Self.LockTimeout; end;
{$ENDIF}

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionDefaultAction_W(Self: TUIBTransaction; const T: TEndTransMode);
begin Self.DefaultAction := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionDefaultAction_R(Self: TUIBTransaction; var T: TEndTransMode);
begin T := Self.DefaultAction; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionAutoStop_W(Self: TUIBTransaction; const T: boolean);
begin Self.AutoStop := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionAutoStop_R(Self: TUIBTransaction; var T: boolean);
begin T := Self.AutoStop; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionAutoStart_W(Self: TUIBTransaction; const T: boolean);
begin Self.AutoStart := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionAutoStart_R(Self: TUIBTransaction; var T: boolean);
begin T := Self.AutoStart; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionAutoRetain_W(Self: TUIBTransaction; const T: boolean);
begin Self.AutoRetain := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionAutoRetain_R(Self: TUIBTransaction; var T: boolean);
begin T := Self.AutoRetain; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionOnEndTransaction_W(Self: TUIBTransaction; const T: TOnEndTransaction);
begin Self.OnEndTransaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionOnEndTransaction_R(Self: TUIBTransaction; var T: TOnEndTransaction);
begin T := Self.OnEndTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionOnStartTransaction_W(Self: TUIBTransaction; const T: TNotifyEvent);
begin Self.OnStartTransaction := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionOnStartTransaction_R(Self: TUIBTransaction; var T: TNotifyEvent);
begin T := Self.OnStartTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionLockWrite_W(Self: TUIBTransaction; const T: string);
begin Self.LockWrite := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionLockWrite_R(Self: TUIBTransaction; var T: string);
begin T := Self.LockWrite; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionLockRead_W(Self: TUIBTransaction; const T: string);
begin Self.LockRead := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionLockRead_R(Self: TUIBTransaction; var T: string);
begin T := Self.LockRead; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionOptions_W(Self: TUIBTransaction; const T: TTransParams);
begin Self.Options := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionOptions_R(Self: TUIBTransaction; var T: TTransParams);
begin T := Self.Options; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionDataBase_W(Self: TUIBTransaction; const T: TUIBDataBase);
begin Self.DataBase := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionDataBase_R(Self: TUIBTransaction; var T: TUIBDataBase);
begin T := Self.DataBase; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionDatabasesCount_R(Self: TUIBTransaction; var T: Integer);
begin T := Self.DatabasesCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionDatabases_R(Self: TUIBTransaction; var T: TUIBDataBase; const t1: Integer);
begin T := Self.Databases[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionStatementsCount_R(Self: TUIBTransaction; var T: Integer);
begin T := Self.StatementsCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionStatements_R(Self: TUIBTransaction; var T: TUIBStatement; const t1: Integer);
begin T := Self.Statements[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionTrHandle_R(Self: TUIBTransaction; var T: IscTrHandle);
begin T := Self.TrHandle; end;

(*----------------------------------------------------------------------------*)
procedure TUIBTransactionInTransaction_R(Self: TUIBTransaction; var T: boolean);
begin T := Self.InTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoUserNames_W(Self: TUIBDataBase; const T: TOnInfoStringCount);
begin Self.OnInfoUserNames := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoUserNames_R(Self: TUIBDataBase; var T: TOnInfoStringCount);
begin T := Self.OnInfoUserNames; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoLimbo_W(Self: TUIBDataBase; const T: TOnInfoIntegerCount);
begin Self.OnInfoLimbo := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoLimbo_R(Self: TUIBDataBase; var T: TOnInfoIntegerCount);
begin T := Self.OnInfoLimbo; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoActiveTransactions_W(Self: TUIBDataBase; const T: TOnInfoIntegerCount);
begin Self.OnInfoActiveTransactions := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoActiveTransactions_R(Self: TUIBDataBase; var T: TOnInfoIntegerCount);
begin T := Self.OnInfoActiveTransactions; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoExpungeCount_W(Self: TUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoExpungeCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoExpungeCount_R(Self: TUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoExpungeCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoPurgeCount_W(Self: TUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoPurgeCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoPurgeCount_R(Self: TUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoPurgeCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoBackoutCount_W(Self: TUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoBackoutCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoBackoutCount_R(Self: TUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoBackoutCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoDeleteCount_W(Self: TUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoDeleteCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoDeleteCount_R(Self: TUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoDeleteCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoInsertCount_W(Self: TUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoInsertCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoInsertCount_R(Self: TUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoInsertCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoUpdateCount_W(Self: TUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoUpdateCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoUpdateCount_R(Self: TUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoUpdateCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoReadIdxCount_W(Self: TUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoReadIdxCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoReadIdxCount_R(Self: TUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoReadIdxCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoReadSeqCount_W(Self: TUIBDataBase; const T: TOnInfoTableOpCount);
begin Self.OnInfoReadSeqCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnInfoReadSeqCount_R(Self: TUIBDataBase; var T: TOnInfoTableOpCount);
begin T := Self.OnInfoReadSeqCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseRole_W(Self: TUIBDataBase; const T: string);
begin Self.Role := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseRole_R(Self: TUIBDataBase; var T: string);
begin T := Self.Role; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseConnected_W(Self: TUIBDataBase; const T: boolean);
begin Self.Connected := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseConnected_R(Self: TUIBDataBase; var T: boolean);
begin T := Self.Connected; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseShutdown_W(Self: TUIBDataBase; const T: TShutdownOptions);
begin Self.Shutdown := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseShutdown_R(Self: TUIBDataBase; var T: TShutdownOptions);
begin T := Self.Shutdown; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseMetaDataOptions_R(Self: TUIBDataBase; var T: TMetaDataOptions);
begin T := Self.MetaDataOptions; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseSegmentSize_W(Self: TUIBDataBase; const T: Word);
begin Self.SegmentSize := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseSegmentSize_R(Self: TUIBDataBase; var T: Word);
begin T := Self.SegmentSize; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnConnectionLost_W(Self: TUIBDataBase; const T: TNotifyEvent);
begin Self.OnConnectionLost := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseOnConnectionLost_R(Self: TUIBDataBase; var T: TNotifyEvent);
begin T := Self.OnConnectionLost; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseBeforeDisconnect_W(Self: TUIBDataBase; const T: TNotifyEvent);
begin Self.BeforeDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseBeforeDisconnect_R(Self: TUIBDataBase; var T: TNotifyEvent);
begin T := Self.BeforeDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseAfterDisconnect_W(Self: TUIBDataBase; const T: TNotifyEvent);
begin Self.AfterDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseAfterDisconnect_R(Self: TUIBDataBase; var T: TNotifyEvent);
begin T := Self.AfterDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseBeforeConnect_W(Self: TUIBDataBase; const T: TNotifyEvent);
begin Self.BeforeConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseBeforeConnect_R(Self: TUIBDataBase; var T: TNotifyEvent);
begin T := Self.BeforeConnect; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseAfterConnect_W(Self: TUIBDataBase; const T: TNotifyEvent);
begin Self.AfterConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseAfterConnect_R(Self: TUIBDataBase; var T: TNotifyEvent);
begin T := Self.AfterConnect; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseLibraryName_W(Self: TUIBDataBase; const T: String);
begin Self.LibraryName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseLibraryName_R(Self: TUIBDataBase; var T: String);
begin T := Self.LibraryName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBasePassWord_W(Self: TUIBDataBase; const T: string);
begin Self.PassWord := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBasePassWord_R(Self: TUIBDataBase; var T: string);
begin T := Self.PassWord; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseUserName_W(Self: TUIBDataBase; const T: string);
begin Self.UserName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseUserName_R(Self: TUIBDataBase; var T: string);
begin T := Self.UserName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseCharacterSet_W(Self: TUIBDataBase; const T: TCharacterSet);
begin Self.CharacterSet := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseCharacterSet_R(Self: TUIBDataBase; var T: TCharacterSet);
begin T := Self.CharacterSet; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseSQLDialect_W(Self: TUIBDataBase; const T: Integer);
begin Self.SQLDialect := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseSQLDialect_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.SQLDialect; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseDatabaseName_W(Self: TUIBDataBase; const T: String);
begin Self.DatabaseName := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseDatabaseName_R(Self: TUIBDataBase; var T: String);
begin T := Self.DatabaseName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseParams_W(Self: TUIBDataBase; const T: TStrings);
begin Self.Params := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseParams_R(Self: TUIBDataBase; var T: TStrings);
begin T := Self.Params; end;

{$IFDEF IB71_UP}
(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoSvrMinVer_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoSvrMinVer; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoAttCharset_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoAttCharset; end;
{$ENDIF}

{$IFDEF IB7_UP}
(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbGroupCommit_R(Self: TUIBDataBase; var T: boolean);
begin T := Self.InfoDbGroupCommit; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbMarks_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDbMarks; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbFetches_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDbFetches; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbWrites_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDbWrites; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbReads_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDbReads; end;
{$ENDIF}

{$IFDEF FB102_UP}
(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoActiveTransactions_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoActiveTransactions; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoFirebirdVersion_R(Self: TUIBDataBase; var T: string);
begin T := Self.InfoFirebirdVersion; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoAttCharset_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoAttCharset; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbClass_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDbClass; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbProvider_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDbProvider; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoNextTransaction_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoNextTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoOldestSnapshot_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoOldestSnapshot; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoOldestActive_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoOldestActive; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoOldestTransaction_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoOldestTransaction; end;
{$ENDIF}

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoUserNames_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoUserNames; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoLimbo_R(Self: TUIBDataBase; var T: integer);
begin T := Self.InfoLimbo; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoExpungeCount_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoExpungeCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoPurgeCount_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoPurgeCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoBackoutCount_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoBackoutCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDeleteCount_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDeleteCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoInsertCount_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoInsertCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoUpdateCount_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoUpdateCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoReadIdxCount_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoReadIdxCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoReadSeqCount_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoReadSeqCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoVersion_R(Self: TUIBDataBase; var T: string);
begin T := Self.InfoVersion; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoBaseLevel_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoBaseLevel; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoImplementation_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoImplementation; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbSiteName_R(Self: TUIBDataBase; var T: string);
begin T := Self.InfoDbSiteName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbFileName_R(Self: TUIBDataBase; var T: string);
begin T := Self.InfoDbFileName; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbSizeInPages_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDbSizeInPages; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbReadOnly_R(Self: TUIBDataBase; var T: boolean);
begin T := Self.InfoDbReadOnly; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDbSqlDialect_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDbSqlDialect; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoTPageErrors_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoTPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoPPageErrors_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoPPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoIPageErrors_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoIPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoDPageErrors_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoDPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoRecordErrors_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoRecordErrors; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoBPageErrors_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoBPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoPageErrors_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoPageErrors; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoForcedWrites_R(Self: TUIBDataBase; var T: boolean);
begin T := Self.InfoForcedWrites; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoNoReserve_R(Self: TUIBDataBase; var T: boolean);
begin T := Self.InfoNoReserve; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoSweepInterval_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoSweepInterval; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoAllocation_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoAllocation; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoOdsMinorVersion_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoOdsMinorVersion; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoOdsVersion_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoOdsVersion; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoAttachmentId_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoAttachmentId; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoMaxMemory_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoMaxMemory; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoCurrentMemory_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoCurrentMemory; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoSetPageBuffers_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoSetPageBuffers; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoNumBuffers_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoNumBuffers; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoPageSize_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoPageSize; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoMarks_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoMarks; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoFetches_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoFetches; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoWrites_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoWrites; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseInfoReads_R(Self: TUIBDataBase; var T: Integer);
begin T := Self.InfoReads; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseLib_R(Self: TUIBDataBase; var T: TUIBLibrary);
begin T := Self.Lib; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseTransactionsCount_R(Self: TUIBDataBase; var T: Cardinal);
begin T := Self.TransactionsCount; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseTransactions_R(Self: TUIBDataBase; var T: TUIBTransaction; const t1: Cardinal);
begin T := Self.Transactions[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseIsHandleShared_R(Self: TUIBDataBase; var T: boolean);
begin T := Self.IsHandleShared; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseDbHandle_W(Self: TUIBDataBase; const T: IscDbHandle);
begin Self.DbHandle := T; end;

(*----------------------------------------------------------------------------*)
procedure TUIBDataBaseDbHandle_R(Self: TUIBDataBase; var T: IscDbHandle);
begin T := Self.DbHandle; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsSysInfos_W(Self: TMetaDataOptions; const T: boolean);
begin Self.SysInfos := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsSysInfos_R(Self: TMetaDataOptions; var T: boolean);
begin T := Self.SysInfos; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsUDFs_W(Self: TMetaDataOptions; const T: TOIDUDFs);
begin Self.UDFs := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsUDFs_R(Self: TMetaDataOptions; var T: TOIDUDFs);
begin T := Self.UDFs; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsProcedures_W(Self: TMetaDataOptions; const T: TOIDProcedures);
begin Self.Procedures := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsProcedures_R(Self: TMetaDataOptions; var T: TOIDProcedures);
begin T := Self.Procedures; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsViews_W(Self: TMetaDataOptions; const T: TOIDViews);
begin Self.Views := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsViews_R(Self: TMetaDataOptions; var T: TOIDViews);
begin T := Self.Views; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsTables_W(Self: TMetaDataOptions; const T: TOIDTables);
begin Self.Tables := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsTables_R(Self: TMetaDataOptions; var T: TOIDTables);
begin T := Self.Tables; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsObjects_W(Self: TMetaDataOptions; const T: TOIDDatabases);
begin Self.Objects := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataOptionsObjects_R(Self: TMetaDataOptions; var T: TOIDDatabases);
begin T := Self.Objects; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBConfig(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBConfig) do
  begin
    RegisterMethod(@TUIBConfig.ShutdownDatabase, 'ShutdownDatabase');
    RegisterMethod(@TUIBConfig.SetSweepInterval, 'SetSweepInterval');
    RegisterMethod(@TUIBConfig.SetDBSqlDialect, 'SetDBSqlDialect');
    RegisterMethod(@TUIBConfig.SetPageBuffers, 'SetPageBuffers');
    RegisterMethod(@TUIBConfig.ActivateShadow, 'ActivateShadow');
    RegisterMethod(@TUIBConfig.BringDatabaseOnline, 'BringDatabaseOnline');
    RegisterMethod(@TUIBConfig.SetReserveSpace, 'SetReserveSpace');
    RegisterMethod(@TUIBConfig.SetAsyncMode, 'SetAsyncMode');
    RegisterMethod(@TUIBConfig.SetReadOnly, 'SetReadOnly');
    RegisterPropertyHelper(@TUIBConfigDatabaseName_R,@TUIBConfigDatabaseName_W,'DatabaseName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBEventThread(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBEventThread) do
  begin
    RegisterVirtualConstructor(@TUIBEventThread.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBEvents(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBEvents) do
  begin
    RegisterVirtualMethod(@TUIBEvents.RegisterEvents, 'RegisterEvents');
    RegisterVirtualMethod(@TUIBEvents.UnRegisterEvents, 'UnRegisterEvents');
    RegisterMethod(@TUIBEvents.SetAutoRegister, 'SetAutoRegister');
    RegisterPropertyHelper(@TUIBEventsAutoRegister_R,@TUIBEventsAutoRegister_W,'AutoRegister');
    RegisterPropertyHelper(@TUIBEventsDatabase_R,@TUIBEventsDatabase_W,'Database');
    RegisterPropertyHelper(@TUIBEventsEvents_R,@TUIBEventsEvents_W,'Events');
    RegisterPropertyHelper(@TUIBEventsRegistered_R,@TUIBEventsRegistered_W,'Registered');
    RegisterPropertyHelper(@TUIBEventsSyncMainThread_R,@TUIBEventsSyncMainThread_W,'SyncMainThread');
    RegisterPropertyHelper(@TUIBEventsOnEvent_R,@TUIBEventsOnEvent_W,'OnEvent');
    RegisterPropertyHelper(@TUIBEventsOnException_R,@TUIBEventsOnException_W,'OnException');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBRepair(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBRepair) do
  begin
    RegisterMethod(@TUIBRepair.Run, 'Run');
    RegisterPropertyHelper(@TUIBRepairOptions_R,@TUIBRepairOptions_W,'Options');
    RegisterPropertyHelper(@TUIBRepairDatabase_R,@TUIBRepairDatabase_W,'Database');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBSecurity(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBSecurity) do
  begin
    RegisterMethod(@TUIBSecurity.AddUser, 'AddUser');
    RegisterMethod(@TUIBSecurity.DeleteUser, 'DeleteUser');
    RegisterMethod(@TUIBSecurity.ModifyUser, 'ModifyUser');
    RegisterMethod(@TUIBSecurity.DisplayUser, 'DisplayUser');
    RegisterMethod(@TUIBSecurity.DisplayUsers, 'DisplayUsers');
    RegisterPropertyHelper(@TUIBSecurityUserInfo_R,nil,'UserInfo');
    RegisterPropertyHelper(@TUIBSecurityUserInfoCount_R,nil,'UserInfoCount');
    RegisterPropertyHelper(@TUIBSecurityRole_R,@TUIBSecurityRole_W,'Role');
    RegisterPropertyHelper(@TUIBSecurityUser_R,@TUIBSecurityUser_W,'User');
    RegisterPropertyHelper(@TUIBSecurityPass_R,@TUIBSecurityPass_W,'Pass');
    RegisterPropertyHelper(@TUIBSecurityFirstName_R,@TUIBSecurityFirstName_W,'FirstName');
    RegisterPropertyHelper(@TUIBSecurityMiddleName_R,@TUIBSecurityMiddleName_W,'MiddleName');
    RegisterPropertyHelper(@TUIBSecurityLastName_R,@TUIBSecurityLastName_W,'LastName');
    RegisterPropertyHelper(@TUIBSecurityUserID_R,@TUIBSecurityUserID_W,'UserID');
    RegisterPropertyHelper(@TUIBSecurityGroupID_R,@TUIBSecurityGroupID_W,'GroupID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUserInfo(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUserInfo) do
  begin
    RegisterPropertyHelper(@TUserInfoUserName_R,@TUserInfoUserName_W,'UserName');
    RegisterPropertyHelper(@TUserInfoFirstName_R,@TUserInfoFirstName_W,'FirstName');
    RegisterPropertyHelper(@TUserInfoMiddleName_R,@TUserInfoMiddleName_W,'MiddleName');
    RegisterPropertyHelper(@TUserInfoLastName_R,@TUserInfoLastName_W,'LastName');
    RegisterPropertyHelper(@TUserInfoGroupID_R,@TUserInfoGroupID_W,'GroupID');
    RegisterPropertyHelper(@TUserInfoUserID_R,@TUserInfoUserID_W,'UserID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBRestore(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBRestore) do
  begin
    RegisterPropertyHelper(@TUIBRestoreOptions_R,@TUIBRestoreOptions_W,'Options');
    RegisterPropertyHelper(@TUIBRestorePageSize_R,@TUIBRestorePageSize_W,'PageSize');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBBackup(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBBackup) do
  begin
    RegisterPropertyHelper(@TUIBBackupOptions_R,@TUIBBackupOptions_W,'Options');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBBackupRestore(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBBackupRestore) do
  begin
    RegisterMethod(@TUIBBackupRestore.Run, 'Run');
    RegisterPropertyHelper(@TUIBBackupRestoreBackupFiles_R,@TUIBBackupRestoreBackupFiles_W,'BackupFiles');
    RegisterPropertyHelper(@TUIBBackupRestoreDatabase_R,@TUIBBackupRestoreDatabase_W,'Database');
    RegisterPropertyHelper(@TUIBBackupRestoreOnVerbose_R,@TUIBBackupRestoreOnVerbose_W,'OnVerbose');
    RegisterPropertyHelper(@TUIBBackupRestoreVerbose_R,@TUIBBackupRestoreVerbose_W,'Verbose');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBService(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBService) do
  begin
    RegisterPropertyHelper(@TUIBServiceUserName_R,@TUIBServiceUserName_W,'UserName');
    RegisterPropertyHelper(@TUIBServicePassWord_R,@TUIBServicePassWord_W,'PassWord');
    RegisterPropertyHelper(@TUIBServiceHost_R,@TUIBServiceHost_W,'Host');
    RegisterPropertyHelper(@TUIBServiceProtocol_R,@TUIBServiceProtocol_W,'Protocol');
    RegisterPropertyHelper(@TUIBServiceLibraryName_R,@TUIBServiceLibraryName_W,'LibraryName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBScript(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBScript) do
  begin
    RegisterMethod(@TUIBScript.ExecuteScript, 'ExecuteScript');
    RegisterPropertyHelper(@TUIBScriptTransaction_R,@TUIBScriptTransaction_W,'Transaction');
    RegisterPropertyHelper(@TUIBScriptScript_R,@TUIBScriptScript_W,'Script');
    RegisterPropertyHelper(@TUIBScriptAutoDDL_R,@TUIBScriptAutoDDL_W,'AutoDDL');
    RegisterPropertyHelper(@TUIBScriptOnParse_R,@TUIBScriptOnParse_W,'OnParse');
    RegisterPropertyHelper(@TUIBScriptOnComment_R,@TUIBScriptOnComment_W,'OnComment');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBQuery(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBQuery) do
  begin
    RegisterMethod(@TUIBQuery.BuildStoredProc, 'BuildStoredProc');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBStatement(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBStatement) do
  begin
    RegisterVirtualMethod(@TUIBStatement.Close, 'Close');
    RegisterMethod(@TUIBStatement.CloseCursor, 'CloseCursor');
    RegisterMethod(@TUIBStatement.FetchAll, 'FetchAll');
    RegisterMethod(@TUIBStatement.Open, 'Open');
    RegisterMethod(@TUIBStatement.Prepare, 'Prepare');
    RegisterMethod(@TUIBStatement.Execute, 'Execute');
    RegisterMethod(@TUIBStatement.ExecSQL, 'ExecSQL');
    RegisterMethod(@TUIBStatement.Next, 'Next');
    RegisterMethod(@TUIBStatement.Prior, 'Prior');
    RegisterMethod(@TUIBStatement.Last, 'Last');
    RegisterMethod(@TUIBStatement.First, 'First');
    RegisterMethod(@TUIBStatementOverload.ReadBlobStream, 'ReadBlobStream');
    RegisterMethod(@TUIBStatementOverload.ReadBlobString, 'ReadBlobString');
    RegisterMethod(@TUIBStatementOverload.ReadBlobVariant, 'ReadBlobVariant');
    RegisterMethod(@TUIBStatementOverload.ReadBlobNameStream, 'ReadBlobNameStream');
    RegisterMethod(@TUIBStatementOverload.ReadBlobNameString, 'ReadBlobNameString');
    RegisterMethod(@TUIBStatementOverload.ReadBlobNameVariant, 'ReadBlobNameVariant');
    RegisterMethod(@TUIBStatementOverload.ParamsSetBlobStream, 'ParamsSetBlobStream');
    RegisterMethod(@TUIBStatementOverload.ParamsSetBlobString, 'ParamsSetBlobString');
    RegisterMethod(@TUIBStatementOverload.ParamsSetBlobNameStream, 'ParamsSetBlobNameStream');
    RegisterMethod(@TUIBStatementOverload.ParamsSetBlobNameString, 'ParamsSetBlobNameString');
    RegisterMethod(@TUIBStatement.FieldBlobSize, 'FieldBlobSize');
    RegisterMethod(@TUIBStatement.ParamBlobSize, 'ParamBlobSize');
    RegisterPropertyHelper(@TUIBStatementStHandle_R,nil,'StHandle');
    RegisterPropertyHelper(@TUIBStatementFields_R,nil,'Fields');
    RegisterPropertyHelper(@TUIBStatementParams_R,nil,'Params');
    RegisterPropertyHelper(@TUIBStatementCursorName_R,nil,'CursorName');
    RegisterPropertyHelper(@TUIBStatementCurrentState_R,nil,'CurrentState');
    RegisterPropertyHelper(@TUIBStatementEof_R,nil,'Eof');
    RegisterPropertyHelper(@TUIBStatementBof_R,nil,'Bof');
    RegisterPropertyHelper(@TUIBStatementParseParams_R,@TUIBStatementParseParams_W,'ParseParams');
    RegisterPropertyHelper(@TUIBStatementPlan_R,nil,'Plan');
    RegisterPropertyHelper(@TUIBStatementStatementType_R,nil,'StatementType');
    RegisterPropertyHelper(@TUIBStatementRowsAffected_R,nil,'RowsAffected');
    RegisterPropertyHelper(@TUIBStatementUseCursor_R,@TUIBStatementUseCursor_W,'UseCursor');
    RegisterPropertyHelper(@TUIBStatementSQL_R,@TUIBStatementSQL_W,'SQL');
    RegisterPropertyHelper(@TUIBStatementTransaction_R,@TUIBStatementTransaction_W,'Transaction');
    RegisterPropertyHelper(@TUIBStatementDataBase_R,@TUIBStatementDataBase_W,'DataBase');
    RegisterPropertyHelper(@TUIBStatementOnError_R,@TUIBStatementOnError_W,'OnError');
    RegisterPropertyHelper(@TUIBStatementCachedFetch_R,@TUIBStatementCachedFetch_W,'CachedFetch');
    RegisterPropertyHelper(@TUIBStatementFetchBlobs_R,@TUIBStatementFetchBlobs_W,'FetchBlobs');
    RegisterPropertyHelper(@TUIBStatementBufferChunks_R,@TUIBStatementBufferChunks_W,'BufferChunks');
    RegisterPropertyHelper(@TUIBStatementOnClose_R,@TUIBStatementOnClose_W,'OnClose');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBTransaction(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBTransaction) do
  begin
    RegisterMethod(@TUIBTransaction.AddDataBase, 'AddDataBase');
    RegisterMethod(@TUIBTransactionOverload.RemoveDatabaseByClass, 'RemoveDatabaseByClass');
    RegisterMethod(@TUIBTransactionOverload.RemoveDatabaseByIndex, 'RemoveDatabaseByIndex');
    RegisterMethod(@TUIBTransaction.StartTransaction, 'StartTransaction');
    RegisterMethod(@TUIBTransaction.Commit, 'Commit');
    RegisterMethod(@TUIBTransaction.CommitRetaining, 'CommitRetaining');
    RegisterMethod(@TUIBTransaction.RollBack, 'RollBack');
    RegisterMethod(@TUIBTransaction.RollBackRetaining, 'RollBackRetaining');
    RegisterMethod(@TUIBTransaction.ExecuteImmediate, 'ExecuteImmediate');
{$IFDEF IB71_UP}
    RegisterMethod(@TUIBTransaction.SavepointRelease, 'SavepointRelease');
    RegisterMethod(@TUIBTransaction.SavepointRollback, 'SavepointRollback');
    RegisterMethod(@TUIBTransaction.SavepointStart, 'SavepointStart');
{$ENDIF}
    RegisterPropertyHelper(@TUIBTransactionInTransaction_R,nil,'InTransaction');
    RegisterPropertyHelper(@TUIBTransactionTrHandle_R,nil,'TrHandle');
    RegisterPropertyHelper(@TUIBTransactionStatements_R,nil,'Statements');
    RegisterPropertyHelper(@TUIBTransactionStatementsCount_R,nil,'StatementsCount');
    RegisterPropertyHelper(@TUIBTransactionDatabases_R,nil,'Databases');
    RegisterPropertyHelper(@TUIBTransactionDatabasesCount_R,nil,'DatabasesCount');
    RegisterPropertyHelper(@TUIBTransactionDataBase_R,@TUIBTransactionDataBase_W,'DataBase');
    RegisterPropertyHelper(@TUIBTransactionOptions_R,@TUIBTransactionOptions_W,'Options');
    RegisterPropertyHelper(@TUIBTransactionLockRead_R,@TUIBTransactionLockRead_W,'LockRead');
    RegisterPropertyHelper(@TUIBTransactionLockWrite_R,@TUIBTransactionLockWrite_W,'LockWrite');
    RegisterPropertyHelper(@TUIBTransactionOnStartTransaction_R,@TUIBTransactionOnStartTransaction_W,'OnStartTransaction');
    RegisterPropertyHelper(@TUIBTransactionOnEndTransaction_R,@TUIBTransactionOnEndTransaction_W,'OnEndTransaction');
    RegisterPropertyHelper(@TUIBTransactionAutoRetain_R,@TUIBTransactionAutoRetain_W,'AutoRetain');
    RegisterPropertyHelper(@TUIBTransactionAutoStart_R,@TUIBTransactionAutoStart_W,'AutoStart');
    RegisterPropertyHelper(@TUIBTransactionAutoStop_R,@TUIBTransactionAutoStop_W,'AutoStop');
    RegisterPropertyHelper(@TUIBTransactionDefaultAction_R,@TUIBTransactionDefaultAction_W,'DefaultAction');
{$IFDEF FB20_UP}
    RegisterPropertyHelper(@TUIBTransactionLockTimeout_R,@TUIBTransactionLockTimeout_W,'LockTimeout');
{$ENDIF}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBDataBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBDataBase) do
  begin
    RegisterMethod(@TUIBDataBase.ExecuteImmediate, 'ExecuteImmediate');
    RegisterMethod(@TUIBDataBase.ClearExceptions, 'ClearExceptions');
    RegisterMethod(@TUIBDatabaseOverload.RegisterExceptionByID, 'RegisterExceptionByID');
    RegisterMethod(@TUIBDatabaseOverload.RegisterExceptionByName, 'RegisterExceptionByName');
    RegisterMethod(@TUIBDataBase.UnRegisterException, 'UnRegisterException');
    RegisterMethod(@TUIBDataBase.UnRegisterExceptions, 'UnRegisterExceptions');
    RegisterMethod(@TUIBDataBase.CreateDatabase, 'CreateDatabase');
    RegisterMethod(@TUIBDataBase.GetMetadata, 'GetMetadata');
    RegisterMethod(@TUIBDataBase.ActiveAllTriggers, 'ActiveAllTriggers');
    RegisterMethod(@TUIBDataBase.DeactiveAllTriggers, 'DeactiveAllTriggers');
    RegisterMethod(@TUIBDataBase.RecomputeSelectivityIndices, 'RecomputeSelectivityIndices');
    RegisterMethod(@TUIBDataBase.RecompileAllProcedures, 'RecompileAllProcedures');
    RegisterMethod(@TUIBDataBase.RecompileAllTriggers, 'RecompileAllTriggers');
    RegisterPropertyHelper(@TUIBDataBaseDbHandle_R,@TUIBDataBaseDbHandle_W,'DbHandle');
    RegisterPropertyHelper(@TUIBDataBaseIsHandleShared_R,nil,'IsHandleShared');
    RegisterPropertyHelper(@TUIBDataBaseTransactions_R,nil,'Transactions');
    RegisterPropertyHelper(@TUIBDataBaseTransactionsCount_R,nil,'TransactionsCount');
    RegisterPropertyHelper(@TUIBDataBaseLib_R,nil,'Lib');
    RegisterPropertyHelper(@TUIBDataBaseInfoReads_R,nil,'InfoReads');
    RegisterPropertyHelper(@TUIBDataBaseInfoWrites_R,nil,'InfoWrites');
    RegisterPropertyHelper(@TUIBDataBaseInfoFetches_R,nil,'InfoFetches');
    RegisterPropertyHelper(@TUIBDataBaseInfoMarks_R,nil,'InfoMarks');
    RegisterPropertyHelper(@TUIBDataBaseInfoPageSize_R,nil,'InfoPageSize');
    RegisterPropertyHelper(@TUIBDataBaseInfoNumBuffers_R,nil,'InfoNumBuffers');
    RegisterPropertyHelper(@TUIBDataBaseInfoSetPageBuffers_R,nil,'InfoSetPageBuffers');
    RegisterPropertyHelper(@TUIBDataBaseInfoCurrentMemory_R,nil,'InfoCurrentMemory');
    RegisterPropertyHelper(@TUIBDataBaseInfoMaxMemory_R,nil,'InfoMaxMemory');
    RegisterPropertyHelper(@TUIBDataBaseInfoAttachmentId_R,nil,'InfoAttachmentId');
    RegisterPropertyHelper(@TUIBDataBaseInfoOdsVersion_R,nil,'InfoOdsVersion');
    RegisterPropertyHelper(@TUIBDataBaseInfoOdsMinorVersion_R,nil,'InfoOdsMinorVersion');
    RegisterPropertyHelper(@TUIBDataBaseInfoAllocation_R,nil,'InfoAllocation');
    RegisterPropertyHelper(@TUIBDataBaseInfoSweepInterval_R,nil,'InfoSweepInterval');
    RegisterPropertyHelper(@TUIBDataBaseInfoNoReserve_R,nil,'InfoNoReserve');
    RegisterPropertyHelper(@TUIBDataBaseInfoForcedWrites_R,nil,'InfoForcedWrites');
    RegisterPropertyHelper(@TUIBDataBaseInfoPageErrors_R,nil,'InfoPageErrors');
    RegisterPropertyHelper(@TUIBDataBaseInfoBPageErrors_R,nil,'InfoBPageErrors');
    RegisterPropertyHelper(@TUIBDataBaseInfoRecordErrors_R,nil,'InfoRecordErrors');
    RegisterPropertyHelper(@TUIBDataBaseInfoDPageErrors_R,nil,'InfoDPageErrors');
    RegisterPropertyHelper(@TUIBDataBaseInfoIPageErrors_R,nil,'InfoIPageErrors');
    RegisterPropertyHelper(@TUIBDataBaseInfoPPageErrors_R,nil,'InfoPPageErrors');
    RegisterPropertyHelper(@TUIBDataBaseInfoTPageErrors_R,nil,'InfoTPageErrors');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbSqlDialect_R,nil,'InfoDbSqlDialect');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbReadOnly_R,nil,'InfoDbReadOnly');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbSizeInPages_R,nil,'InfoDbSizeInPages');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbFileName_R,nil,'InfoDbFileName');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbSiteName_R,nil,'InfoDbSiteName');
    RegisterPropertyHelper(@TUIBDataBaseInfoImplementation_R,nil,'InfoImplementation');
    RegisterPropertyHelper(@TUIBDataBaseInfoBaseLevel_R,nil,'InfoBaseLevel');
    RegisterPropertyHelper(@TUIBDataBaseInfoVersion_R,nil,'InfoVersion');
    RegisterPropertyHelper(@TUIBDataBaseInfoReadSeqCount_R,nil,'InfoReadSeqCount');
    RegisterPropertyHelper(@TUIBDataBaseInfoReadIdxCount_R,nil,'InfoReadIdxCount');
    RegisterPropertyHelper(@TUIBDataBaseInfoUpdateCount_R,nil,'InfoUpdateCount');
    RegisterPropertyHelper(@TUIBDataBaseInfoInsertCount_R,nil,'InfoInsertCount');
    RegisterPropertyHelper(@TUIBDataBaseInfoDeleteCount_R,nil,'InfoDeleteCount');
    RegisterPropertyHelper(@TUIBDataBaseInfoBackoutCount_R,nil,'InfoBackoutCount');
    RegisterPropertyHelper(@TUIBDataBaseInfoPurgeCount_R,nil,'InfoPurgeCount');
    RegisterPropertyHelper(@TUIBDataBaseInfoExpungeCount_R,nil,'InfoExpungeCount');
    RegisterPropertyHelper(@TUIBDataBaseInfoLimbo_R,nil,'InfoLimbo');
    RegisterPropertyHelper(@TUIBDataBaseInfoUserNames_R,nil,'InfoUserNames');
{$IFDEF FB102_UP}
    RegisterPropertyHelper(@TUIBDataBaseInfoOldestTransaction_R,nil,'InfoOldestTransaction');
    RegisterPropertyHelper(@TUIBDataBaseInfoOldestActive_R,nil,'InfoOldestActive');
    RegisterPropertyHelper(@TUIBDataBaseInfoOldestSnapshot_R,nil,'InfoOldestSnapshot');
    RegisterPropertyHelper(@TUIBDataBaseInfoNextTransaction_R,nil,'InfoNextTransaction');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbProvider_R,nil,'InfoDbProvider');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbClass_R,nil,'InfoDbClass');
    RegisterPropertyHelper(@TUIBDataBaseInfoAttCharset_R,nil,'InfoAttCharset');
    RegisterPropertyHelper(@TUIBDataBaseInfoFirebirdVersion_R,nil,'InfoFirebirdVersion');
    RegisterPropertyHelper(@TUIBDataBaseInfoActiveTransactions_R,nil,'InfoActiveTransactions');
{$ENDIF}
{$IFDEF IB7_UP}
    RegisterPropertyHelper(@TUIBDataBaseInfoDbReads_R,nil,'InfoDbReads');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbWrites_R,nil,'InfoDbWrites');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbFetches_R,nil,'InfoDbFetches');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbMarks_R,nil,'InfoDbMarks');
    RegisterPropertyHelper(@TUIBDataBaseInfoDbGroupCommit_R,nil,'InfoDbGroupCommit');
{$ENDIF}
{$IFDEF IB71_UP}
    RegisterPropertyHelper(@TUIBDataBaseInfoAttCharset_R,nil,'InfoAttCharset');
    RegisterPropertyHelper(@TUIBDataBaseInfoSvrMinVer_R,nil,'InfoSvrMinVer');
{$ENDIF}
    RegisterPropertyHelper(@TUIBDataBaseParams_R,@TUIBDataBaseParams_W,'Params');
    RegisterPropertyHelper(@TUIBDataBaseDatabaseName_R,@TUIBDataBaseDatabaseName_W,'DatabaseName');
    RegisterPropertyHelper(@TUIBDataBaseSQLDialect_R,@TUIBDataBaseSQLDialect_W,'SQLDialect');
    RegisterPropertyHelper(@TUIBDataBaseCharacterSet_R,@TUIBDataBaseCharacterSet_W,'CharacterSet');
    RegisterPropertyHelper(@TUIBDataBaseUserName_R,@TUIBDataBaseUserName_W,'UserName');
    RegisterPropertyHelper(@TUIBDataBasePassWord_R,@TUIBDataBasePassWord_W,'PassWord');
    RegisterPropertyHelper(@TUIBDataBaseLibraryName_R,@TUIBDataBaseLibraryName_W,'LibraryName');
    RegisterPropertyHelper(@TUIBDataBaseAfterConnect_R,@TUIBDataBaseAfterConnect_W,'AfterConnect');
    RegisterPropertyHelper(@TUIBDataBaseBeforeConnect_R,@TUIBDataBaseBeforeConnect_W,'BeforeConnect');
    RegisterPropertyHelper(@TUIBDataBaseAfterDisconnect_R,@TUIBDataBaseAfterDisconnect_W,'AfterDisconnect');
    RegisterPropertyHelper(@TUIBDataBaseBeforeDisconnect_R,@TUIBDataBaseBeforeDisconnect_W,'BeforeDisconnect');
    RegisterPropertyHelper(@TUIBDataBaseOnConnectionLost_R,@TUIBDataBaseOnConnectionLost_W,'OnConnectionLost');
    RegisterPropertyHelper(@TUIBDataBaseSegmentSize_R,@TUIBDataBaseSegmentSize_W,'SegmentSize');
    RegisterPropertyHelper(@TUIBDataBaseMetaDataOptions_R,nil,'MetaDataOptions');
    RegisterPropertyHelper(@TUIBDataBaseShutdown_R,@TUIBDataBaseShutdown_W,'Shutdown');
    RegisterPropertyHelper(@TUIBDataBaseConnected_R,@TUIBDataBaseConnected_W,'Connected');
    RegisterPropertyHelper(@TUIBDataBaseRole_R,@TUIBDataBaseRole_W,'Role');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoReadSeqCount_R,@TUIBDataBaseOnInfoReadSeqCount_W,'OnInfoReadSeqCount');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoReadIdxCount_R,@TUIBDataBaseOnInfoReadIdxCount_W,'OnInfoReadIdxCount');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoUpdateCount_R,@TUIBDataBaseOnInfoUpdateCount_W,'OnInfoUpdateCount');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoInsertCount_R,@TUIBDataBaseOnInfoInsertCount_W,'OnInfoInsertCount');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoDeleteCount_R,@TUIBDataBaseOnInfoDeleteCount_W,'OnInfoDeleteCount');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoBackoutCount_R,@TUIBDataBaseOnInfoBackoutCount_W,'OnInfoBackoutCount');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoPurgeCount_R,@TUIBDataBaseOnInfoPurgeCount_W,'OnInfoPurgeCount');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoExpungeCount_R,@TUIBDataBaseOnInfoExpungeCount_W,'OnInfoExpungeCount');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoActiveTransactions_R,@TUIBDataBaseOnInfoActiveTransactions_W,'OnInfoActiveTransactions');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoLimbo_R,@TUIBDataBaseOnInfoLimbo_W,'OnInfoLimbo');
    RegisterPropertyHelper(@TUIBDataBaseOnInfoUserNames_R,@TUIBDataBaseOnInfoUserNames_W,'OnInfoUserNames');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaDataOptions(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaDataOptions) do
  begin
    RegisterConstructor(@TMetaDataOptions.Create, 'Create');
    RegisterPropertyHelper(@TMetaDataOptionsObjects_R,@TMetaDataOptionsObjects_W,'Objects');
    RegisterPropertyHelper(@TMetaDataOptionsTables_R,@TMetaDataOptionsTables_W,'Tables');
    RegisterPropertyHelper(@TMetaDataOptionsViews_R,@TMetaDataOptionsViews_W,'Views');
    RegisterPropertyHelper(@TMetaDataOptionsProcedures_R,@TMetaDataOptionsProcedures_W,'Procedures');
    RegisterPropertyHelper(@TMetaDataOptionsUDFs_R,@TMetaDataOptionsUDFs_W,'UDFs');
    RegisterPropertyHelper(@TMetaDataOptionsSysInfos_R,@TMetaDataOptionsSysInfos_W,'SysInfos');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TUIBComponent(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TUIBComponent) do
  begin
{$IFDEF UIB_NO_COMPONENT}
    RegisterVirtualConstructor(@TUIBComponent.Create, 'Create');
{$ENDIF}
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uib(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TUIBComponent(CL);
  with CL.Add(TUIBTransaction) do
  with CL.Add(TUIBQuery) do
  with CL.Add(TUIBStatement) do
  with CL.Add(TUIBDataBase) do
  with CL.Add(TUIBEvents) do
  RIRegister_TMetaDataOptions(CL);
  RIRegister_TUIBDataBase(CL);
  RIRegister_TUIBTransaction(CL);
  RIRegister_TUIBStatement(CL);
  RIRegister_TUIBQuery(CL);
  RIRegister_TUIBScript(CL);
  RIRegister_TUIBService(CL);
  RIRegister_TUIBBackupRestore(CL);
  RIRegister_TUIBBackup(CL);
  RIRegister_TUIBRestore(CL);
  RIRegister_TUserInfo(CL);
  RIRegister_TUIBSecurity(CL);
  RIRegister_TUIBRepair(CL);
  with CL.Add(TUIBEventThread) do
  RIRegister_TUIBEvents(CL);
  RIRegister_TUIBEventThread(CL);
  RIRegister_TUIBConfig(CL);
end;



{ TPSImport_uib }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uib.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uib(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uib.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uib(ri);
end;
(*----------------------------------------------------------------------------*)


{ TUIBStatementOverload }

procedure TUIBStatementOverload.ParamsSetBlobNameStream(
  const Name: string; Stream: TStream);
begin
  ParamsSetBlob(Name, Stream);
end;

procedure TUIBStatementOverload.ParamsSetBlobNameString(
  const Name: string; var str: string);
begin
  ParamsSetBlob(Name, str);
end;

procedure TUIBStatementOverload.ParamsSetBlobStream(const Index: Word;
  Stream: TStream);
begin
  ParamsSetBlob(Index, Stream);
end;

procedure TUIBStatementOverload.ParamsSetBlobString(const Index: Word;
  var str: string);
begin
  ParamsSetBlob(Index, str);
end;

procedure TUIBStatementOverload.ReadBlobNameStream(const name: string;
  Stream: TStream);
begin
  ReadBlob(name, Stream);
end;

procedure TUIBStatementOverload.ReadBlobNameString(const name: string;
  var str: string);
begin
  ReadBlob(name, str);
end;

procedure TUIBStatementOverload.ReadBlobNameVariant(const name: string;
  var Value: Variant);
begin
  ReadBlob(name, Value);
end;

procedure TUIBStatementOverload.ReadBlobStream(const Index: Word;
  Stream: TStream);
begin
  ReadBlob(index, Stream);
end;

procedure TUIBStatementOverload.ReadBlobString(const Index: Word;
  var str: string);
begin
  ReadBlob(index, str);
end;

procedure TUIBStatementOverload.ReadBlobVariant(const Index: Word;
  var Value: Variant);
begin
  ReadBlob(index, Value);
end;

{ TUIBDatabaseOverload }

procedure TUIBDatabaseOverload.RegisterExceptionByID(
  Excpt: EUIBExceptionClass; ID: Integer);
begin
  RegisterException(Excpt, ID);
end;

function TUIBDatabaseOverload.RegisterExceptionByName(
  Excpt: EUIBExceptionClass; const Name: string): Integer;
begin
  Result := RegisterException(Excpt, Name);
end;

{ TUIBTransactionOverload }

procedure TUIBTransactionOverload.RemoveDatabaseByClass(
  ADataBase: TUIBDataBase);
begin
  RemoveDatabase(ADataBase);
end;

procedure TUIBTransactionOverload.RemoveDatabaseByIndex(Index: Integer);
begin
  RemoveDatabase(Index);
end;

end.

unit uPSI_uiblib;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
{$I uib.inc}
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uiblib = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TSQLParams(CL: TPSPascalCompiler);
procedure SIRegister_TSQLResult(CL: TPSPascalCompiler);
procedure SIRegister_TSQLDA(CL: TPSPascalCompiler);
procedure SIRegister_EUIBException(CL: TPSPascalCompiler);
procedure SIRegister_EException(CL: TPSPascalCompiler);
procedure SIRegister_EUIBError(CL: TPSPascalCompiler);
procedure SIRegister_uiblib(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TSQLParams(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLResult(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLDA(CL: TPSRuntimeClassImporter);
procedure RIRegister_EUIBException(CL: TPSRuntimeClassImporter);
procedure RIRegister_EUIBError(CL: TPSRuntimeClassImporter);
procedure RIRegister_EException(CL: TPSRuntimeClassImporter);
procedure RIRegister_uiblib(CL: TPSRuntimeClassImporter);

procedure Register;

implementation

uses
   Windows
  ,Variants
  ,uibase
  ,uiberror
  ,uiblib
  ;

type

  EException = class(Exception); // hack

  TSQLResultOverload = class(TSQLResult)
  public
    procedure ReadBlobStream(const Index: Word; Stream: TStream);
    procedure ReadBlobString(const Index: Word; var str: string);
    procedure ReadBlobWideString(const Index: Word; var str: WideString);
    procedure ReadBlobVariant(const Index: Word; var Value: Variant);
    procedure ReadBlobNameStream(const name: string; Stream: TStream);
    procedure ReadBlobNameString(const name: string; var str: string);
    procedure ReadBlobNameWideString(const name: string; var str: WideString);
    procedure ReadBlobNameVariant(const name: string; var Value: Variant);
  end;

const
  iptR = uPSCompiler.iptR;

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uiblib]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLParams(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSQLDA', 'TSQLParams') do
  with CL.AddClassN(CL.FindClass('TSQLDA'),'TSQLParams') do
  begin
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure Clear');
    RegisterMethod('Function Parse( const SQL : string) : string');
    RegisterProperty('Values', 'Variant String', iptr);
    SetDefaultPropery('Values');
    RegisterProperty('FieldName', 'string Word', iptr);
    RegisterProperty('ParamCount', 'Word', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLResult(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TSQLDA', 'TSQLResult') do
  with CL.AddClassN(CL.FindClass('TSQLDA'),'TSQLResult') do
  begin
    RegisterMethod('Constructor Create( Fields : SmallInt; CachedFetch : Boolean; FetchBlobs : boolean; BufferChunks : Cardinal)');
    RegisterMethod('Procedure ClearRecords');
    RegisterMethod('Procedure GetRecord( const Index : Integer)');
    RegisterMethod('Procedure SaveToStream( Stream : TStream)');
    RegisterMethod('Procedure LoadFromStream( Stream : TStream)');
    RegisterMethod('Procedure Next');
    RegisterProperty('BlobData', 'PBlobData word', iptr);
    RegisterProperty('ArrayData', 'Pointer word', iptr);
    RegisterProperty('ArrayInfos', 'PArrayInfo word', iptr);
    RegisterProperty('ArrayCount', 'Word', iptr);
    RegisterMethod('Procedure ReadBlobStream( const Index : Word; Stream : TStream)');
    RegisterMethod('Procedure ReadBlobString( const Index : Word; var str : string)');
    RegisterMethod('Procedure ReadBlobWideString( const Index : Word; var str : WideString)');
    RegisterMethod('Procedure ReadBlobVariant( const Index : Word; var Value : Variant)');
    RegisterMethod('Procedure ReadBlobNameStream( const name : string; Stream : TStream)');
    RegisterMethod('Procedure ReadBlobNameString( const name : string; var str : string)');
    RegisterMethod('Procedure ReadBlobNameWideString( const name : string; var str : WideString)');
    RegisterMethod('Procedure ReadBlobNameVariant( const name : string; var Value : Variant)');
    RegisterMethod('Function GetBlobSize( const Index : Word) : Cardinal');
    RegisterProperty('Eof', 'boolean', iptr);
    RegisterProperty('ScrollEOF', 'boolean', iptr);
    RegisterProperty('Bof', 'boolean', iptr);
    RegisterProperty('CachedFetch', 'boolean', iptr);
    RegisterProperty('FetchBlobs', 'boolean', iptr);
    RegisterProperty('RecordCount', 'Integer', iptr);
    RegisterProperty('CurrentRecord', 'Integer', iptrw);
    RegisterProperty('BufferChunks', 'Cardinal', iptr);
    RegisterProperty('UniqueRelationName', 'string', iptr);
    RegisterProperty('SqlName', 'string Word', iptr);
    RegisterProperty('RelName', 'string Word', iptr);
    RegisterProperty('OwnName', 'string Word', iptr);
    RegisterProperty('AliasName', 'string Word', iptr);
    RegisterProperty('AsSmallint', 'Smallint Word', iptr);
    RegisterProperty('AsInteger', 'Integer Word', iptr);
    RegisterProperty('AsSingle', 'Single Word', iptr);
    RegisterProperty('AsDouble', 'Double Word', iptr);
    RegisterProperty('AsCurrency', 'Currency Word', iptr);
    RegisterProperty('AsInt64', 'Int64 Word', iptr);
    RegisterProperty('AsString', 'String Word', iptr);
    RegisterProperty('AsWideString', 'WideString Word', iptr);
    RegisterProperty('AsVariant', 'Variant Word', iptr);
    RegisterProperty('AsDateTime', 'TDateTime Word', iptr);
    RegisterProperty('AsDate', 'Integer Word', iptr);
    RegisterProperty('AsTime', 'Cardinal Word', iptr);
    RegisterProperty('AsBoolean', 'Boolean Word', iptr);
    RegisterProperty('ByNameIsNull', 'boolean String', iptr);
    RegisterProperty('ByNameIsNullable', 'boolean String', iptr);
    RegisterProperty('ByNameAsSmallint', 'Smallint String', iptr);
    RegisterProperty('ByNameAsInteger', 'Integer String', iptr);
    RegisterProperty('ByNameAsSingle', 'Single String', iptr);
    RegisterProperty('ByNameAsDouble', 'Double String', iptr);
    RegisterProperty('ByNameAsCurrency', 'Currency String', iptr);
    RegisterProperty('ByNameAsInt64', 'Int64 String', iptr);
    RegisterProperty('ByNameAsString', 'String String', iptr);
    RegisterProperty('ByNameAsWideString', 'WideString String', iptr);
    RegisterProperty('ByNameAsQuad', 'TISCQuad String', iptr);
    RegisterProperty('ByNameAsVariant', 'Variant String', iptr);
    RegisterProperty('ByNameAsDateTime', 'TDateTime String', iptr);
    RegisterProperty('ByNameAsBoolean', 'Boolean String', iptr);
    RegisterProperty('ByNameAsDate', 'Integer String', iptr);
    RegisterProperty('ByNameAsTime', 'Cardinal String', iptr);
    RegisterProperty('Values', 'Variant String', iptr);
    SetDefaultPropery('Values');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLDA(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TSQLDA') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TSQLDA') do
  begin
    RegisterMethod('Procedure CheckRange( const Index : Word)');
    RegisterMethod('Function GetFieldIndex( const name : String) : Word');
    RegisterProperty('Data', 'PUIBSQLDa', iptr);
    RegisterProperty('IsBlob', 'boolean Word', iptr);
    RegisterProperty('IsNullable', 'boolean Word', iptr);
    RegisterProperty('IsNumeric', 'boolean Word', iptr);
    RegisterProperty('FieldCount', 'Integer', iptr);
    RegisterProperty('SQLType', 'Smallint Word', iptr);
    RegisterProperty('SQLLen', 'Smallint Word', iptr);
    RegisterProperty('FieldType', 'TUIBFieldType Word', iptr);
    RegisterProperty('IsNull', 'boolean Word', iptrw);
    RegisterProperty('AsSmallint', 'Smallint Word', iptrw);
    RegisterProperty('AsInteger', 'Integer Word', iptrw);
    RegisterProperty('AsSingle', 'Single Word', iptrw);
    RegisterProperty('AsDouble', 'Double Word', iptrw);
    RegisterProperty('AsCurrency', 'Currency Word', iptrw);
    RegisterProperty('AsInt64', 'Int64 Word', iptrw);
    RegisterProperty('AsString', 'String Word', iptrw);
    RegisterProperty('AsWideString', 'WideString Word', iptrw);
    RegisterProperty('AsQuad', 'TISCQuad Word', iptrw);
    RegisterProperty('AsDateTime', 'TDateTime Word', iptrw);
    RegisterProperty('AsBoolean', 'Boolean Word', iptrw);
    RegisterProperty('AsDate', 'Integer Word', iptrw);
    RegisterProperty('AsTime', 'Cardinal Word', iptrw);
    RegisterProperty('AsVariant', 'Variant Word', iptr);
    RegisterProperty('ByNameIsNull', 'boolean String', iptrw);
    RegisterProperty('ByNameAsSmallint', 'Smallint String', iptrw);
    RegisterProperty('ByNameAsInteger', 'Integer String', iptrw);
    RegisterProperty('ByNameAsSingle', 'Single String', iptrw);
    RegisterProperty('ByNameAsDouble', 'Double String', iptrw);
    RegisterProperty('ByNameAsCurrency', 'Currency String', iptrw);
    RegisterProperty('ByNameAsInt64', 'Int64 String', iptrw);
    RegisterProperty('ByNameAsString', 'String String', iptrw);
    RegisterProperty('ByNameAsWideString', 'WideString String', iptrw);
    RegisterProperty('ByNameAsQuad', 'TISCQuad String', iptrw);
    RegisterProperty('ByNameAsVariant', 'Variant String', iptr);
    RegisterProperty('ByNameAsDateTime', 'TDateTime String', iptrw);
    RegisterProperty('ByNameAsBoolean', 'Boolean String', iptrw);
    RegisterProperty('ByNameAsDate', 'Integer String', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EUIBException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'EUIBError', 'EUIBException') do
  with CL.AddClassN(CL.FindClass('EUIBError'),'EUIBException') do
  begin
    RegisterProperty('Number', 'Integer', iptr);
  end;
end;

procedure SIRegister_EException(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('Exception'),'EException');
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_EUIBError(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'Exception', 'EUIBError') do
  with CL.AddClassN(CL.FindClass('Exception'),'EUIBError') do
  begin
    RegisterProperty('ErrorCode', 'Integer', iptr);
    RegisterProperty('SQLCode', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uiblib(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TUIBFieldType', '( uftUnKnown, uftNumeric, uftChar, uftVarchar, '
   +'uftCstring, uftSmallint, uftInteger, uftQuad, uftFloat, uftDoublePrecision'
   +', uftTimestamp, uftBlob, uftBlobId, uftDate, uftTime, uftInt64, uftArray, '
   +'uftBoolean )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUIBConvertError');
  SIRegister_EUIBError(CL);
  SIRegister_EUIBException(CL);
  SIRegister_EException(CL);
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUIBGFixError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUIBDSQLError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUIBDynError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUIBGBakError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUIBGSecError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUIBLicenseError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EUIBGStatError');
  //CL.AddTypeS('EUIBExceptionClass', 'class of EUIBError');
  CL.AddTypeS('TCharacterSet', '(csNONE, csASCII, csBIG_5, csCYRL, csDOS437, csDOS850,'
   +'csDOS852, csDOS857, csDOS860, csDOS861, csDOS863, csDOS865, csEUCJ_0208,'
   +'csGB_2312, csISO8859_1, csISO8859_2, csKSC_5601, csNEXT, csOCTETS, csSJIS_0208,'
   +'csUNICODE_FSS, csWIN1250, csWIN1251, csWIN1252, csWIN1253, csWIN1254'
{$IFDEF FB15_UP}
   +',csDOS737, csDOS775, csDOS858, csDOS862, csDOS864, csDOS866, csDOS869, csWIN1255,'
   +'csWIN1256, csWIN1257, csISO8859_3, csISO8859_4, csISO8859_5, csISO8859_6, csISO8859_7,'
   +'csISO8859_8, csISO8859_9, csISO8859_13'
{$ENDIF}
{$IFDEF IB71_UP}
   +',csISO8859_15 ,csKOI8R''
{$ENDIF}
{$IFDEF FB20_UP}
   +',csKOI8R, csKOI8U, csUTF8'
{$ENDIF}
   +')');
  CL.AddTypeS('TUIBStatementType', '( stSelect, stInsert, stUpdate, stDelete, s'
   +'tDDL, stGetSegment, stPutSegment, stExecProcedure, stStartTrans, stCommit,'
   +' stRollback, stSelectForUpdate, stSetGenerator'
{$IFDEF FB15_UP}
   +', stSavePoint'
{$ENDIF}
   +')');

  SIRegister_TSQLDA(CL);
  SIRegister_TSQLResult(CL);
  //CL.AddTypeS('TSQLResultClass', 'class of TSQLResult');
  SIRegister_TSQLParams(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TSQLParamsParamCount_R(Self: TSQLParams; var T: Word);
begin T := Self.ParamCount; end;

(*----------------------------------------------------------------------------*)
procedure TSQLParamsFieldName_R(Self: TSQLParams; var T: string; const t1: Word);
begin T := Self.FieldName[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLParamsValues_R(Self: TSQLParams; var T: Variant; const t1: String);
begin T := Self.Values[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultValues_R(Self: TSQLResult; var T: Variant; const t1: String);
begin T := Self.Values[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsTime_R(Self: TSQLResult; var T: Cardinal; const t1: String);
begin T := Self.ByNameAsTime[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsDate_R(Self: TSQLResult; var T: Integer; const t1: String);
begin T := Self.ByNameAsDate[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsBoolean_R(Self: TSQLResult; var T: Boolean; const t1: String);
begin T := Self.ByNameAsBoolean[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsDateTime_R(Self: TSQLResult; var T: TDateTime; const t1: String);
begin T := Self.ByNameAsDateTime[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsVariant_R(Self: TSQLResult; var T: Variant; const t1: String);
begin T := Self.ByNameAsVariant[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsQuad_R(Self: TSQLResult; var T: TISCQuad; const t1: String);
begin T := Self.ByNameAsQuad[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsWideString_R(Self: TSQLResult; var T: WideString; const t1: String);
begin T := Self.ByNameAsWideString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsString_R(Self: TSQLResult; var T: String; const t1: String);
begin T := Self.ByNameAsString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsInt64_R(Self: TSQLResult; var T: Int64; const t1: String);
begin T := Self.ByNameAsInt64[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsCurrency_R(Self: TSQLResult; var T: Currency; const t1: String);
begin T := Self.ByNameAsCurrency[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsDouble_R(Self: TSQLResult; var T: Double; const t1: String);
begin T := Self.ByNameAsDouble[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsSingle_R(Self: TSQLResult; var T: Single; const t1: String);
begin T := Self.ByNameAsSingle[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsInteger_R(Self: TSQLResult; var T: Integer; const t1: String);
begin T := Self.ByNameAsInteger[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameAsSmallint_R(Self: TSQLResult; var T: Smallint; const t1: String);
begin T := Self.ByNameAsSmallint[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameIsNullable_R(Self: TSQLResult; var T: boolean; const t1: String);
begin T := Self.ByNameIsNullable[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultByNameIsNull_R(Self: TSQLResult; var T: boolean; const t1: String);
begin T := Self.ByNameIsNull[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsBoolean_R(Self: TSQLResult; var T: Boolean; const t1: Word);
begin T := Self.AsBoolean[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsTime_R(Self: TSQLResult; var T: Cardinal; const t1: Word);
begin T := Self.AsTime[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsDate_R(Self: TSQLResult; var T: Integer; const t1: Word);
begin T := Self.AsDate[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsDateTime_R(Self: TSQLResult; var T: TDateTime; const t1: Word);
begin T := Self.AsDateTime[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsVariant_R(Self: TSQLResult; var T: Variant; const t1: Word);
begin T := Self.AsVariant[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsWideString_R(Self: TSQLResult; var T: WideString; const t1: Word);
begin T := Self.AsWideString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsString_R(Self: TSQLResult; var T: String; const t1: Word);
begin T := Self.AsString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsInt64_R(Self: TSQLResult; var T: Int64; const t1: Word);
begin T := Self.AsInt64[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsCurrency_R(Self: TSQLResult; var T: Currency; const t1: Word);
begin T := Self.AsCurrency[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsDouble_R(Self: TSQLResult; var T: Double; const t1: Word);
begin T := Self.AsDouble[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsSingle_R(Self: TSQLResult; var T: Single; const t1: Word);
begin T := Self.AsSingle[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsInteger_R(Self: TSQLResult; var T: Integer; const t1: Word);
begin T := Self.AsInteger[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAsSmallint_R(Self: TSQLResult; var T: Smallint; const t1: Word);
begin T := Self.AsSmallint[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultAliasName_R(Self: TSQLResult; var T: string; const t1: Word);
begin T := Self.AliasName[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultOwnName_R(Self: TSQLResult; var T: string; const t1: Word);
begin T := Self.OwnName[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultRelName_R(Self: TSQLResult; var T: string; const t1: Word);
begin T := Self.RelName[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultSqlName_R(Self: TSQLResult; var T: string; const t1: Word);
begin T := Self.SqlName[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultUniqueRelationName_R(Self: TSQLResult; var T: string);
begin T := Self.UniqueRelationName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultBufferChunks_R(Self: TSQLResult; var T: Cardinal);
begin T := Self.BufferChunks; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultCurrentRecord_W(Self: TSQLResult; const T: Integer);
begin Self.CurrentRecord := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultCurrentRecord_R(Self: TSQLResult; var T: Integer);
begin T := Self.CurrentRecord; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultRecordCount_R(Self: TSQLResult; var T: Integer);
begin T := Self.RecordCount; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultFetchBlobs_R(Self: TSQLResult; var T: boolean);
begin T := Self.FetchBlobs; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultCachedFetch_R(Self: TSQLResult; var T: boolean);
begin T := Self.CachedFetch; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultBof_R(Self: TSQLResult; var T: boolean);
begin T := Self.Bof; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultScrollEOF_R(Self: TSQLResult; var T: boolean);
begin T := Self.ScrollEOF; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultEof_R(Self: TSQLResult; var T: boolean);
begin T := Self.Eof; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultArrayCount_R(Self: TSQLResult; var T: Word);
begin T := Self.ArrayCount; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultArrayInfos_R(Self: TSQLResult; var T: PArrayInfo; const t1: word);
begin T := Self.ArrayInfos[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultArrayData_R(Self: TSQLResult; var T: Pointer; const t1: word);
begin T := Self.ArrayData[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLResultBlobData_R(Self: TSQLResult; var T: PBlobData; const t1: word);
begin T := Self.BlobData[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsDate_W(Self: TSQLDA; const T: Integer; const t1: String);
begin Self.ByNameAsDate[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsDate_R(Self: TSQLDA; var T: Integer; const t1: String);
begin T := Self.ByNameAsDate[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsBoolean_W(Self: TSQLDA; const T: Boolean; const t1: String);
begin Self.ByNameAsBoolean[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsBoolean_R(Self: TSQLDA; var T: Boolean; const t1: String);
begin T := Self.ByNameAsBoolean[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsDateTime_W(Self: TSQLDA; const T: TDateTime; const t1: String);
begin Self.ByNameAsDateTime[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsDateTime_R(Self: TSQLDA; var T: TDateTime; const t1: String);
begin T := Self.ByNameAsDateTime[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsVariant_R(Self: TSQLDA; var T: Variant; const t1: String);
begin T := Self.ByNameAsVariant[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsQuad_W(Self: TSQLDA; const T: TISCQuad; const t1: String);
begin Self.ByNameAsQuad[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsQuad_R(Self: TSQLDA; var T: TISCQuad; const t1: String);
begin T := Self.ByNameAsQuad[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsWideString_W(Self: TSQLDA; const T: WideString; const t1: String);
begin Self.ByNameAsWideString[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsWideString_R(Self: TSQLDA; var T: WideString; const t1: String);
begin T := Self.ByNameAsWideString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsString_W(Self: TSQLDA; const T: String; const t1: String);
begin Self.ByNameAsString[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsString_R(Self: TSQLDA; var T: String; const t1: String);
begin T := Self.ByNameAsString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsInt64_W(Self: TSQLDA; const T: Int64; const t1: String);
begin Self.ByNameAsInt64[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsInt64_R(Self: TSQLDA; var T: Int64; const t1: String);
begin T := Self.ByNameAsInt64[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsCurrency_W(Self: TSQLDA; const T: Currency; const t1: String);
begin Self.ByNameAsCurrency[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsCurrency_R(Self: TSQLDA; var T: Currency; const t1: String);
begin T := Self.ByNameAsCurrency[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsDouble_W(Self: TSQLDA; const T: Double; const t1: String);
begin Self.ByNameAsDouble[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsDouble_R(Self: TSQLDA; var T: Double; const t1: String);
begin T := Self.ByNameAsDouble[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsSingle_W(Self: TSQLDA; const T: Single; const t1: String);
begin Self.ByNameAsSingle[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsSingle_R(Self: TSQLDA; var T: Single; const t1: String);
begin T := Self.ByNameAsSingle[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsInteger_W(Self: TSQLDA; const T: Integer; const t1: String);
begin Self.ByNameAsInteger[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsInteger_R(Self: TSQLDA; var T: Integer; const t1: String);
begin T := Self.ByNameAsInteger[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsSmallint_W(Self: TSQLDA; const T: Smallint; const t1: String);
begin Self.ByNameAsSmallint[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameAsSmallint_R(Self: TSQLDA; var T: Smallint; const t1: String);
begin T := Self.ByNameAsSmallint[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameIsNull_W(Self: TSQLDA; const T: boolean; const t1: String);
begin Self.ByNameIsNull[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAByNameIsNull_R(Self: TSQLDA; var T: boolean; const t1: String);
begin T := Self.ByNameIsNull[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsVariant_R(Self: TSQLDA; var T: Variant; const t1: Word);
begin T := Self.AsVariant[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsTime_W(Self: TSQLDA; const T: Cardinal; const t1: Word);
begin Self.AsTime[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsTime_R(Self: TSQLDA; var T: Cardinal; const t1: Word);
begin T := Self.AsTime[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsDate_W(Self: TSQLDA; const T: Integer; const t1: Word);
begin Self.AsDate[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsDate_R(Self: TSQLDA; var T: Integer; const t1: Word);
begin T := Self.AsDate[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsBoolean_W(Self: TSQLDA; const T: Boolean; const t1: Word);
begin Self.AsBoolean[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsBoolean_R(Self: TSQLDA; var T: Boolean; const t1: Word);
begin T := Self.AsBoolean[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsDateTime_W(Self: TSQLDA; const T: TDateTime; const t1: Word);
begin Self.AsDateTime[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsDateTime_R(Self: TSQLDA; var T: TDateTime; const t1: Word);
begin T := Self.AsDateTime[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsQuad_W(Self: TSQLDA; const T: TISCQuad; const t1: Word);
begin Self.AsQuad[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsQuad_R(Self: TSQLDA; var T: TISCQuad; const t1: Word);
begin T := Self.AsQuad[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsWideString_W(Self: TSQLDA; const T: WideString; const t1: Word);
begin Self.AsWideString[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsWideString_R(Self: TSQLDA; var T: WideString; const t1: Word);
begin T := Self.AsWideString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsString_W(Self: TSQLDA; const T: String; const t1: Word);
begin Self.AsString[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsString_R(Self: TSQLDA; var T: String; const t1: Word);
begin T := Self.AsString[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsInt64_W(Self: TSQLDA; const T: Int64; const t1: Word);
begin Self.AsInt64[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsInt64_R(Self: TSQLDA; var T: Int64; const t1: Word);
begin T := Self.AsInt64[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsCurrency_W(Self: TSQLDA; const T: Currency; const t1: Word);
begin Self.AsCurrency[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsCurrency_R(Self: TSQLDA; var T: Currency; const t1: Word);
begin T := Self.AsCurrency[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsDouble_W(Self: TSQLDA; const T: Double; const t1: Word);
begin Self.AsDouble[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsDouble_R(Self: TSQLDA; var T: Double; const t1: Word);
begin T := Self.AsDouble[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsSingle_W(Self: TSQLDA; const T: Single; const t1: Word);
begin Self.AsSingle[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsSingle_R(Self: TSQLDA; var T: Single; const t1: Word);
begin T := Self.AsSingle[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsInteger_W(Self: TSQLDA; const T: Integer; const t1: Word);
begin Self.AsInteger[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsInteger_R(Self: TSQLDA; var T: Integer; const t1: Word);
begin T := Self.AsInteger[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsSmallint_W(Self: TSQLDA; const T: Smallint; const t1: Word);
begin Self.AsSmallint[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAAsSmallint_R(Self: TSQLDA; var T: Smallint; const t1: Word);
begin T := Self.AsSmallint[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAIsNull_W(Self: TSQLDA; const T: boolean; const t1: Word);
begin Self.IsNull[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAIsNull_R(Self: TSQLDA; var T: boolean; const t1: Word);
begin T := Self.IsNull[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAFieldType_R(Self: TSQLDA; var T: TUIBFieldType; const t1: Word);
begin T := Self.FieldType[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDASQLLen_R(Self: TSQLDA; var T: Smallint; const t1: Word);
begin T := Self.SQLLen[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDASQLType_R(Self: TSQLDA; var T: Smallint; const t1: Word);
begin T := Self.SQLType[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAFieldCount_R(Self: TSQLDA; var T: Integer);
begin T := Self.FieldCount; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAIsNumeric_R(Self: TSQLDA; var T: boolean; const t1: Word);
begin T := Self.IsNumeric[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAIsNullable_R(Self: TSQLDA; var T: boolean; const t1: Word);
begin T := Self.IsNullable[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAIsBlob_R(Self: TSQLDA; var T: boolean; const t1: Word);
begin T := Self.IsBlob[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLDAData_R(Self: TSQLDA; var T: PUIBSQLDa);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
procedure EUIBExceptionNumber_R(Self: EUIBException; var T: Integer);
begin T := Self.Number; end;

(*----------------------------------------------------------------------------*)
procedure EUIBErrorSQLCode_R(Self: EUIBError; var T: Integer);
begin T := Self.SQLCode; end;

(*----------------------------------------------------------------------------*)
procedure EUIBErrorErrorCode_R(Self: EUIBError; var T: Integer);
begin T := Self.ErrorCode; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLParams(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLParams) do
  begin
    RegisterConstructor(@TSQLParams.Create, 'Create');
    RegisterMethod(@TSQLParams.Clear, 'Clear');
    RegisterMethod(@TSQLParams.Parse, 'Parse');
    RegisterPropertyHelper(@TSQLParamsValues_R,nil,'Values');
    RegisterPropertyHelper(@TSQLParamsFieldName_R,nil,'FieldName');
    RegisterPropertyHelper(@TSQLParamsParamCount_R,nil,'ParamCount');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLResult(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLResult) do
  begin
    RegisterConstructor(@TSQLResult.Create, 'Create');
    RegisterMethod(@TSQLResult.ClearRecords, 'ClearRecords');
    RegisterMethod(@TSQLResult.GetRecord, 'GetRecord');
    RegisterMethod(@TSQLResult.SaveToStream, 'SaveToStream');
    RegisterMethod(@TSQLResult.LoadFromStream, 'LoadFromStream');
    RegisterMethod(@TSQLResult.Next, 'Next');
    RegisterPropertyHelper(@TSQLResultBlobData_R,nil,'BlobData');
    RegisterPropertyHelper(@TSQLResultArrayData_R,nil,'ArrayData');
    RegisterPropertyHelper(@TSQLResultArrayInfos_R,nil,'ArrayInfos');
    RegisterPropertyHelper(@TSQLResultArrayCount_R,nil,'ArrayCount');
    RegisterMethod(@TSQLResultOverload.ReadBlobStream, 'ReadBlobStream');
    RegisterMethod(@TSQLResultOverload.ReadBlobString, 'ReadBlobString');
    RegisterMethod(@TSQLResultOverload.ReadBlobWideString, 'ReadBlobWideString');
    RegisterMethod(@TSQLResultOverload.ReadBlobVariant, 'ReadBlobVariant');
    RegisterMethod(@TSQLResultOverload.ReadBlobNameStream, 'ReadBlobNameStream');
    RegisterMethod(@TSQLResultOverload.ReadBlobNameString, 'ReadBlobNameString');
    RegisterMethod(@TSQLResultOverload.ReadBlobNameWideString, 'ReadBlobNameWideString');
    RegisterMethod(@TSQLResultOverload.ReadBlobNameVariant, 'ReadBlobNameVariant');
    RegisterMethod(@TSQLResultOverload.GetBlobSize, 'GetBlobSize');
    RegisterPropertyHelper(@TSQLResultEof_R,nil,'Eof');
    RegisterPropertyHelper(@TSQLResultScrollEOF_R,nil,'ScrollEOF');
    RegisterPropertyHelper(@TSQLResultBof_R,nil,'Bof');
    RegisterPropertyHelper(@TSQLResultCachedFetch_R,nil,'CachedFetch');
    RegisterPropertyHelper(@TSQLResultFetchBlobs_R,nil,'FetchBlobs');
    RegisterPropertyHelper(@TSQLResultRecordCount_R,nil,'RecordCount');
    RegisterPropertyHelper(@TSQLResultCurrentRecord_R,@TSQLResultCurrentRecord_W,'CurrentRecord');
    RegisterPropertyHelper(@TSQLResultBufferChunks_R,nil,'BufferChunks');
    RegisterPropertyHelper(@TSQLResultUniqueRelationName_R,nil,'UniqueRelationName');
    RegisterPropertyHelper(@TSQLResultSqlName_R,nil,'SqlName');
    RegisterPropertyHelper(@TSQLResultRelName_R,nil,'RelName');
    RegisterPropertyHelper(@TSQLResultOwnName_R,nil,'OwnName');
    RegisterPropertyHelper(@TSQLResultAliasName_R,nil,'AliasName');
    RegisterPropertyHelper(@TSQLResultAsSmallint_R,nil,'AsSmallint');
    RegisterPropertyHelper(@TSQLResultAsInteger_R,nil,'AsInteger');
    RegisterPropertyHelper(@TSQLResultAsSingle_R,nil,'AsSingle');
    RegisterPropertyHelper(@TSQLResultAsDouble_R,nil,'AsDouble');
    RegisterPropertyHelper(@TSQLResultAsCurrency_R,nil,'AsCurrency');
    RegisterPropertyHelper(@TSQLResultAsInt64_R,nil,'AsInt64');
    RegisterPropertyHelper(@TSQLResultAsString_R,nil,'AsString');
    RegisterPropertyHelper(@TSQLResultAsWideString_R,nil,'AsWideString');
    RegisterPropertyHelper(@TSQLResultAsVariant_R,nil,'AsVariant');
    RegisterPropertyHelper(@TSQLResultAsDateTime_R,nil,'AsDateTime');
    RegisterPropertyHelper(@TSQLResultAsDate_R,nil,'AsDate');
    RegisterPropertyHelper(@TSQLResultAsTime_R,nil,'AsTime');
    RegisterPropertyHelper(@TSQLResultAsBoolean_R,nil,'AsBoolean');
    RegisterPropertyHelper(@TSQLResultByNameIsNull_R,nil,'ByNameIsNull');
    RegisterPropertyHelper(@TSQLResultByNameIsNullable_R,nil,'ByNameIsNullable');
    RegisterPropertyHelper(@TSQLResultByNameAsSmallint_R,nil,'ByNameAsSmallint');
    RegisterPropertyHelper(@TSQLResultByNameAsInteger_R,nil,'ByNameAsInteger');
    RegisterPropertyHelper(@TSQLResultByNameAsSingle_R,nil,'ByNameAsSingle');
    RegisterPropertyHelper(@TSQLResultByNameAsDouble_R,nil,'ByNameAsDouble');
    RegisterPropertyHelper(@TSQLResultByNameAsCurrency_R,nil,'ByNameAsCurrency');
    RegisterPropertyHelper(@TSQLResultByNameAsInt64_R,nil,'ByNameAsInt64');
    RegisterPropertyHelper(@TSQLResultByNameAsString_R,nil,'ByNameAsString');
    RegisterPropertyHelper(@TSQLResultByNameAsWideString_R,nil,'ByNameAsWideString');
    RegisterPropertyHelper(@TSQLResultByNameAsQuad_R,nil,'ByNameAsQuad');
    RegisterPropertyHelper(@TSQLResultByNameAsVariant_R,nil,'ByNameAsVariant');
    RegisterPropertyHelper(@TSQLResultByNameAsDateTime_R,nil,'ByNameAsDateTime');
    RegisterPropertyHelper(@TSQLResultByNameAsBoolean_R,nil,'ByNameAsBoolean');
    RegisterPropertyHelper(@TSQLResultByNameAsDate_R,nil,'ByNameAsDate');
    RegisterPropertyHelper(@TSQLResultByNameAsTime_R,nil,'ByNameAsTime');
    RegisterPropertyHelper(@TSQLResultValues_R,nil,'Values');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLDA(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLDA) do
  begin
    RegisterMethod(@TSQLDA.CheckRange, 'CheckRange');
    RegisterVirtualMethod(@TSQLDA.GetFieldIndex, 'GetFieldIndex');
    RegisterPropertyHelper(@TSQLDAData_R,nil,'Data');
    RegisterPropertyHelper(@TSQLDAIsBlob_R,nil,'IsBlob');
    RegisterPropertyHelper(@TSQLDAIsNullable_R,nil,'IsNullable');
    RegisterPropertyHelper(@TSQLDAIsNumeric_R,nil,'IsNumeric');
    RegisterPropertyHelper(@TSQLDAFieldCount_R,nil,'FieldCount');
    RegisterPropertyHelper(@TSQLDASQLType_R,nil,'SQLType');
    RegisterPropertyHelper(@TSQLDASQLLen_R,nil,'SQLLen');
    RegisterPropertyHelper(@TSQLDAFieldType_R,nil,'FieldType');
    RegisterPropertyHelper(@TSQLDAIsNull_R,@TSQLDAIsNull_W,'IsNull');
    RegisterPropertyHelper(@TSQLDAAsSmallint_R,@TSQLDAAsSmallint_W,'AsSmallint');
    RegisterPropertyHelper(@TSQLDAAsInteger_R,@TSQLDAAsInteger_W,'AsInteger');
    RegisterPropertyHelper(@TSQLDAAsSingle_R,@TSQLDAAsSingle_W,'AsSingle');
    RegisterPropertyHelper(@TSQLDAAsDouble_R,@TSQLDAAsDouble_W,'AsDouble');
    RegisterPropertyHelper(@TSQLDAAsCurrency_R,@TSQLDAAsCurrency_W,'AsCurrency');
    RegisterPropertyHelper(@TSQLDAAsInt64_R,@TSQLDAAsInt64_W,'AsInt64');
    RegisterPropertyHelper(@TSQLDAAsString_R,@TSQLDAAsString_W,'AsString');
    RegisterPropertyHelper(@TSQLDAAsWideString_R,@TSQLDAAsWideString_W,'AsWideString');
    RegisterPropertyHelper(@TSQLDAAsQuad_R,@TSQLDAAsQuad_W,'AsQuad');
    RegisterPropertyHelper(@TSQLDAAsDateTime_R,@TSQLDAAsDateTime_W,'AsDateTime');
    RegisterPropertyHelper(@TSQLDAAsBoolean_R,@TSQLDAAsBoolean_W,'AsBoolean');
    RegisterPropertyHelper(@TSQLDAAsDate_R,@TSQLDAAsDate_W,'AsDate');
    RegisterPropertyHelper(@TSQLDAAsTime_R,@TSQLDAAsTime_W,'AsTime');
    RegisterPropertyHelper(@TSQLDAAsVariant_R,nil,'AsVariant');
    RegisterPropertyHelper(@TSQLDAByNameIsNull_R,@TSQLDAByNameIsNull_W,'ByNameIsNull');
    RegisterPropertyHelper(@TSQLDAByNameAsSmallint_R,@TSQLDAByNameAsSmallint_W,'ByNameAsSmallint');
    RegisterPropertyHelper(@TSQLDAByNameAsInteger_R,@TSQLDAByNameAsInteger_W,'ByNameAsInteger');
    RegisterPropertyHelper(@TSQLDAByNameAsSingle_R,@TSQLDAByNameAsSingle_W,'ByNameAsSingle');
    RegisterPropertyHelper(@TSQLDAByNameAsDouble_R,@TSQLDAByNameAsDouble_W,'ByNameAsDouble');
    RegisterPropertyHelper(@TSQLDAByNameAsCurrency_R,@TSQLDAByNameAsCurrency_W,'ByNameAsCurrency');
    RegisterPropertyHelper(@TSQLDAByNameAsInt64_R,@TSQLDAByNameAsInt64_W,'ByNameAsInt64');
    RegisterPropertyHelper(@TSQLDAByNameAsString_R,@TSQLDAByNameAsString_W,'ByNameAsString');
    RegisterPropertyHelper(@TSQLDAByNameAsWideString_R,@TSQLDAByNameAsWideString_W,'ByNameAsWideString');
    RegisterPropertyHelper(@TSQLDAByNameAsQuad_R,@TSQLDAByNameAsQuad_W,'ByNameAsQuad');
    RegisterPropertyHelper(@TSQLDAByNameAsVariant_R,nil,'ByNameAsVariant');
    RegisterPropertyHelper(@TSQLDAByNameAsDateTime_R,@TSQLDAByNameAsDateTime_W,'ByNameAsDateTime');
    RegisterPropertyHelper(@TSQLDAByNameAsBoolean_R,@TSQLDAByNameAsBoolean_W,'ByNameAsBoolean');
    RegisterPropertyHelper(@TSQLDAByNameAsDate_R,@TSQLDAByNameAsDate_W,'ByNameAsDate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EUIBException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EUIBException) do
  begin
    RegisterPropertyHelper(@EUIBExceptionNumber_R,nil,'Number');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_EUIBError(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EUIBError) do
  begin
    RegisterPropertyHelper(@EUIBErrorErrorCode_R,nil,'ErrorCode');
    RegisterPropertyHelper(@EUIBErrorSQLCode_R,nil,'SQLCode');
  end;
end;

procedure RIRegister_EException(CL: TPSRuntimeClassImporter);
begin
  CL.Add(EException);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uiblib(CL: TPSRuntimeClassImporter);
begin
  RIRegister_EException(CL);
  with CL.Add(EUIBConvertError) do
  RIRegister_EUIBError(CL);
  RIRegister_EUIBException(CL);
  with CL.Add(EUIBGFixError) do
  with CL.Add(EUIBDSQLError) do
  with CL.Add(EUIBDynError) do
  with CL.Add(EUIBGBakError) do
  with CL.Add(EUIBGSecError) do
  with CL.Add(EUIBLicenseError) do
  with CL.Add(EUIBGStatError) do
  RIRegister_TSQLDA(CL);
  RIRegister_TSQLResult(CL);
  RIRegister_TSQLParams(CL);
end;



{ TPSImport_uiblib }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uiblib.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uiblib(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uiblib.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uiblib(ri);
end;
(*----------------------------------------------------------------------------*)


{ TSQLResultOverload }

procedure TSQLResultOverload.ReadBlobNameStream(const name: string;
  Stream: TStream);
begin
  ReadBlob(name, Stream);
end;

procedure TSQLResultOverload.ReadBlobNameString(const name: string;
  var str: string);
begin
  ReadBlob(name, str);
end;

procedure TSQLResultOverload.ReadBlobNameVariant(const name: string;
  var Value: Variant);
begin
  ReadBlob(name, Value);
end;

procedure TSQLResultOverload.ReadBlobNameWideString(const name: string;
  var str: WideString);
begin
  ReadBlob(name, str);
end;

procedure TSQLResultOverload.ReadBlobStream(const Index: Word;
  Stream: TStream);
begin
  ReadBlob(Index, Stream);
end;

procedure TSQLResultOverload.ReadBlobString(const Index: Word;
  var str: string);
begin
  ReadBlob(Index, str);
end;

procedure TSQLResultOverload.ReadBlobVariant(const Index: Word;
  var Value: Variant);
begin
  ReadBlob(Index, Value);
end;

procedure TSQLResultOverload.ReadBlobWideString(const Index: Word;
  var str: WideString);
begin
  ReadBlob(Index, str);
end;

end.

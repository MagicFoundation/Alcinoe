unit uPSI_uibmetadata;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
{$I uib.inc} 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uibmetadata = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TMetaDataBase(CL: TPSPascalCompiler);
procedure SIRegister_TMetaRole(CL: TPSPascalCompiler);
procedure SIRegister_TMetaUDF(CL: TPSPascalCompiler);
procedure SIRegister_TMetaUDFField(CL: TPSPascalCompiler);
procedure SIRegister_TMetaException(CL: TPSPascalCompiler);
procedure SIRegister_TMetaProcedure(CL: TPSPascalCompiler);
procedure SIRegister_TMetaView(CL: TPSPascalCompiler);
procedure SIRegister_TMetaTable(CL: TPSPascalCompiler);
procedure SIRegister_TMetaTrigger(CL: TPSPascalCompiler);
procedure SIRegister_TMetaIndex(CL: TPSPascalCompiler);
procedure SIRegister_TMetaCheck(CL: TPSPascalCompiler);
procedure SIRegister_TMetaForeign(CL: TPSPascalCompiler);
procedure SIRegister_TMetaUnique(CL: TPSPascalCompiler);
procedure SIRegister_TMetaPrimary(CL: TPSPascalCompiler);
procedure SIRegister_TMetaConstraint(CL: TPSPascalCompiler);
procedure SIRegister_TMetaDomain(CL: TPSPascalCompiler);
procedure SIRegister_TMetaTableField(CL: TPSPascalCompiler);
procedure SIRegister_TMetaProcOutField(CL: TPSPascalCompiler);
procedure SIRegister_TMetaProcInField(CL: TPSPascalCompiler);
procedure SIRegister_TMetaField(CL: TPSPascalCompiler);
procedure SIRegister_TMetaBaseField(CL: TPSPascalCompiler);
procedure SIRegister_TMetaGenerator(CL: TPSPascalCompiler);
procedure SIRegister_TMetaNode(CL: TPSPascalCompiler);
procedure SIRegister_uibmetadata(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TMetaDataBase(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaRole(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaUDF(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaUDFField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaException(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaProcedure(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaView(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaTable(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaTrigger(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaIndex(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaCheck(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaForeign(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaUnique(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaPrimary(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaConstraint(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaDomain(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaTableField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaProcOutField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaProcInField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaBaseField(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaGenerator(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMetaNode(CL: TPSRuntimeClassImporter);
procedure RIRegister_uibmetadata(CL: TPSRuntimeClassImporter);

procedure Register;

implementation
uses
   uibase
  ,uiblib
  ,uib
  ,uibconst
  ,uibmetadata
  ;

const
  iptR = uPSCompiler.iptR;

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uibmetadata]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaDataBase(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaDataBase') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaDataBase') do
  begin
    RegisterMethod('Function FindTableName( const TableName : string) : TMetaTable');
    RegisterMethod('Function FindProcName( const ProcName : string) : TMetaProcedure');
    RegisterMethod('Function FindExceptionName( const ExcepName : string) : TMetaException');
    RegisterMethod('Function FindGeneratorName( const GenName : string) : TMetaGenerator');
    RegisterMethod('Function FindUDFName( const UDFName : string) : TMetaUDF');
    RegisterMethod('Function FindViewName( const ViewName : string) : TMetaView');
    RegisterMethod('Function FindRoleName( const RoleName : string) : TMetaRole');
    RegisterMethod('Function FindDomainName( const DomainName : string) : TMetaDomain');
    RegisterMethod('Function FindTriggerName( const TriggerName : string) : TMetaTrigger');
    RegisterMethod('Procedure LoadFromDatabase( Transaction : TUIBTransaction)');
    RegisterProperty('OIDDatabases', 'TOIDDatabases', iptrw);
    RegisterProperty('Generators', 'TMetaGenerator Integer', iptr);
    RegisterProperty('GeneratorsCount', 'Integer', iptr);
    RegisterProperty('Tables', 'TMetaTable Integer', iptr);
    RegisterProperty('TablesCount', 'Integer', iptr);
    RegisterProperty('OIDTables', 'TOIDTables', iptrw);
    RegisterProperty('Views', 'TMetaView Integer', iptr);
    RegisterProperty('ViewsCount', 'Integer', iptr);
    RegisterProperty('OIDViews', 'TOIDViews', iptrw);
    RegisterProperty('Domains', 'TMetaDomain Integer', iptr);
    RegisterProperty('DomainsCount', 'Integer', iptr);
    RegisterProperty('Procedures', 'TMetaProcedure Integer', iptr);
    RegisterProperty('ProceduresCount', 'Integer', iptr);
    RegisterProperty('OIDProcedures', 'TOIDProcedures', iptrw);
    RegisterProperty('Exceptions', 'TMetaException Integer', iptr);
    RegisterProperty('ExceptionsCount', 'Integer', iptr);
    RegisterProperty('UDFS', 'TMetaUDF Integer', iptr);
    RegisterProperty('UDFSCount', 'Integer', iptr);
    RegisterProperty('OIDUDFs', 'TOIDUDFs', iptrw);
    RegisterProperty('Roles', 'TMetaRole Integer', iptr);
    RegisterProperty('RolesCount', 'Integer', iptr);
    RegisterProperty('SysInfos', 'Boolean', iptrw);
    RegisterProperty('DefaultCharset', 'TCharacterSet', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaRole(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaRole') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaRole') do
  begin
    RegisterProperty('Owner', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaUDF(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaUDF') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaUDF') do
  begin
    RegisterProperty('Module', 'string', iptr);
    RegisterProperty('Entry', 'string', iptr);
    RegisterProperty('Return', 'Smallint', iptr);
    RegisterProperty('Fields', 'TMetaUDFField Integer', iptr);
    RegisterProperty('FieldsCount', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaUDFField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaBaseField', 'TMetaUDFField') do
  with CL.AddClassN(CL.FindClass('TMetaBaseField'),'TMetaUDFField') do
  begin
    RegisterProperty('Position', 'Smallint', iptr);
    RegisterProperty('Mechanism', 'Smallint', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaException(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaException') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaException') do
  begin
    RegisterProperty('Message', 'string', iptr);
    RegisterProperty('Number', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaProcedure(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaProcedure') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaProcedure') do
  begin
    RegisterMethod('Procedure SaveToAlterDDL( Stream : TStringStream)');
    RegisterProperty('Source', 'string', iptr);
    RegisterProperty('AsCreateEmptyDDL', 'string', iptr);
    RegisterProperty('AsAlterDDL', 'string', iptr);
    RegisterProperty('InputFields', 'TMetaProcInField Integer', iptr);
    RegisterProperty('InputFieldsCount', 'Integer', iptr);
    RegisterProperty('OutputFields', 'TMetaProcOutField Integer', iptr);
    RegisterProperty('OutputFieldsCount', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaView(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaView') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaView') do
  begin
    RegisterProperty('Source', 'string', iptr);
    RegisterProperty('Fields', 'TMetaField Integer', iptr);
    RegisterProperty('FieldsCount', 'Integer', iptr);
    RegisterProperty('Triggers', 'TMetaTrigger Integer', iptr);
    RegisterProperty('TriggersCount', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaTable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaTable') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaTable') do
  begin
    RegisterMethod('Function FindFieldName( const Name : string) : TMetaTableField');
    RegisterProperty('Fields', 'TMetaTableField Integer', iptr);
    RegisterProperty('FieldsCount', 'Integer', iptr);
    RegisterProperty('Primary', 'TMetaPrimary Integer', iptr);
    RegisterProperty('PrimaryCount', 'Integer', iptr);
    RegisterProperty('Uniques', 'TMetaUnique Integer', iptr);
    RegisterProperty('UniquesCount', 'Integer', iptr);
    RegisterProperty('Indices', 'TMetaIndex Integer', iptr);
    RegisterProperty('IndicesCount', 'Integer', iptr);
    RegisterProperty('Foreign', 'TMetaForeign Integer', iptr);
    RegisterProperty('ForeignCount', 'Integer', iptr);
    RegisterProperty('Checks', 'TMetaCheck Integer', iptr);
    RegisterProperty('ChecksCount', 'Integer', iptr);
    RegisterProperty('Triggers', 'TMetaTrigger Integer', iptr);
    RegisterProperty('TriggersCount', 'Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaTrigger(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaTrigger') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaTrigger') do
  begin
    RegisterMethod('Procedure SaveToAlterDDL( Stream : TStringStream)');
    RegisterProperty('Prefix', 'TTriggerPrefix', iptr);
    RegisterProperty('Suffix', 'TTriggerSuffixes', iptr);
    RegisterProperty('Position', 'Smallint', iptr);
    RegisterProperty('Active', 'Boolean', iptr);
    RegisterProperty('Source', 'string', iptr);
    RegisterProperty('AsAlterDDL', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaIndex(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaConstraint', 'TMetaIndex') do
  with CL.AddClassN(CL.FindClass('TMetaConstraint'),'TMetaIndex') do
  begin
    RegisterProperty('Unique', 'Boolean', iptr);
    RegisterProperty('Active', 'Boolean', iptr);
    RegisterProperty('Order', 'TIndexOrder', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaCheck(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaCheck') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaCheck') do
  begin
    RegisterProperty('Constraint', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaForeign(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaConstraint', 'TMetaForeign') do
  with CL.AddClassN(CL.FindClass('TMetaConstraint'),'TMetaForeign') do
  begin
    RegisterProperty('ForTable', 'TMetaTable', iptr);
    RegisterProperty('ForFields', 'TMetaTableField Word', iptr);
    RegisterProperty('ForFieldsCount', 'Word', iptr);
    RegisterProperty('OnDelete', 'TUpdateRule', iptr);
    RegisterProperty('OnUpdate', 'TUpdateRule', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaUnique(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaConstraint', 'TMetaUnique') do
  with CL.AddClassN(CL.FindClass('TMetaConstraint'),'TMetaUnique') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaPrimary(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaConstraint', 'TMetaPrimary') do
  with CL.AddClassN(CL.FindClass('TMetaConstraint'),'TMetaPrimary') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaConstraint(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaConstraint') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaConstraint') do
  begin
    RegisterProperty('Fields', 'TMetaTableField Word', iptr);
    RegisterProperty('FieldsCount', 'Word', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaDomain(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaTableField', 'TMetaDomain') do
  with CL.AddClassN(CL.FindClass('TMetaTableField'),'TMetaDomain') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaTableField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaField', 'TMetaTableField') do
  with CL.AddClassN(CL.FindClass('TMetaField'),'TMetaTableField') do
  begin
    RegisterProperty('DefaultValue', 'string', iptr);
    RegisterProperty('NotNull', 'Boolean', iptr);
    RegisterProperty('Domain', 'TMetaDomain', iptr);
    RegisterProperty('FieldInfos', 'TTableFieldInfos', iptr);
    RegisterProperty('ComputedSource', 'string', iptr);
    RegisterProperty('ValidationSource', 'string', iptr);
    RegisterProperty('ArrayBoundsCount', 'Integer', iptr);
    RegisterProperty('ArrayBounds', 'TArrayBound Integer', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaProcOutField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaField', 'TMetaProcOutField') do
  with CL.AddClassN(CL.FindClass('TMetaField'),'TMetaProcOutField') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaProcInField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaField', 'TMetaProcInField') do
  with CL.AddClassN(CL.FindClass('TMetaField'),'TMetaProcInField') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaBaseField', 'TMetaField') do
  with CL.AddClassN(CL.FindClass('TMetaBaseField'),'TMetaField') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaBaseField(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaBaseField') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaBaseField') do
  begin
    RegisterProperty('Scale', 'Word', iptr);
    RegisterProperty('Length', 'Smallint', iptr);
    RegisterProperty('Precision', 'Smallint', iptr);
    RegisterProperty('FieldType', 'TUIBFieldType', iptr);
    RegisterProperty('CharSet', 'string', iptr);
    RegisterProperty('SubType', 'Smallint', iptr);
    RegisterProperty('BytesPerCharacter', 'Smallint', iptr);
    RegisterProperty('ShortFieldType', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaGenerator(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMetaNode', 'TMetaGenerator') do
  with CL.AddClassN(CL.FindClass('TMetaNode'),'TMetaGenerator') do
  begin
    RegisterMethod('Procedure SaveToCreateDDLNode( Stream : TStringStream)');
    RegisterMethod('Procedure SaveToAlterDDLNode( Stream : TStringStream)');
    RegisterProperty('Value', 'Integer', iptr);
    RegisterProperty('AsCreateDLL', 'string', iptr);
    RegisterProperty('AsAlterDDL', 'string', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMetaNode(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'TMetaNode') do
  with CL.AddClassN(CL.FindClass('TObject'),'TMetaNode') do
  begin
    RegisterMethod('Procedure SaveToDDLNode( Stream : TStringStream)');
    //RegisterMethod('Function GetNodes( const Index : Integer) : TNodeItem');
    RegisterMethod('Function NodeClass : string');
    RegisterMethod('Function NodeType : TMetaNodeType');
    RegisterMethod('Constructor Create( AOwner : TMetaNode; ClassIndex : Integer)');
    RegisterMethod('Constructor CreateFromStream( AOwner : TMetaNode; ClassIndex : Integer; Stream : TStream)');
    RegisterMethod('Procedure SaveToStream( Stream : TStream)');
    RegisterMethod('Procedure SaveToDDL( Stream : TStringStream)');
    RegisterProperty('Name', 'string', iptr);
    RegisterProperty('AsDDL', 'string', iptr);
    RegisterProperty('AsDDLNode', 'string', iptr);
    RegisterProperty('NodeCount', 'Integer', iptr);
    //RegisterProperty('Nodes', 'TNodeItem Integer', iptr);
    RegisterProperty('Parent', 'TMetaNode', iptr);
    RegisterProperty('Data', 'Pointer', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uibmetadata(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TTriggerPrefix', '( tpBefore, tpAfter )');
  CL.AddTypeS('TTriggerSuffix', '( tsInsert, tsUpdate, tsDelete )');
  CL.AddTypeS('TTriggerSuffixes', 'set of TTriggerSuffix');
  CL.AddTypeS('TIndexOrder', '( ioDescending, ioAscending )');
  CL.AddTypeS('TUpdateRule', '( urRestrict, urCascade, urSetNull, urNoAction, u'
   +'rSetDefault )');
  CL.AddTypeS('TTableFieldInfo', '( fiPrimary, fiForeign, fiIndice, fiUnique )');
  CL.AddTypeS('TTableFieldInfos', 'set of TTableFieldInfo');
  CL.AddTypeS('TMetaNodeType', '( MetaNode, MetaDatabase, MetaException, MetaGe'
   +'nerator, MetaCheck, MetaTrigger, MetaUDF, MetaView, MetaProcedure, MetaRol'
   +'e, MetaTable, MetaBaseField, MetaUDFField, MetaField, MetaProcInField, Met'
   +'aProcOutField, MetaTableField, MetaDomain, MetaConstraint, MetaForeign, Me'
   +'taIndex, MetaPrimary, MetaUnique )');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TMetaNode');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TMetaDomain');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TMetaTable');
  //CL.AddTypeS('TMetaNodeClass', 'class of TMetaNode');
  //CL.AddTypeS('TNodeItem', 'record Childs : TList; ClassID : TMetaNodeClass; end');

  SIRegister_TMetaNode(CL);
  SIRegister_TMetaGenerator(CL);
  SIRegister_TMetaBaseField(CL);
  SIRegister_TMetaField(CL);
  SIRegister_TMetaProcInField(CL);
  SIRegister_TMetaProcOutField(CL);
  CL.AddTypeS('TArrayBound', 'record LowerBound : Integer; HigherBound : Intege'
   +'r; end');
  SIRegister_TMetaTableField(CL);
  SIRegister_TMetaDomain(CL);
  SIRegister_TMetaConstraint(CL);
  SIRegister_TMetaPrimary(CL);
  SIRegister_TMetaUnique(CL);
  SIRegister_TMetaForeign(CL);
  SIRegister_TMetaCheck(CL);
  SIRegister_TMetaIndex(CL);
  SIRegister_TMetaTrigger(CL);
  SIRegister_TMetaTable(CL);
  SIRegister_TMetaView(CL);
  SIRegister_TMetaProcedure(CL);
  SIRegister_TMetaException(CL);
  SIRegister_TMetaUDFField(CL);
  SIRegister_TMetaUDF(CL);
  SIRegister_TMetaRole(CL);
  SIRegister_TMetaDataBase(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseDefaultCharset_R(Self: TMetaDataBase; var T: TCharacterSet);
begin T := Self.DefaultCharset; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseSysInfos_W(Self: TMetaDataBase; const T: Boolean);
begin Self.SysInfos := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseSysInfos_R(Self: TMetaDataBase; var T: Boolean);
begin T := Self.SysInfos; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseRolesCount_R(Self: TMetaDataBase; var T: Integer);
begin T := Self.RolesCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseRoles_R(Self: TMetaDataBase; var T: TMetaRole; const t1: Integer);
begin T := Self.Roles[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDUDFs_W(Self: TMetaDataBase; const T: TOIDUDFs);
begin Self.OIDUDFs := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDUDFs_R(Self: TMetaDataBase; var T: TOIDUDFs);
begin T := Self.OIDUDFs; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseUDFSCount_R(Self: TMetaDataBase; var T: Integer);
begin T := Self.UDFSCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseUDFS_R(Self: TMetaDataBase; var T: TMetaUDF; const t1: Integer);
begin T := Self.UDFS[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseExceptionsCount_R(Self: TMetaDataBase; var T: Integer);
begin T := Self.ExceptionsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseExceptions_R(Self: TMetaDataBase; var T: TMetaException; const t1: Integer);
begin T := Self.Exceptions[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDProcedures_W(Self: TMetaDataBase; const T: TOIDProcedures);
begin Self.OIDProcedures := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDProcedures_R(Self: TMetaDataBase; var T: TOIDProcedures);
begin T := Self.OIDProcedures; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseProceduresCount_R(Self: TMetaDataBase; var T: Integer);
begin T := Self.ProceduresCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseProcedures_R(Self: TMetaDataBase; var T: TMetaProcedure; const t1: Integer);
begin T := Self.Procedures[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseDomainsCount_R(Self: TMetaDataBase; var T: Integer);
begin T := Self.DomainsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseDomains_R(Self: TMetaDataBase; var T: TMetaDomain; const t1: Integer);
begin T := Self.Domains[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDViews_W(Self: TMetaDataBase; const T: TOIDViews);
begin Self.OIDViews := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDViews_R(Self: TMetaDataBase; var T: TOIDViews);
begin T := Self.OIDViews; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseViewsCount_R(Self: TMetaDataBase; var T: Integer);
begin T := Self.ViewsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseViews_R(Self: TMetaDataBase; var T: TMetaView; const t1: Integer);
begin T := Self.Views[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDTables_W(Self: TMetaDataBase; const T: TOIDTables);
begin Self.OIDTables := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDTables_R(Self: TMetaDataBase; var T: TOIDTables);
begin T := Self.OIDTables; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseTablesCount_R(Self: TMetaDataBase; var T: Integer);
begin T := Self.TablesCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseTables_R(Self: TMetaDataBase; var T: TMetaTable; const t1: Integer);
begin T := Self.Tables[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseGeneratorsCount_R(Self: TMetaDataBase; var T: Integer);
begin T := Self.GeneratorsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseGenerators_R(Self: TMetaDataBase; var T: TMetaGenerator; const t1: Integer);
begin T := Self.Generators[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDDatabases_W(Self: TMetaDataBase; const T: TOIDDatabases);
begin Self.OIDDatabases := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaDataBaseOIDDatabases_R(Self: TMetaDataBase; var T: TOIDDatabases);
begin T := Self.OIDDatabases; end;

(*----------------------------------------------------------------------------*)
procedure TMetaRoleOwner_R(Self: TMetaRole; var T: string);
begin T := Self.Owner; end;

(*----------------------------------------------------------------------------*)
procedure TMetaUDFFieldsCount_R(Self: TMetaUDF; var T: Integer);
begin T := Self.FieldsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaUDFFields_R(Self: TMetaUDF; var T: TMetaUDFField; const t1: Integer);
begin T := Self.Fields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaUDFReturn_R(Self: TMetaUDF; var T: Smallint);
begin T := Self.Return; end;

(*----------------------------------------------------------------------------*)
procedure TMetaUDFEntry_R(Self: TMetaUDF; var T: string);
begin T := Self.Entry; end;

(*----------------------------------------------------------------------------*)
procedure TMetaUDFModule_R(Self: TMetaUDF; var T: string);
begin T := Self.Module; end;

(*----------------------------------------------------------------------------*)
procedure TMetaUDFFieldMechanism_R(Self: TMetaUDFField; var T: Smallint);
begin T := Self.Mechanism; end;

(*----------------------------------------------------------------------------*)
procedure TMetaUDFFieldPosition_R(Self: TMetaUDFField; var T: Smallint);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure TMetaExceptionNumber_R(Self: TMetaException; var T: Integer);
begin T := Self.Number; end;

(*----------------------------------------------------------------------------*)
procedure TMetaExceptionMessage_R(Self: TMetaException; var T: string);
begin T := Self.Message; end;

(*----------------------------------------------------------------------------*)
procedure TMetaProcedureOutputFieldsCount_R(Self: TMetaProcedure; var T: Integer);
begin T := Self.OutputFieldsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaProcedureOutputFields_R(Self: TMetaProcedure; var T: TMetaProcOutField; const t1: Integer);
begin T := Self.OutputFields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaProcedureInputFieldsCount_R(Self: TMetaProcedure; var T: Integer);
begin T := Self.InputFieldsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaProcedureInputFields_R(Self: TMetaProcedure; var T: TMetaProcInField; const t1: Integer);
begin T := Self.InputFields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaProcedureAsAlterDDL_R(Self: TMetaProcedure; var T: string);
begin T := Self.AsAlterDDL; end;

(*----------------------------------------------------------------------------*)
procedure TMetaProcedureAsCreateEmptyDDL_R(Self: TMetaProcedure; var T: string);
begin T := Self.AsCreateEmptyDDL; end;

(*----------------------------------------------------------------------------*)
procedure TMetaProcedureSource_R(Self: TMetaProcedure; var T: string);
begin T := Self.Source; end;

(*----------------------------------------------------------------------------*)
procedure TMetaViewTriggersCount_R(Self: TMetaView; var T: Integer);
begin T := Self.TriggersCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaViewTriggers_R(Self: TMetaView; var T: TMetaTrigger; const t1: Integer);
begin T := Self.Triggers[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaViewFieldsCount_R(Self: TMetaView; var T: Integer);
begin T := Self.FieldsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaViewFields_R(Self: TMetaView; var T: TMetaField; const t1: Integer);
begin T := Self.Fields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaViewSource_R(Self: TMetaView; var T: string);
begin T := Self.Source; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableTriggersCount_R(Self: TMetaTable; var T: Integer);
begin T := Self.TriggersCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableTriggers_R(Self: TMetaTable; var T: TMetaTrigger; const t1: Integer);
begin T := Self.Triggers[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableChecksCount_R(Self: TMetaTable; var T: Integer);
begin T := Self.ChecksCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableChecks_R(Self: TMetaTable; var T: TMetaCheck; const t1: Integer);
begin T := Self.Checks[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableForeignCount_R(Self: TMetaTable; var T: Integer);
begin T := Self.ForeignCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableForeign_R(Self: TMetaTable; var T: TMetaForeign; const t1: Integer);
begin T := Self.Foreign[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableIndicesCount_R(Self: TMetaTable; var T: Integer);
begin T := Self.IndicesCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableIndices_R(Self: TMetaTable; var T: TMetaIndex; const t1: Integer);
begin T := Self.Indices[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableUniquesCount_R(Self: TMetaTable; var T: Integer);
begin T := Self.UniquesCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableUniques_R(Self: TMetaTable; var T: TMetaUnique; const t1: Integer);
begin T := Self.Uniques[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTablePrimaryCount_R(Self: TMetaTable; var T: Integer);
begin T := Self.PrimaryCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTablePrimary_R(Self: TMetaTable; var T: TMetaPrimary; const t1: Integer);
begin T := Self.Primary[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldsCount_R(Self: TMetaTable; var T: Integer);
begin T := Self.FieldsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFields_R(Self: TMetaTable; var T: TMetaTableField; const t1: Integer);
begin T := Self.Fields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTriggerAsAlterDDL_R(Self: TMetaTrigger; var T: string);
begin T := Self.AsAlterDDL; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTriggerSource_R(Self: TMetaTrigger; var T: string);
begin T := Self.Source; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTriggerActive_R(Self: TMetaTrigger; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTriggerPosition_R(Self: TMetaTrigger; var T: Smallint);
begin T := Self.Position; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTriggerSuffix_R(Self: TMetaTrigger; var T: TTriggerSuffixes);
begin T := Self.Suffix; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTriggerPrefix_R(Self: TMetaTrigger; var T: TTriggerPrefix);
begin T := Self.Prefix; end;

(*----------------------------------------------------------------------------*)
procedure TMetaIndexOrder_R(Self: TMetaIndex; var T: TIndexOrder);
begin T := Self.Order; end;

(*----------------------------------------------------------------------------*)
procedure TMetaIndexActive_R(Self: TMetaIndex; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure TMetaIndexUnique_R(Self: TMetaIndex; var T: Boolean);
begin T := Self.Unique; end;

(*----------------------------------------------------------------------------*)
procedure TMetaCheckConstraint_R(Self: TMetaCheck; var T: string);
begin T := Self.Constraint; end;

(*----------------------------------------------------------------------------*)
procedure TMetaForeignOnUpdate_R(Self: TMetaForeign; var T: TUpdateRule);
begin T := Self.OnUpdate; end;

(*----------------------------------------------------------------------------*)
procedure TMetaForeignOnDelete_R(Self: TMetaForeign; var T: TUpdateRule);
begin T := Self.OnDelete; end;

(*----------------------------------------------------------------------------*)
procedure TMetaForeignForFieldsCount_R(Self: TMetaForeign; var T: Word);
begin T := Self.ForFieldsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaForeignForFields_R(Self: TMetaForeign; var T: TMetaTableField; const t1: Word);
begin T := Self.ForFields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaForeignForTable_R(Self: TMetaForeign; var T: TMetaTable);
begin T := Self.ForTable; end;

(*----------------------------------------------------------------------------*)
procedure TMetaConstraintFieldsCount_R(Self: TMetaConstraint; var T: Word);
begin T := Self.FieldsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaConstraintFields_R(Self: TMetaConstraint; var T: TMetaTableField; const t1: Word);
begin T := Self.Fields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldArrayBounds_R(Self: TMetaTableField; var T: TArrayBound; const t1: Integer);
begin T := Self.ArrayBounds[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldArrayBoundsCount_R(Self: TMetaTableField; var T: Integer);
begin T := Self.ArrayBoundsCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldValidationSource_R(Self: TMetaTableField; var T: string);
begin T := Self.ValidationSource; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldComputedSource_R(Self: TMetaTableField; var T: string);
begin T := Self.ComputedSource; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldFieldInfos_R(Self: TMetaTableField; var T: TTableFieldInfos);
begin T := Self.FieldInfos; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldDomain_R(Self: TMetaTableField; var T: TMetaDomain);
begin T := Self.Domain; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldNotNull_R(Self: TMetaTableField; var T: Boolean);
begin T := Self.NotNull; end;

(*----------------------------------------------------------------------------*)
procedure TMetaTableFieldDefaultValue_R(Self: TMetaTableField; var T: string);
begin T := Self.DefaultValue; end;

(*----------------------------------------------------------------------------*)
procedure TMetaBaseFieldShortFieldType_R(Self: TMetaBaseField; var T: string);
begin T := Self.ShortFieldType; end;

(*----------------------------------------------------------------------------*)
procedure TMetaBaseFieldBytesPerCharacter_R(Self: TMetaBaseField; var T: Smallint);
begin T := Self.BytesPerCharacter; end;

(*----------------------------------------------------------------------------*)
procedure TMetaBaseFieldSubType_R(Self: TMetaBaseField; var T: Smallint);
begin T := Self.SubType; end;

(*----------------------------------------------------------------------------*)
procedure TMetaBaseFieldCharSet_R(Self: TMetaBaseField; var T: string);
begin T := Self.CharSet; end;

(*----------------------------------------------------------------------------*)
procedure TMetaBaseFieldFieldType_R(Self: TMetaBaseField; var T: TUIBFieldType);
begin T := Self.FieldType; end;

(*----------------------------------------------------------------------------*)
procedure TMetaBaseFieldPrecision_R(Self: TMetaBaseField; var T: Smallint);
begin T := Self.Precision; end;

(*----------------------------------------------------------------------------*)
procedure TMetaBaseFieldLength_R(Self: TMetaBaseField; var T: Smallint);
begin T := Self.Length; end;

(*----------------------------------------------------------------------------*)
procedure TMetaBaseFieldScale_R(Self: TMetaBaseField; var T: Word);
begin T := Self.Scale; end;

(*----------------------------------------------------------------------------*)
procedure TMetaGeneratorAsAlterDDL_R(Self: TMetaGenerator; var T: string);
begin T := Self.AsAlterDDL; end;

(*----------------------------------------------------------------------------*)
procedure TMetaGeneratorAsCreateDLL_R(Self: TMetaGenerator; var T: string);
begin T := Self.AsCreateDLL; end;

(*----------------------------------------------------------------------------*)
procedure TMetaGeneratorValue_R(Self: TMetaGenerator; var T: Integer);
begin T := Self.Value; end;

(*----------------------------------------------------------------------------*)
procedure TMetaNodeData_W(Self: TMetaNode; const T: Pointer);
begin Self.Data := T; end;

(*----------------------------------------------------------------------------*)
procedure TMetaNodeData_R(Self: TMetaNode; var T: Pointer);
begin T := Self.Data; end;

(*----------------------------------------------------------------------------*)
procedure TMetaNodeParent_R(Self: TMetaNode; var T: TMetaNode);
begin T := Self.Parent; end;

(*----------------------------------------------------------------------------*)
//procedure TMetaNodeNodes_R(Self: TMetaNode; var T: TNodeItem; const t1: Integer);
//begin T := Self.Nodes[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TMetaNodeNodeCount_R(Self: TMetaNode; var T: Integer);
begin T := Self.NodeCount; end;

(*----------------------------------------------------------------------------*)
procedure TMetaNodeAsDDLNode_R(Self: TMetaNode; var T: string);
begin T := Self.AsDDLNode; end;

(*----------------------------------------------------------------------------*)
procedure TMetaNodeAsDDL_R(Self: TMetaNode; var T: string);
begin T := Self.AsDDL; end;

(*----------------------------------------------------------------------------*)
procedure TMetaNodeName_R(Self: TMetaNode; var T: string);
begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaDataBase(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaDataBase) do
  begin
    RegisterMethod(@TMetaDataBase.FindTableName, 'FindTableName');
    RegisterMethod(@TMetaDataBase.FindProcName, 'FindProcName');
    RegisterMethod(@TMetaDataBase.FindExceptionName, 'FindExceptionName');
    RegisterMethod(@TMetaDataBase.FindGeneratorName, 'FindGeneratorName');
    RegisterMethod(@TMetaDataBase.FindUDFName, 'FindUDFName');
    RegisterMethod(@TMetaDataBase.FindViewName, 'FindViewName');
    RegisterMethod(@TMetaDataBase.FindRoleName, 'FindRoleName');
    RegisterMethod(@TMetaDataBase.FindDomainName, 'FindDomainName');
    RegisterMethod(@TMetaDataBase.FindTriggerName, 'FindTriggerName');
    RegisterMethod(@TMetaDataBase.LoadFromDatabase, 'LoadFromDatabase');
    RegisterPropertyHelper(@TMetaDataBaseOIDDatabases_R,@TMetaDataBaseOIDDatabases_W,'OIDDatabases');
    RegisterPropertyHelper(@TMetaDataBaseGenerators_R,nil,'Generators');
    RegisterPropertyHelper(@TMetaDataBaseGeneratorsCount_R,nil,'GeneratorsCount');
    RegisterPropertyHelper(@TMetaDataBaseTables_R,nil,'Tables');
    RegisterPropertyHelper(@TMetaDataBaseTablesCount_R,nil,'TablesCount');
    RegisterPropertyHelper(@TMetaDataBaseOIDTables_R,@TMetaDataBaseOIDTables_W,'OIDTables');
    RegisterPropertyHelper(@TMetaDataBaseViews_R,nil,'Views');
    RegisterPropertyHelper(@TMetaDataBaseViewsCount_R,nil,'ViewsCount');
    RegisterPropertyHelper(@TMetaDataBaseOIDViews_R,@TMetaDataBaseOIDViews_W,'OIDViews');
    RegisterPropertyHelper(@TMetaDataBaseDomains_R,nil,'Domains');
    RegisterPropertyHelper(@TMetaDataBaseDomainsCount_R,nil,'DomainsCount');
    RegisterPropertyHelper(@TMetaDataBaseProcedures_R,nil,'Procedures');
    RegisterPropertyHelper(@TMetaDataBaseProceduresCount_R,nil,'ProceduresCount');
    RegisterPropertyHelper(@TMetaDataBaseOIDProcedures_R,@TMetaDataBaseOIDProcedures_W,'OIDProcedures');
    RegisterPropertyHelper(@TMetaDataBaseExceptions_R,nil,'Exceptions');
    RegisterPropertyHelper(@TMetaDataBaseExceptionsCount_R,nil,'ExceptionsCount');
    RegisterPropertyHelper(@TMetaDataBaseUDFS_R,nil,'UDFS');
    RegisterPropertyHelper(@TMetaDataBaseUDFSCount_R,nil,'UDFSCount');
    RegisterPropertyHelper(@TMetaDataBaseOIDUDFs_R,@TMetaDataBaseOIDUDFs_W,'OIDUDFs');
    RegisterPropertyHelper(@TMetaDataBaseRoles_R,nil,'Roles');
    RegisterPropertyHelper(@TMetaDataBaseRolesCount_R,nil,'RolesCount');
    RegisterPropertyHelper(@TMetaDataBaseSysInfos_R,@TMetaDataBaseSysInfos_W,'SysInfos');
    RegisterPropertyHelper(@TMetaDataBaseDefaultCharset_R,nil,'DefaultCharset');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaRole(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaRole) do
  begin
    RegisterPropertyHelper(@TMetaRoleOwner_R,nil,'Owner');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaUDF(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaUDF) do
  begin
    RegisterPropertyHelper(@TMetaUDFModule_R,nil,'Module');
    RegisterPropertyHelper(@TMetaUDFEntry_R,nil,'Entry');
    RegisterPropertyHelper(@TMetaUDFReturn_R,nil,'Return');
    RegisterPropertyHelper(@TMetaUDFFields_R,nil,'Fields');
    RegisterPropertyHelper(@TMetaUDFFieldsCount_R,nil,'FieldsCount');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaUDFField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaUDFField) do
  begin
    RegisterPropertyHelper(@TMetaUDFFieldPosition_R,nil,'Position');
    RegisterPropertyHelper(@TMetaUDFFieldMechanism_R,nil,'Mechanism');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaException(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaException) do
  begin
    RegisterPropertyHelper(@TMetaExceptionMessage_R,nil,'Message');
    RegisterPropertyHelper(@TMetaExceptionNumber_R,nil,'Number');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaProcedure(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaProcedure) do
  begin
    RegisterMethod(@TMetaProcedure.SaveToAlterDDL, 'SaveToAlterDDL');
    RegisterPropertyHelper(@TMetaProcedureSource_R,nil,'Source');
    RegisterPropertyHelper(@TMetaProcedureAsCreateEmptyDDL_R,nil,'AsCreateEmptyDDL');
    RegisterPropertyHelper(@TMetaProcedureAsAlterDDL_R,nil,'AsAlterDDL');
    RegisterPropertyHelper(@TMetaProcedureInputFields_R,nil,'InputFields');
    RegisterPropertyHelper(@TMetaProcedureInputFieldsCount_R,nil,'InputFieldsCount');
    RegisterPropertyHelper(@TMetaProcedureOutputFields_R,nil,'OutputFields');
    RegisterPropertyHelper(@TMetaProcedureOutputFieldsCount_R,nil,'OutputFieldsCount');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaView(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaView) do
  begin
    RegisterPropertyHelper(@TMetaViewSource_R,nil,'Source');
    RegisterPropertyHelper(@TMetaViewFields_R,nil,'Fields');
    RegisterPropertyHelper(@TMetaViewFieldsCount_R,nil,'FieldsCount');
    RegisterPropertyHelper(@TMetaViewTriggers_R,nil,'Triggers');
    RegisterPropertyHelper(@TMetaViewTriggersCount_R,nil,'TriggersCount');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaTable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaTable) do
  begin
    RegisterMethod(@TMetaTable.FindFieldName, 'FindFieldName');
    RegisterPropertyHelper(@TMetaTableFields_R,nil,'Fields');
    RegisterPropertyHelper(@TMetaTableFieldsCount_R,nil,'FieldsCount');
    RegisterPropertyHelper(@TMetaTablePrimary_R,nil,'Primary');
    RegisterPropertyHelper(@TMetaTablePrimaryCount_R,nil,'PrimaryCount');
    RegisterPropertyHelper(@TMetaTableUniques_R,nil,'Uniques');
    RegisterPropertyHelper(@TMetaTableUniquesCount_R,nil,'UniquesCount');
    RegisterPropertyHelper(@TMetaTableIndices_R,nil,'Indices');
    RegisterPropertyHelper(@TMetaTableIndicesCount_R,nil,'IndicesCount');
    RegisterPropertyHelper(@TMetaTableForeign_R,nil,'Foreign');
    RegisterPropertyHelper(@TMetaTableForeignCount_R,nil,'ForeignCount');
    RegisterPropertyHelper(@TMetaTableChecks_R,nil,'Checks');
    RegisterPropertyHelper(@TMetaTableChecksCount_R,nil,'ChecksCount');
    RegisterPropertyHelper(@TMetaTableTriggers_R,nil,'Triggers');
    RegisterPropertyHelper(@TMetaTableTriggersCount_R,nil,'TriggersCount');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaTrigger(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaTrigger) do
  begin
    RegisterMethod(@TMetaTrigger.SaveToAlterDDL, 'SaveToAlterDDL');
    RegisterPropertyHelper(@TMetaTriggerPrefix_R,nil,'Prefix');
    RegisterPropertyHelper(@TMetaTriggerSuffix_R,nil,'Suffix');
    RegisterPropertyHelper(@TMetaTriggerPosition_R,nil,'Position');
    RegisterPropertyHelper(@TMetaTriggerActive_R,nil,'Active');
    RegisterPropertyHelper(@TMetaTriggerSource_R,nil,'Source');
    RegisterPropertyHelper(@TMetaTriggerAsAlterDDL_R,nil,'AsAlterDDL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaIndex(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaIndex) do
  begin
    RegisterPropertyHelper(@TMetaIndexUnique_R,nil,'Unique');
    RegisterPropertyHelper(@TMetaIndexActive_R,nil,'Active');
    RegisterPropertyHelper(@TMetaIndexOrder_R,nil,'Order');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaCheck(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaCheck) do
  begin
    RegisterPropertyHelper(@TMetaCheckConstraint_R,nil,'Constraint');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaForeign(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaForeign) do
  begin
    RegisterPropertyHelper(@TMetaForeignForTable_R,nil,'ForTable');
    RegisterPropertyHelper(@TMetaForeignForFields_R,nil,'ForFields');
    RegisterPropertyHelper(@TMetaForeignForFieldsCount_R,nil,'ForFieldsCount');
    RegisterPropertyHelper(@TMetaForeignOnDelete_R,nil,'OnDelete');
    RegisterPropertyHelper(@TMetaForeignOnUpdate_R,nil,'OnUpdate');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaUnique(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaUnique) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaPrimary(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaPrimary) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaConstraint(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaConstraint) do
  begin
    RegisterPropertyHelper(@TMetaConstraintFields_R,nil,'Fields');
    RegisterPropertyHelper(@TMetaConstraintFieldsCount_R,nil,'FieldsCount');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaDomain(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaDomain) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaTableField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaTableField) do
  begin
    RegisterPropertyHelper(@TMetaTableFieldDefaultValue_R,nil,'DefaultValue');
    RegisterPropertyHelper(@TMetaTableFieldNotNull_R,nil,'NotNull');
    RegisterPropertyHelper(@TMetaTableFieldDomain_R,nil,'Domain');
    RegisterPropertyHelper(@TMetaTableFieldFieldInfos_R,nil,'FieldInfos');
    RegisterPropertyHelper(@TMetaTableFieldComputedSource_R,nil,'ComputedSource');
    RegisterPropertyHelper(@TMetaTableFieldValidationSource_R,nil,'ValidationSource');
    RegisterPropertyHelper(@TMetaTableFieldArrayBoundsCount_R,nil,'ArrayBoundsCount');
    RegisterPropertyHelper(@TMetaTableFieldArrayBounds_R,nil,'ArrayBounds');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaProcOutField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaProcOutField) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaProcInField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaProcInField) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaField) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaBaseField(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaBaseField) do
  begin
    RegisterPropertyHelper(@TMetaBaseFieldScale_R,nil,'Scale');
    RegisterPropertyHelper(@TMetaBaseFieldLength_R,nil,'Length');
    RegisterPropertyHelper(@TMetaBaseFieldPrecision_R,nil,'Precision');
    RegisterPropertyHelper(@TMetaBaseFieldFieldType_R,nil,'FieldType');
    RegisterPropertyHelper(@TMetaBaseFieldCharSet_R,nil,'CharSet');
    RegisterPropertyHelper(@TMetaBaseFieldSubType_R,nil,'SubType');
    RegisterPropertyHelper(@TMetaBaseFieldBytesPerCharacter_R,nil,'BytesPerCharacter');
    RegisterPropertyHelper(@TMetaBaseFieldShortFieldType_R,nil,'ShortFieldType');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaGenerator(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaGenerator) do
  begin
    RegisterMethod(@TMetaGenerator.SaveToCreateDDLNode, 'SaveToCreateDDLNode');
    RegisterMethod(@TMetaGenerator.SaveToAlterDDLNode, 'SaveToAlterDDLNode');
    RegisterPropertyHelper(@TMetaGeneratorValue_R,nil,'Value');
    RegisterPropertyHelper(@TMetaGeneratorAsCreateDLL_R,nil,'AsCreateDLL');
    RegisterPropertyHelper(@TMetaGeneratorAsAlterDDL_R,nil,'AsAlterDDL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMetaNode(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaNode) do
  begin
    RegisterVirtualMethod(@TMetaNode.SaveToDDLNode, 'SaveToDDLNode');
    RegisterMethod(@TMetaNode.GetNodes, 'GetNodes');
    RegisterVirtualMethod(@TMetaNode.NodeClass, 'NodeClass');
    RegisterVirtualMethod(@TMetaNode.NodeType, 'NodeType');
    RegisterVirtualConstructor(@TMetaNode.Create, 'Create');
    RegisterVirtualConstructor(@TMetaNode.CreateFromStream, 'CreateFromStream');
    RegisterVirtualMethod(@TMetaNode.SaveToStream, 'SaveToStream');
    RegisterVirtualMethod(@TMetaNode.SaveToDDL, 'SaveToDDL');
    RegisterPropertyHelper(@TMetaNodeName_R,nil,'Name');
    RegisterPropertyHelper(@TMetaNodeAsDDL_R,nil,'AsDDL');
    RegisterPropertyHelper(@TMetaNodeAsDDLNode_R,nil,'AsDDLNode');
    RegisterPropertyHelper(@TMetaNodeNodeCount_R,nil,'NodeCount');
    //RegisterPropertyHelper(@TMetaNodeNodes_R,nil,'Nodes');
    RegisterPropertyHelper(@TMetaNodeParent_R,nil,'Parent');
    RegisterPropertyHelper(@TMetaNodeData_R,@TMetaNodeData_W,'Data');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uibmetadata(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TMetaNode) do
  with CL.Add(TMetaDomain) do
  with CL.Add(TMetaTable) do
  RIRegister_TMetaNode(CL);
  RIRegister_TMetaGenerator(CL);
  RIRegister_TMetaBaseField(CL);
  RIRegister_TMetaField(CL);
  RIRegister_TMetaProcInField(CL);
  RIRegister_TMetaProcOutField(CL);
  RIRegister_TMetaTableField(CL);
  RIRegister_TMetaDomain(CL);
  RIRegister_TMetaConstraint(CL);
  RIRegister_TMetaPrimary(CL);
  RIRegister_TMetaUnique(CL);
  RIRegister_TMetaForeign(CL);
  RIRegister_TMetaCheck(CL);
  RIRegister_TMetaIndex(CL);
  RIRegister_TMetaTrigger(CL);
  RIRegister_TMetaTable(CL);
  RIRegister_TMetaView(CL);
  RIRegister_TMetaProcedure(CL);
  RIRegister_TMetaException(CL);
  RIRegister_TMetaUDFField(CL);
  RIRegister_TMetaUDF(CL);
  RIRegister_TMetaRole(CL);
  RIRegister_TMetaDataBase(CL);
end;

 
 
{ TPSImport_uibmetadata }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uibmetadata.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uibmetadata(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uibmetadata.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uibmetadata(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.

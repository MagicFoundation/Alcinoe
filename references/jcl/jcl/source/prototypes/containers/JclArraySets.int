(*$JPPDEFINEMACRO JCLARRAYSETINT(SELFCLASSNAME, ANCESTORCLASSNAME,
  BASECONTAINERINTERFACENAME, FLATCONTAINERINTERFACENAME,
  COLLECTIONINTERFACENAME, LISTINTERFACENAME, ARRAYINTERFACENAME, SETINTERFACENAME,
  EQUALITYCOMPARERINTERFACENAME, COMPARERINTERFACENAME, INTERFACEADDITIONAL,
  SECTIONADDITIONAL, COLLECTIONFLAGS, CONSTKEYWORD, PARAMETERNAME, TYPENAME)
SELFCLASSNAME = class(ANCESTORCLASSNAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
  IJclIntfCloneable, IJclCloneable, IJclPackable, IJclGrowable, IJclBaseContainer,
  BASECONTAINERINTERFACENAME, FLATCONTAINERINTERFACENAME, EQUALITYCOMPARERINTERFACENAME, COMPARERINTERFACENAME,INTERFACEADDITIONAL
  COLLECTIONINTERFACENAME, LISTINTERFACENAME, ARRAYINTERFACENAME, SETINTERFACENAME)SECTIONADDITIONAL
private
  function BinarySearch(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
public
  { COLLECTIONINTERFACENAME }
  function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function AddAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Contains(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  { LISTINTERFACENAME }
  function Insert(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  { SETINTERFACENAME }
  procedure Intersect(const ACollection: COLLECTIONINTERFACENAME);
  procedure Subtract(const ACollection: COLLECTIONINTERFACENAME);
  procedure Union(const ACollection: COLLECTIONINTERFACENAME);
end;*)

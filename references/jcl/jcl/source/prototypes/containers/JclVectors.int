(*$JPPDEFINEMACRO JCLVECTORINT(SELFCLASSNAME, ANCESTORCLASSNAME,
  BASECONTAINERINTERFACENAME, FLATCONTAINERINTERFACENAME,
  COLLECTIONINTERFACENAME, LISTINTERFACENAME, ARRAYINTERFACENAME, ITRINTERFACENAME,
  EQUALITYCOMPARERINTERFACENAME, INTERFACEADDITIONAL,
  SECTIONADDITIONAL, COLLECTIONFLAGS, OWNERSHIPDECLARATION,
  CONSTKEYWORD, PARAMETERNAME, TYPENAME, DYNARRAYTYPE, GETTERFUNCTIONNAME, SETTERPROCEDURENAME)
SELFCLASSNAME = class(ANCESTORCLASSNAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
  IJclIntfCloneable, IJclCloneable, IJclPackable, IJclGrowable, IJclBaseContainer,
  BASECONTAINERINTERFACENAME, FLATCONTAINERINTERFACENAME, EQUALITYCOMPARERINTERFACENAME,INTERFACEADDITIONAL
  COLLECTIONINTERFACENAME, LISTINTERFACENAME, ARRAYINTERFACENAME)SECTIONADDITIONAL
private
  FItems: DYNARRAYTYPE;
protected
  procedure AssignDataTo(Dest: TJclAbstractContainerBase); override;
  // fix ambiguous warnings when compiled on Delphi.net and earlier versions of Delphi.win32
  // complaining about possible unaffected result.
  function RaiseOutOfBoundsError: TYPENAME;
public
  constructor Create(ACapacity: IntegerOWNERSHIPDECLARATION); overload;
  constructor Create(const ACollection: COLLECTIONINTERFACENAMEOWNERSHIPDECLARATION); overload;
  destructor Destroy; override;
  property Items: DYNARRAYTYPE read FItems;
  { IJclPackable }
  procedure SetCapacity(Value: Integer); override;
  { COLLECTIONINTERFACENAME }
  function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function AddAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  procedure Clear;COLLECTIONFLAGS
  function CollectionEquals(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Contains(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;COLLECTIONFLAGS
  function ContainsAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Extract(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean; COLLECTIONFLAGS
  function ExtractAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function First: ITRINTERFACENAME;COLLECTIONFLAGS
  function IsEmpty: Boolean;COLLECTIONFLAGS
  function Last: ITRINTERFACENAME;COLLECTIONFLAGS
  function Remove(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean; COLLECTIONFLAGS
  function RemoveAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function RetainAll(const ACollection: COLLECTIONINTERFACENAME): Boolean;COLLECTIONFLAGS
  function Size: Integer;COLLECTIONFLAGS
  {$IFDEF SUPPORTS_FOR_IN}
  function GetEnumerator: ITRINTERFACENAME;COLLECTIONFLAGS
  {$ENDIF SUPPORTS_FOR_IN}
  { LISTINTERFACENAME }
  function Delete(Index: Integer): TYPENAME;
  function ExtractIndex(Index: Integer): TYPENAME;
  function GETTERFUNCTIONNAME(Index: Integer): TYPENAME;
  function IndexOf(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
  function Insert(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  function InsertAll(Index: Integer; const ACollection: COLLECTIONINTERFACENAME): Boolean;
  function LastIndexOf(CONSTKEYWORDPARAMETERNAME: TYPENAME): Integer;
  procedure SETTERPROCEDURENAME(Index: Integer; CONSTKEYWORDPARAMETERNAME: TYPENAME);
  function SubList(First, Count: Integer): LISTINTERFACENAME;
end;*)
(*$JPPDEFINEMACRO JCLVECTORITRINT(SELFCLASSNAME, ITRINTERFACENAME, LISTCLASSNAME,
  CONSTKEYWORD, PARAMETERNAME, TYPENAME, GETTERFUNCTIONNAME, SETTERPROCEDURENAME)
SELFCLASSNAME = class(TJclAbstractIterator, ITRINTERFACENAME, {$IFDEF THREADSAFE} IJclLockable, {$ENDIF THREADSAFE}
  IJclIntfCloneable, IJclCloneable)
private
  FCursor: Integer;
  FStart: TItrStart;
  FOwnList: LISTCLASSNAME;
protected
  function CreateEmptyIterator: TJclAbstractIterator; override;
  procedure AssignPropertiesTo(Dest: TJclAbstractIterator); override;
public
  constructor Create(AOwnList: LISTCLASSNAME; ACursor: Integer; AValid: Boolean; AStart: TItrStart);
  { ITRINTERFACENAME }
  function Add(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  procedure Extract;
  function GETTERFUNCTIONNAME: TYPENAME;
  function HasNext: Boolean;
  function HasPrevious: Boolean;
  function Insert(CONSTKEYWORDPARAMETERNAME: TYPENAME): Boolean;
  function IteratorEquals(const AIterator: ITRINTERFACENAME): Boolean;
  function Next: TYPENAME;
  function NextIndex: Integer;
  function Previous: TYPENAME;
  function PreviousIndex: Integer;
  procedure Remove;
  procedure Reset;
  procedure SETTERPROCEDURENAME(CONSTKEYWORDPARAMETERNAME: TYPENAME);
  {$IFDEF SUPPORTS_FOR_IN}
  function MoveNext: Boolean;
  property Current: TYPENAME read GETTERFUNCTIONNAME;
  {$ENDIF SUPPORTS_FOR_IN}
end;*)

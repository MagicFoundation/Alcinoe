{$IFDEF MSWINDOWS}

const
  ImageHlpLib = 'imagehlp.dll';

type
  TReBaseImage = function (CurrentImageName: PAnsiChar; SymbolPath: PAnsiChar; fReBase: BOOL;
    fRebaseSysfileOk: BOOL; fGoingDown: BOOL; CheckImageSize: ULONG;
    var OldImageSize: TJclAddr32; var OldImageBase: TJclAddr;
    var NewImageSize: TJclAddr32; var NewImageBase: TJclAddr; TimeStamp: ULONG): BOOL; stdcall;

var
  _ReBaseImage: TReBaseImage = nil;

function ReBaseImage(CurrentImageName: PAnsiChar; SymbolPath: PAnsiChar; fReBase: BOOL;
  fRebaseSysfileOk: BOOL; fGoingDown: BOOL; CheckImageSize: ULONG;
  var OldImageSize: TJclAddr32; var OldImageBase: TJclAddr;
  var NewImageSize: TJclAddr32; var NewImageBase: TJclAddr; TimeStamp: ULONG): BOOL;
begin
  GetProcedureAddress(Pointer(@_ReBaseImage), ImageHlpLib, 'ReBaseImage');
  Result := _ReBaseImage(CurrentImageName, SymbolPath, fReBase, fRebaseSysfileOk, fGoingDown, CheckImageSize, OldImageSize, OldImageBase, NewImageSize, NewImageBase, TimeStamp);
end;

type
  TReBaseImage64 = function (CurrentImageName: PAnsiChar; SymbolPath: PAnsiChar; fReBase: BOOL;
    fRebaseSysfileOk: BOOL; fGoingDown: BOOL; CheckImageSize: ULONG;
    var OldImageSize: TJclAddr32; var OldImageBase: TJclAddr64;
    var NewImageSize: TJclAddr32; var NewImageBase: TJclAddr64; TimeStamp: ULONG): BOOL; stdcall;

var
  _ReBaseImage64: TReBaseImage64 = nil;

function ReBaseImage64(CurrentImageName: PAnsiChar; SymbolPath: PAnsiChar; fReBase: BOOL;
  fRebaseSysfileOk: BOOL; fGoingDown: BOOL; CheckImageSize: ULONG;
  var OldImageSize: TJclAddr32; var OldImageBase: TJclAddr64;
  var NewImageSize: TJclAddr32; var NewImageBase: TJclAddr64; TimeStamp: ULONG): BOOL;
begin
  GetProcedureAddress(Pointer(@_ReBaseImage64), ImageHlpLib, 'ReBaseImage64');
  Result := _ReBaseImage64(CurrentImageName, SymbolPath, fReBase, fRebaseSysfileOk, fGoingDown, CheckImageSize, OldImageSize, OldImageBase, NewImageSize, NewImageBase, TimeStamp);
end;

type
  TCheckSumMappedFile = function (BaseAddress: Pointer; FileLength: DWORD;
    out HeaderSum, CheckSum: DWORD): PImageNtHeaders; stdcall;

var
  _CheckSumMappedFile: TCheckSumMappedFile = nil;

function CheckSumMappedFile(BaseAddress: Pointer; FileLength: DWORD;
  out HeaderSum, CheckSum: DWORD): PImageNtHeaders;
begin
  GetProcedureAddress(Pointer(@_CheckSumMappedFile), ImageHlpLib, 'CheckSumMappedFile');
  Result := _CheckSumMappedFile(BaseAddress, FileLength, HeaderSum, CheckSum);
end;

type
  TGetImageUnusedHeaderBytes = function (const LoadedImage: LOADED_IMAGE;
    var SizeUnusedHeaderBytes: DWORD): DWORD; stdcall;

var
  _GetImageUnusedHeaderBytes: TGetImageUnusedHeaderBytes = nil;

function GetImageUnusedHeaderBytes(const LoadedImage: LOADED_IMAGE;
  var SizeUnusedHeaderBytes: DWORD): DWORD;
begin
  GetProcedureAddress(Pointer(@_GetImageUnusedHeaderBytes), ImageHlpLib, 'GetImageUnusedHeaderBytes');
  Result := _GetImageUnusedHeaderBytes(LoadedImage, SizeUnusedHeaderBytes);
end;

type
  TMapAndLoad = function (ImageName, DllPath: PAnsiChar; var LoadedImage: LOADED_IMAGE;
    DotDll: BOOL; ReadOnly: BOOL): BOOL; stdcall;

var
  _MapAndLoad: TMapAndLoad = nil;

function MapAndLoad(ImageName, DllPath: PAnsiChar; var LoadedImage: LOADED_IMAGE;
  DotDll: BOOL; ReadOnly: BOOL): BOOL;
begin
  GetProcedureAddress(Pointer(@_MapAndLoad), ImageHlpLib, 'MapAndLoad');
  Result := _MapAndLoad(ImageName, DllPath, LoadedImage, DotDll, ReadOnly);
end;

type
  TUnMapAndLoad = function (const LoadedImage: LOADED_IMAGE): BOOL; stdcall;

var
  _UnMapAndLoad: TUnMapAndLoad = nil;

function UnMapAndLoad(const LoadedImage: LOADED_IMAGE): BOOL;
begin
  GetProcedureAddress(Pointer(@_UnMapAndLoad), ImageHlpLib, 'UnMapAndLoad');
  Result := _UnMapAndLoad(LoadedImage);
end;

type
  TTouchFileTimes = function (const FileHandle: THandle; const pSystemTime: TSystemTime): BOOL; stdcall;

var
  _TouchFileTimes: TTouchFileTimes = nil;

function TouchFileTimes(const FileHandle: THandle; const pSystemTime: TSystemTime): BOOL;
begin
  GetProcedureAddress(Pointer(@_TouchFileTimes), ImageHlpLib, 'TouchFileTimes');
  Result := _TouchFileTimes(FileHandle, pSystemTime);
end;

type
  TImageDirectoryEntryToData = function (Base: Pointer; MappedAsImage: ByteBool;
    DirectoryEntry: USHORT; var Size: ULONG): Pointer; stdcall;

var
  _ImageDirectoryEntryToData: TImageDirectoryEntryToData = nil;

function ImageDirectoryEntryToData(Base: Pointer; MappedAsImage: ByteBool;
  DirectoryEntry: USHORT; var Size: ULONG): Pointer;
begin
  GetProcedureAddress(Pointer(@_ImageDirectoryEntryToData), ImageHlpLib, 'ImageDirectoryEntryToData');
  Result := _ImageDirectoryEntryToData(Base, MappedAsImage, DirectoryEntry, Size);
end;

type
  TImageRvaToSection = function (NtHeaders: PImageNtHeaders; Base: Pointer; Rva: ULONG): PImageSectionHeader; stdcall;

var
  _ImageRvaToSection: TImageRvaToSection = nil;

function ImageRvaToSection(NtHeaders: PImageNtHeaders; Base: Pointer; Rva: ULONG): PImageSectionHeader;
begin
  GetProcedureAddress(Pointer(@_ImageRvaToSection), ImageHlpLib, 'ImageRvaToSection');
  Result := _ImageRvaToSection(NtHeaders, Base, Rva);
end;

type
  TImageRvaToVa = function (NtHeaders: PImageNtHeaders; Base: Pointer; Rva: ULONG;
    LastRvaSection: PPImageSectionHeader): Pointer; stdcall;

var
  _ImageRvaToVa: TImageRvaToVa = nil;

function ImageRvaToVa(NtHeaders: PImageNtHeaders; Base: Pointer; Rva: ULONG;
  LastRvaSection: PPImageSectionHeader): Pointer;
begin
  GetProcedureAddress(Pointer(@_ImageRvaToVa), ImageHlpLib, 'ImageRvaToVa');
  Result := _ImageRvaToVa(NtHeaders, Base, Rva, LastRvaSection);
end;

{$ENDIF MSWINDOWS}


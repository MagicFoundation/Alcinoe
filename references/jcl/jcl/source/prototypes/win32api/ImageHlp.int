
const
  IMAGE_SEPARATION = (64*1024);
  {$EXTERNALSYM IMAGE_SEPARATION}

type
  PLOADED_IMAGE = ^LOADED_IMAGE;
  {$EXTERNALSYM PLOADED_IMAGE}
  _LOADED_IMAGE = record
    ModuleName: PAnsiChar;
    hFile: THandle;
    MappedAddress: PUCHAR;
    FileHeader: PImageNtHeaders;
    LastRvaSection: PImageSectionHeader;
    NumberOfSections: ULONG;
    Sections: PImageSectionHeader;
    Characteristics: ULONG;
    fSystemImage: ByteBool;
    fDOSImage: ByteBool;
    Links: LIST_ENTRY;
    SizeOfImage: ULONG;
  end;
  {$EXTERNALSYM _LOADED_IMAGE}
  LOADED_IMAGE = _LOADED_IMAGE;
  {$EXTERNALSYM LOADED_IMAGE}
  TLoadedImage = LOADED_IMAGE;
  PLoadedImage = PLOADED_IMAGE;

  PIMAGE_SYMBOL = ^IMAGE_SYMBOL;
  {$EXTERNALSYM PIMAGE_SYMBOL}
  _IMAGE_SYMBOL = packed record  // MUST pack to obtain the right size
    Name: array [0..7] of AnsiChar;
    Value: ULONG;
    SectionNumber: USHORT;
    _Type: USHORT;
    StorageClass: BYTE;
    NumberOfAuxSymbols: BYTE;
  end;
  {$EXTERNALSYM _IMAGE_SYMBOL}
  IMAGE_SYMBOL = _IMAGE_SYMBOL;
  {$EXTERNALSYM IMAGE_SYMBOL}
  TImageSymbol = IMAGE_SYMBOL;
  PImageSymbol = PIMAGE_SYMBOL;

// line 152

{$IFDEF MSWINDOWS}

function ReBaseImage(CurrentImageName: PAnsiChar; SymbolPath: PAnsiChar; fReBase: BOOL;
  fRebaseSysfileOk: BOOL; fGoingDown: BOOL; CheckImageSize: ULONG;
  var OldImageSize: TJclAddr32; var OldImageBase: TJclAddr;
  var NewImageSize: TJclAddr32; var NewImageBase: TJclAddr; TimeStamp: ULONG): BOOL; stdcall;
{$EXTERNALSYM ReBaseImage}

function ReBaseImage64(CurrentImageName: PAnsiChar; SymbolPath: PAnsiChar; fReBase: BOOL;
  fRebaseSysfileOk: BOOL; fGoingDown: BOOL; CheckImageSize: ULONG;
  var OldImageSize: TJclAddr32; var OldImageBase: TJclAddr64;
  var NewImageSize: TJclAddr32; var NewImageBase: TJclAddr64; TimeStamp: ULONG): BOOL; stdcall;
{$EXTERNALSYM ReBaseImage64}

// line 199

//
// Define checksum function prototypes.
//

function CheckSumMappedFile(BaseAddress: Pointer; FileLength: DWORD;
  out HeaderSum, CheckSum: DWORD): PImageNtHeaders; stdcall;
{$EXTERNALSYM CheckSumMappedFile}

// line 227

function GetImageUnusedHeaderBytes(const LoadedImage: LOADED_IMAGE;
  var SizeUnusedHeaderBytes: DWORD): DWORD; stdcall;
{$EXTERNALSYM GetImageUnusedHeaderBytes}

// line 285

function MapAndLoad(ImageName, DllPath: PAnsiChar; var LoadedImage: LOADED_IMAGE;
  DotDll: BOOL; ReadOnly: BOOL): BOOL; stdcall;
{$EXTERNALSYM MapAndLoad}

function UnMapAndLoad(const LoadedImage: LOADED_IMAGE): BOOL; stdcall;
{$EXTERNALSYM UnMapAndLoad}

function TouchFileTimes(const FileHandle: THandle; const pSystemTime: TSystemTime): BOOL; stdcall;
{$EXTERNALSYM TouchFileTimes}

// line 347

function ImageDirectoryEntryToData(Base: Pointer; MappedAsImage: ByteBool;
  DirectoryEntry: USHORT; var Size: ULONG): Pointer; stdcall;
{$EXTERNALSYM ImageDirectoryEntryToData}

function ImageRvaToSection(NtHeaders: PImageNtHeaders; Base: Pointer; Rva: ULONG): PImageSectionHeader; stdcall;
{$EXTERNALSYM ImageRvaToSection}

function ImageRvaToVa(NtHeaders: PImageNtHeaders; Base: Pointer; Rva: ULONG;
  LastRvaSection: PPImageSectionHeader): Pointer; stdcall;
{$EXTERNALSYM ImageRvaToVa}

{$ENDIF MSWINDOWS}

// line 461

//
// UnDecorateSymbolName Flags
//

const
  UNDNAME_COMPLETE               = ($0000); // Enable full undecoration
  {$EXTERNALSYM UNDNAME_COMPLETE}
  UNDNAME_NO_LEADING_UNDERSCORES = ($0001); // Remove leading underscores from MS extended keywords
  {$EXTERNALSYM UNDNAME_NO_LEADING_UNDERSCORES}
  UNDNAME_NO_MS_KEYWORDS         = ($0002); // Disable expansion of MS extended keywords
  {$EXTERNALSYM UNDNAME_NO_MS_KEYWORDS}
  UNDNAME_NO_FUNCTION_RETURNS    = ($0004); // Disable expansion of return type for primary declaration
  {$EXTERNALSYM UNDNAME_NO_FUNCTION_RETURNS}
  UNDNAME_NO_ALLOCATION_MODEL    = ($0008); // Disable expansion of the declaration model
  {$EXTERNALSYM UNDNAME_NO_ALLOCATION_MODEL}
  UNDNAME_NO_ALLOCATION_LANGUAGE = ($0010); // Disable expansion of the declaration language specifier
  {$EXTERNALSYM UNDNAME_NO_ALLOCATION_LANGUAGE}
  UNDNAME_NO_MS_THISTYPE         = ($0020); // NYI Disable expansion of MS keywords on the 'this' type for primary declaration
  {$EXTERNALSYM UNDNAME_NO_MS_THISTYPE}
  UNDNAME_NO_CV_THISTYPE         = ($0040); // NYI Disable expansion of CV modifiers on the 'this' type for primary declaration
  {$EXTERNALSYM UNDNAME_NO_CV_THISTYPE}
  UNDNAME_NO_THISTYPE            = ($0060); // Disable all modifiers on the 'this' type
  {$EXTERNALSYM UNDNAME_NO_THISTYPE}
  UNDNAME_NO_ACCESS_SPECIFIERS   = ($0080); // Disable expansion of access specifiers for members
  {$EXTERNALSYM UNDNAME_NO_ACCESS_SPECIFIERS}
  UNDNAME_NO_THROW_SIGNATURES    = ($0100); // Disable expansion of 'throw-signatures' for functions and pointers to functions
  {$EXTERNALSYM UNDNAME_NO_THROW_SIGNATURES}
  UNDNAME_NO_MEMBER_TYPE         = ($0200); // Disable expansion of 'static' or 'virtual'ness of members
  {$EXTERNALSYM UNDNAME_NO_MEMBER_TYPE}
  UNDNAME_NO_RETURN_UDT_MODEL    = ($0400); // Disable expansion of MS model for UDT returns
  {$EXTERNALSYM UNDNAME_NO_RETURN_UDT_MODEL}
  UNDNAME_32_BIT_DECODE          = ($0800); // Undecorate 32-bit decorated names
  {$EXTERNALSYM UNDNAME_32_BIT_DECODE}
  UNDNAME_NAME_ONLY              = ($1000); // Crack only the name for primary declaration;
  {$EXTERNALSYM UNDNAME_NAME_ONLY}
                                                                                                   //  return just [scope::]name.  Does expand template params
  UNDNAME_NO_ARGUMENTS    = ($2000); // Don't undecorate arguments to function
  {$EXTERNALSYM UNDNAME_NO_ARGUMENTS}
  UNDNAME_NO_SPECIAL_SYMS = ($4000); // Don't undecorate special names (v-table, vcall, vector xxx, metatype, etc)
  {$EXTERNALSYM UNDNAME_NO_SPECIAL_SYMS}

// line 1342

type
  {$EXTERNALSYM SYM_TYPE}
  SYM_TYPE = (
    SymNone,
    SymCoff,
    SymCv,
    SymPdb,
    SymExport,
    SymDeferred,
    SymSym                  { .sym file }
  );
  TSymType = SYM_TYPE;

  { symbol data structure }
  {$EXTERNALSYM PImagehlpSymbolA}
  PImagehlpSymbolA = ^TImagehlpSymbolA;
  {$EXTERNALSYM _IMAGEHLP_SYMBOLA}
  _IMAGEHLP_SYMBOLA = packed record
    SizeOfStruct: DWORD;                                { set to sizeof(IMAGEHLP_SYMBOL) }
    Address: DWORD;                                     { virtual address including dll base address }
    Size: DWORD;                                        { estimated size of symbol, can be zero }
    Flags: DWORD;                                       { info about the symbols, see the SYMF defines }
    MaxNameLength: DWORD;                               { maximum size of symbol name in 'Name' }
    Name: packed array[0..0] of AnsiChar;               { symbol name (null terminated string) }
  end;
  {$EXTERNALSYM IMAGEHLP_SYMBOLA}
  IMAGEHLP_SYMBOLA = _IMAGEHLP_SYMBOLA;
  {$EXTERNALSYM TImagehlpSymbolA}
  TImagehlpSymbolA = _IMAGEHLP_SYMBOLA;

  { symbol data structure }
  {$EXTERNALSYM PImagehlpSymbolA64}
  PImagehlpSymbolA64 = ^TImagehlpSymbolA64;
  {$EXTERNALSYM _IMAGEHLP_SYMBOLA64}
  _IMAGEHLP_SYMBOLA64 = packed record
    SizeOfStruct: DWORD;                                { set to sizeof(IMAGEHLP_SYMBOL) }
    Address: TJclAddr64;                                { virtual address including dll base address }
    Size: DWORD;                                        { estimated size of symbol, can be zero }
    Flags: DWORD;                                       { info about the symbols, see the SYMF defines }
    MaxNameLength: DWORD;                               { maximum size of symbol name in 'Name' }
    Name: packed array[0..0] of AnsiChar;               { symbol name (null terminated string) }
  end;
  {$EXTERNALSYM IMAGEHLP_SYMBOLA64}
  IMAGEHLP_SYMBOLA64 = _IMAGEHLP_SYMBOLA64;
  {$EXTERNALSYM TImagehlpSymbolA64}
  TImagehlpSymbolA64 = _IMAGEHLP_SYMBOLA64;

  { symbol data structure }
  {$EXTERNALSYM PImagehlpSymbolW}
  PImagehlpSymbolW = ^TImagehlpSymbolW;
  {$EXTERNALSYM _IMAGEHLP_SYMBOLW}
  _IMAGEHLP_SYMBOLW = packed record
    SizeOfStruct: DWORD;                                { set to sizeof(IMAGEHLP_SYMBOL) }
    Address: DWORD;                                     { virtual address including dll base address }
    Size: DWORD;                                        { estimated size of symbol, can be zero }
    Flags: DWORD;                                       { info about the symbols, see the SYMF defines }
    MaxNameLength: DWORD;                               { maximum size of symbol name in 'Name' }
    Name: packed array[0..0] of WideChar;               { symbol name (null terminated string) }
  end;
  {$EXTERNALSYM IMAGEHLP_SYMBOLW}
  IMAGEHLP_SYMBOLW = _IMAGEHLP_SYMBOLW;
  {$EXTERNALSYM TImagehlpSymbolW}
  TImagehlpSymbolW = _IMAGEHLP_SYMBOLW;

  { symbol data structure }
  {$EXTERNALSYM PImagehlpSymbolW64}
  PImagehlpSymbolW64 = ^TImagehlpSymbolW64;
  {$EXTERNALSYM _IMAGEHLP_SYMBOLW64}
  _IMAGEHLP_SYMBOLW64 = packed record
    SizeOfStruct: DWORD;                                { set to sizeof(IMAGEHLP_SYMBOL) }
    Address: TJclAddr64;                                { virtual address including dll base address }
    Size: DWORD;                                        { estimated size of symbol, can be zero }
    Flags: DWORD;                                       { info about the symbols, see the SYMF defines }
    MaxNameLength: DWORD;                               { maximum size of symbol name in 'Name' }
    Name: packed array[0..0] of WideChar;               { symbol name (null terminated string) }
  end;
  {$EXTERNALSYM IMAGEHLP_SYMBOLW64}
  IMAGEHLP_SYMBOLW64 = _IMAGEHLP_SYMBOLW64;
  {$EXTERNALSYM TImagehlpSymbolW64}
  TImagehlpSymbolW64 = _IMAGEHLP_SYMBOLW64;

  { module data structure }
  {$EXTERNALSYM PImagehlpModuleA}
  PImagehlpModuleA = ^TImagehlpModuleA;
  {$EXTERNALSYM _IMAGEHLP_MODULEA}
  _IMAGEHLP_MODULEA = record
    SizeOfStruct: DWORD;                                { set to sizeof(IMAGEHLP_MODULE) }
    BaseOfImage: DWORD;                                 { base load address of module }
    ImageSize: DWORD;                                   { virtual size of the loaded module }
    TimeDateStamp: DWORD;                               { date/time stamp from pe header }
    CheckSum: DWORD;                                    { checksum from the pe header }
    NumSyms: DWORD;                                     { number of symbols in the symbol table }
    SymType: TSymType;                                  { type of symbols loaded }
    ModuleName: packed array[0..31] of AnsiChar;        { module name }
    ImageName: packed array[0..255] of AnsiChar;        { image name }
    LoadedImageName: packed array[0..255] of AnsiChar;  { symbol file name }
  end;
  {$EXTERNALSYM IMAGEHLP_MODULEA}
  IMAGEHLP_MODULEA = _IMAGEHLP_MODULEA;
  {$EXTERNALSYM TImagehlpModuleA}
  TImagehlpModuleA = _IMAGEHLP_MODULEA;

  { module data structure }
  {$EXTERNALSYM PImagehlpModuleA64}
  PImagehlpModuleA64 = ^TImagehlpModuleA64;
  {$EXTERNALSYM _IMAGEHLP_MODULEA64}
  _IMAGEHLP_MODULEA64 = record
    SizeOfStruct: DWORD;                                { set to sizeof(IMAGEHLP_MODULE) }
    BaseOfImage: TJclAddr64;                            { base load address of module }
    ImageSize: DWORD;                                   { virtual size of the loaded module }
    TimeDateStamp: DWORD;                               { date/time stamp from pe header }
    CheckSum: DWORD;                                    { checksum from the pe header }
    NumSyms: DWORD;                                     { number of symbols in the symbol table }
    SymType: TSymType;                                  { type of symbols loaded }
    ModuleName: packed array[0..31] of AnsiChar;        { module name }
    ImageName: packed array[0..255] of AnsiChar;        { image name }
    LoadedImageName: packed array[0..255] of AnsiChar;  { symbol file name }
  end;
  {$EXTERNALSYM IMAGEHLP_MODULEA64}
  IMAGEHLP_MODULEA64 = _IMAGEHLP_MODULEA64;
  {$EXTERNALSYM TImagehlpModuleA64}
  TImagehlpModuleA64 = _IMAGEHLP_MODULEA64;

  { module data structure }
  {$EXTERNALSYM PImagehlpModuleW}
  PImagehlpModuleW = ^TImagehlpModuleW;
  {$EXTERNALSYM _IMAGEHLP_MODULEW}
  _IMAGEHLP_MODULEW = record
    SizeOfStruct: DWORD;                                { set to sizeof(IMAGEHLP_MODULE) }
    BaseOfImage: DWORD;                                 { base load address of module }
    ImageSize: DWORD;                                   { virtual size of the loaded module }
    TimeDateStamp: DWORD;                               { date/time stamp from pe header }
    CheckSum: DWORD;                                    { checksum from the pe header }
    NumSyms: DWORD;                                     { number of symbols in the symbol table }
    SymType: TSymType;                                  { type of symbols loaded }
    ModuleName: packed array[0..31] of WideChar;        { module name }
    ImageName: packed array[0..255] of WideChar;        { image name }
    LoadedImageName: packed array[0..255] of WideChar;  { symbol file name }
  end;
  {$EXTERNALSYM IMAGEHLP_MODULEW}
  IMAGEHLP_MODULEW = _IMAGEHLP_MODULEW;
  {$EXTERNALSYM TImagehlpModuleW}
  TImagehlpModuleW = _IMAGEHLP_MODULEW;

  { module data structure }
  {$EXTERNALSYM PImagehlpModuleW64}
  PImagehlpModuleW64 = ^TImagehlpModuleW64;
  {$EXTERNALSYM _IMAGEHLP_MODULEW64}
  _IMAGEHLP_MODULEW64 = record
    SizeOfStruct: DWORD;                                { set to sizeof(IMAGEHLP_MODULE) }
    BaseOfImage: TJclAddr64;                            { base load address of module }
    ImageSize: DWORD;                                   { virtual size of the loaded module }
    TimeDateStamp: DWORD;                               { date/time stamp from pe header }
    CheckSum: DWORD;                                    { checksum from the pe header }
    NumSyms: DWORD;                                     { number of symbols in the symbol table }
    SymType: TSymType;                                  { type of symbols loaded }
    ModuleName: packed array[0..31] of WideChar;        { module name }
    ImageName: packed array[0..255] of WideChar;        { image name }
    LoadedImageName: packed array[0..255] of WideChar;  { symbol file name }
  end;
  {$EXTERNALSYM IMAGEHLP_MODULEW64}
  IMAGEHLP_MODULEW64 = _IMAGEHLP_MODULEW64;
  {$EXTERNALSYM TImagehlpModuleW64}
  TImagehlpModuleW64 = _IMAGEHLP_MODULEW64;

  _IMAGEHLP_LINEA = packed record
    SizeOfStruct: DWORD;           // set to sizeof(IMAGEHLP_LINE)
    Key: Pointer;                  // internal
    LineNumber: DWORD;             // line number in file
    FileName: PAnsiChar;           // full filename
    Address: DWORD;                // first instruction of line
  end;
  IMAGEHLP_LINEA = _IMAGEHLP_LINEA;
  PIMAGEHLP_LINEA = ^_IMAGEHLP_LINEA;
  TImageHlpLineA = _IMAGEHLP_LINEA;
  PImageHlpLineA = PIMAGEHLP_LINEA;

  _IMAGEHLP_LINEA64 = packed record
    SizeOfStruct: DWORD;           // set to sizeof(IMAGEHLP_LINE)
    Key: Pointer;                  // internal
    LineNumber: DWORD;             // line number in file
    FileName: PAnsiChar;           // full filename
    Address: TJclAddr64;           // first instruction of line
  end;
  IMAGEHLP_LINEA64 = _IMAGEHLP_LINEA64;
  PIMAGEHLP_LINEA64 = ^_IMAGEHLP_LINEA64;
  TImageHlpLineA64 = _IMAGEHLP_LINEA64;
  PImageHlpLineA64 = PIMAGEHLP_LINEA64;

  _IMAGEHLP_LINEW = packed record
    SizeOfStruct: DWORD;           // set to sizeof(IMAGEHLP_LINE)
    Key: Pointer;                  // internal
    LineNumber: DWORD;             // line number in file
    FileName: PWideChar;           // full filename
    Address: DWORD;                // first instruction of line
  end;
  IMAGEHLP_LINEW = _IMAGEHLP_LINEW;
  PIMAGEHLP_LINEW = ^_IMAGEHLP_LINEW;
  TImageHlpLineW = _IMAGEHLP_LINEW;
  PImageHlpLineW = PIMAGEHLP_LINEW;

  _IMAGEHLP_LINEW64 = packed record
    SizeOfStruct: DWORD;           // set to sizeof(IMAGEHLP_LINE)
    Key: Pointer;                  // internal
    LineNumber: DWORD;             // line number in file
    FileName: PWideChar;           // full filename
    Address: TJclAddr64;           // first instruction of line
  end;
  IMAGEHLP_LINEW64 = _IMAGEHLP_LINEW64;
  PIMAGEHLP_LINEW64 = ^_IMAGEHLP_LINEW64;
  TImageHlpLineW64 = _IMAGEHLP_LINEW64;
  PImageHlpLineW64 = PIMAGEHLP_LINEW64;

// line 1475

//
// options that are set/returned by SymSetOptions() & SymGetOptions()
// these are used as a mask
//

const
  SYMOPT_CASE_INSENSITIVE       = $00000001;
  {$EXTERNALSYM SYMOPT_CASE_INSENSITIVE}
  SYMOPT_UNDNAME                = $00000002;
  {$EXTERNALSYM SYMOPT_UNDNAME}
  SYMOPT_DEFERRED_LOADS         = $00000004;
  {$EXTERNALSYM SYMOPT_DEFERRED_LOADS}
  SYMOPT_NO_CPP                 = $00000008;
  {$EXTERNALSYM SYMOPT_NO_CPP}
  SYMOPT_LOAD_LINES             = $00000010;
  {$EXTERNALSYM SYMOPT_LOAD_LINES}
  SYMOPT_OMAP_FIND_NEAREST      = $00000020;
  {$EXTERNALSYM SYMOPT_OMAP_FIND_NEAREST}
  SYMOPT_LOAD_ANYTHING          = $00000040;
  {$EXTERNALSYM SYMOPT_LOAD_ANYTHING}
  SYMOPT_IGNORE_CVREC           = $00000080;
  {$EXTERNALSYM SYMOPT_IGNORE_CVREC}
  SYMOPT_NO_UNQUALIFIED_LOADS   = $00000100;
  {$EXTERNALSYM SYMOPT_NO_UNQUALIFIED_LOADS}
  SYMOPT_FAIL_CRITICAL_ERRORS   = $00000200;
  {$EXTERNALSYM SYMOPT_FAIL_CRITICAL_ERRORS}
  SYMOPT_EXACT_SYMBOLS          = $00000400;
  {$EXTERNALSYM SYMOPT_EXACT_SYMBOLS}
  SYMOPT_ALLOW_ABSOLUTE_SYMBOLS = $00000800;
  {$EXTERNALSYM SYMOPT_ALLOW_ABSOLUTE_SYMBOLS}
  SYMOPT_IGNORE_NT_SYMPATH      = $00001000;
  {$EXTERNALSYM SYMOPT_IGNORE_NT_SYMPATH}
  SYMOPT_INCLUDE_32BIT_MODULES  = $00002000;
  {$EXTERNALSYM SYMOPT_INCLUDE_32BIT_MODULES}
  SYMOPT_PUBLICS_ONLY           = $00004000;
  {$EXTERNALSYM SYMOPT_PUBLICS_ONLY}
  SYMOPT_NO_PUBLICS             = $00008000;
  {$EXTERNALSYM SYMOPT_NO_PUBLICS}
  SYMOPT_AUTO_PUBLICS           = $00010000;
  {$EXTERNALSYM SYMOPT_AUTO_PUBLICS}
  SYMOPT_NO_IMAGE_SEARCH        = $00020000;
  {$EXTERNALSYM SYMOPT_NO_IMAGE_SEARCH}
  SYMOPT_SECURE                 = $00040000;
  {$EXTERNALSYM SYMOPT_SECURE}
  SYMOPT_NO_PROMPTS             = $00080000;
  {$EXTERNALSYM SYMOPT_NO_PROMPTS}

  SYMOPT_DEBUG                  = $80000000;
  {$EXTERNALSYM SYMOPT_DEBUG}

{$IFDEF MSWINDOWS}

type
  TNetUserAdd = function (servername: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS; stdcall;
var
  _NetUserAdd: TNetUserAdd = nil;

function NetUserAdd(servername: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserAdd), netapi32, 'NetUserAdd');
  Result := _NetUserAdd(servername, level, buf, parm_err);
end;

type
  TNetUserEnum = function (servername: LPCWSTR; level, filter: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries, resume_handle: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetUserEnum: TNetUserEnum = nil;

function NetUserEnum(servername: LPCWSTR; level, filter: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries, resume_handle: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserEnum), netapi32, 'NetUserEnum');
  Result := _NetUserEnum(servername, level, filter, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
end;

type
  TNetUserGetInfo = function (servername, username: LPCWSTR; level: DWORD; var bufptr: PByte): NET_API_STATUS; stdcall;

var
  _NetUserGetInfo: TNetUserGetInfo = nil;

function NetUserGetInfo(servername, username: LPCWSTR; level: DWORD; var bufptr: PByte): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserGetInfo), netapi32, 'NetUserGetInfo');
  Result := _NetUserGetInfo(servername, username, level, bufptr);
end;

type
  TNetUserSetInfo = function (servername, username: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetUserSetInfo: TNetUserSetInfo = nil;

function NetUserSetInfo(servername, username: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserSetInfo), netapi32, 'NetUserSetInfo');
  Result := _NetUserSetInfo(servername, username, level, buf, parm_err);
end;

type
  TNetUserDel = function (servername: LPCWSTR; username: LPCWSTR): NET_API_STATUS; stdcall;

var
  _NetUserDel: TNetUserDel = nil;

function NetUserDel(servername: LPCWSTR; username: LPCWSTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserDel), netapi32, 'NetUserDel');
  Result := _NetUserDel(servername, username);
end;

type
  TNetUserGetGroups = function (servername, username: LPCWSTR; level: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetUserGetGroups: TNetUserGetGroups = nil;

function NetUserGetGroups(servername, username: LPCWSTR; level: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserGetGroups), netapi32, 'NetUserGetGroups');
  Result := _NetUserGetGroups(servername, username, level, bufptr, prefmaxlen, entriesread, totalentries);
end;

type
  TNetUserSetGroups = function (servername, username: LPCWSTR; level: DWORD; buf: PByte; num_entries: DWORD): NET_API_STATUS; stdcall;

var
  _NetUserSetGroups: TNetUserSetGroups = nil;

function NetUserSetGroups(servername, username: LPCWSTR; level: DWORD; buf: PByte; num_entries: DWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserSetGroups), netapi32, 'NetUserSetGroups');
  Result := _NetUserSetGroups(servername, username, level, buf, num_entries);
end;

type
  TNetUserGetLocalGroups = function (servername, username: LPCWSTR; level, flags: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetUserGetLocalGroups: TNetUserGetLocalGroups = nil;

function NetUserGetLocalGroups(servername, username: LPCWSTR; level, flags: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserGetLocalGroups), netapi32, 'NetUserGetLocalGroups');
  Result := _NetUserGetLocalGroups(servername, username, level, flags, bufptr, prefmaxlen, entriesread, totalentries);
end;

type
 TNetUserModalsGet = function (servername: LPCWSTR; level: DWORD; var bufptr: PByte): NET_API_STATUS; stdcall;

var
  _NetUserModalsGet: TNetUserModalsGet = nil;

function NetUserModalsGet(servername: LPCWSTR; level: DWORD; var bufptr: PByte): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserModalsGet), netapi32, 'NetUserModalsGet');
  Result := _NetUserModalsGet(servername, level, bufptr);
end;

type
  TNetUserModalsSet = function (servername: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetUserModalsSet: TNetUserModalsSet = nil;

function NetUserModalsSet(servername: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserModalsSet), netapi32, 'NetUserModalsSet');
  Result := _NetUserModalsSet(servername, level, buf, parm_err);
end;

type
 TNetUserChangePassword = function (domainname, username, oldpassword, newpassword: LPCWSTR): NET_API_STATUS; stdcall;

var
  _NetUserChangePassword: TNetUserChangePassword = nil;

function NetUserChangePassword(domainname, username, oldpassword, newpassword: LPCWSTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetUserChangePassword), netapi32, 'NetUserChangePassword');
  Result := _NetUserChangePassword(domainname, username, oldpassword, newpassword);
end;

type
  TNetGroupAdd = function (servername: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetGroupAdd: TNetGroupAdd = nil;

function NetGroupAdd(servername: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupAdd), netapi32, 'NetGroupAdd');
  Result := _NetGroupAdd(servername, level, buf, parm_err);
end;

type
  TNetGroupAddUser = function (servername, GroupName, username: LPCWSTR): NET_API_STATUS; stdcall;

var
  _NetGroupAddUser: TNetGroupAddUser = nil;

function NetGroupAddUser(servername, GroupName, username: LPCWSTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupAddUser), netapi32, 'NetGroupAddUser');
  Result := _NetGroupAddUser(servername, GroupName, username);
end;

type
  TNetGroupEnum = function (servername: LPCWSTR; level: DWORD; out bufptr: PByte;
    prefmaxlen: DWORD; out entriesread, totalentries: DWORD; resume_handle: PDWORD_PTR): NET_API_STATUS; stdcall;

var
  _NetGroupEnum: TNetGroupEnum = nil;

function NetGroupEnum(servername: LPCWSTR; level: DWORD; out bufptr: PByte;
  prefmaxlen: DWORD; out entriesread, totalentries: DWORD; resume_handle: PDWORD_PTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupEnum), netapi32, 'NetGroupEnum');
  Result := _NetGroupEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
end;

type
  TNetGroupGetInfo = function (servername, groupname: LPCWSTR; level: DWORD; bufptr: PByte): NET_API_STATUS; stdcall;

var
  _NetGroupGetInfo: TNetGroupGetInfo = nil;

function NetGroupGetInfo(servername, groupname: LPCWSTR; level: DWORD; bufptr: PByte): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupGetInfo), netapi32, 'NetGroupGetInfo');
  Result := _NetGroupGetInfo(servername, groupname, level, bufptr);
end;

type
  TNetGroupSetInfo = function (servername, groupname: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetGroupSetInfo: TNetGroupSetInfo = nil;

function NetGroupSetInfo(servername, groupname: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupSetInfo), netapi32, 'NetGroupSetInfo');
  Result := _NetGroupSetInfo(servername, groupname, level, buf, parm_err);
end;

type
  TNetGroupDel = function (servername: LPCWSTR; groupname: LPCWSTR): NET_API_STATUS; stdcall;

var
  _NetGroupDel: TNetGroupDel = nil;

function NetGroupDel(servername: LPCWSTR; groupname: LPCWSTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupDel), netapi32, 'NetGroupDel');
  Result := _NetGroupDel(servername, groupname);
end;

type
  TNetGroupDelUser = function (servername: LPCWSTR; GroupName: LPCWSTR; Username: LPCWSTR): NET_API_STATUS; stdcall;

var
  _NetGroupDelUser: TNetGroupDelUser = nil;

function NetGroupDelUser(servername: LPCWSTR; GroupName: LPCWSTR; Username: LPCWSTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupDelUser), netapi32, 'NetGroupDelUser');
  Result := _NetGroupDelUser(servername, GroupName, Username);
end;

type
  TNetGroupGetUsers = function (servername, groupname: LPCWSTR; level: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries: LPDWORD; ResumeHandle: PDWORD_PTR): NET_API_STATUS; stdcall;

var
  _NetGroupGetUsers: TNetGroupGetUsers = nil;

function NetGroupGetUsers(servername, groupname: LPCWSTR; level: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries: LPDWORD; ResumeHandle: PDWORD_PTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupGetUsers), netapi32, 'NetGroupGetUsers');
  Result := _NetGroupGetUsers(servername, groupname, level, bufptr, prefmaxlen, entriesread, totalentries, ResumeHandle);
end;

type
  TNetGroupSetUsers = function (servername, groupname: LPCWSTR; level: DWORD; buf: PByte; totalentries: DWORD): NET_API_STATUS; stdcall;

var
  _NetGroupSetUsers: TNetGroupSetUsers = nil;

function NetGroupSetUsers(servername, groupname: LPCWSTR; level: DWORD; buf: PByte; totalentries: DWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetGroupSetUsers), netapi32, 'NetGroupSetUsers');
  Result := _NetGroupSetUsers(servername, groupname, level, buf, totalentries);
end;

type
  TNetLocalGroupAdd = function (servername: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetLocalGroupAdd: TNetLocalGroupAdd = nil;

function NetLocalGroupAdd(servername: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupAdd), netapi32, 'NetLocalGroupAdd');
  Result := _NetLocalGroupAdd(servername, level, buf, parm_err);
end;

type
  TNetLocalGroupAddMember = function (servername, groupname: LPCWSTR; membersid: PSID): NET_API_STATUS; stdcall;

var
  _NetLocalGroupAddMember: TNetLocalGroupAddMember = nil;

function NetLocalGroupAddMember(servername, groupname: LPCWSTR; membersid: PSID): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupAddMember), netapi32, 'NetLocalGroupAddMember');
  Result := _NetLocalGroupAddMember(servername, groupname, membersid);
end;

type
  TNetLocalGroupEnum = function (servername: LPCWSTR; level: DWORD; out bufptr: PByte;
    prefmaxlen: DWORD; out entriesread, totalentries: DWORD; resumehandle: PDWORD_PTR): NET_API_STATUS; stdcall;

var
  _NetLocalGroupEnum: TNetLocalGroupEnum = nil;

function NetLocalGroupEnum(servername: LPCWSTR; level: DWORD; out bufptr: PByte;
  prefmaxlen: DWORD; out entriesread, totalentries: DWORD; resumehandle: PDWORD_PTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupEnum), netapi32, 'NetLocalGroupEnum');
  Result := _NetLocalGroupEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
end;

type
  TNetLocalGroupGetInfo = function (servername, groupname: LPCWSTR; level: DWORD; var bufptr: PByte): NET_API_STATUS; stdcall;

var
  _NetLocalGroupGetInfo: TNetLocalGroupGetInfo = nil;

function NetLocalGroupGetInfo(servername, groupname: LPCWSTR; level: DWORD; var bufptr: PByte): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupGetInfo), netapi32, 'NetLocalGroupGetInfo');
  Result := _NetLocalGroupGetInfo(servername, groupname, level, bufptr);
end;

type
  TNetLocalGroupSetInfo = function (servername, groupname: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS; stdcall;

var
  _NetLocalGroupSetInfo: TNetLocalGroupSetInfo = nil;

function NetLocalGroupSetInfo(servername, groupname: LPCWSTR; level: DWORD; buf: PByte; parm_err: LPDWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupSetInfo), netapi32, 'NetLocalGroupSetInfo');
  Result := _NetLocalGroupSetInfo(servername, groupname, level, buf, parm_err);
end;

type
  TNetLocalGroupDel = function (servername: LPCWSTR; groupname: LPCWSTR): NET_API_STATUS; stdcall;

var
  _NetLocalGroupDel: TNetLocalGroupDel = nil;

function NetLocalGroupDel(servername: LPCWSTR; groupname: LPCWSTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupDel), netapi32, 'NetLocalGroupDel');
  Result := _NetLocalGroupDel(servername, groupname);
end;

type
  TNetLocalGroupDelMember = function (servername: LPCWSTR; groupname: LPCWSTR; membersid: PSID): NET_API_STATUS; stdcall;

var
  _NetLocalGroupDelMember: TNetLocalGroupDelMember = nil;

function NetLocalGroupDelMember(servername: LPCWSTR; groupname: LPCWSTR; membersid: PSID): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupDelMember), netapi32, 'NetLocalGroupDelMember');
  Result := _NetLocalGroupDelMember(servername, groupname, membersid);
end;

type
  TNetLocalGroupGetMembers = function (servername, localgroupname: LPCWSTR; level: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries: LPDWORD; resumehandle: PDWORD_PTR): NET_API_STATUS; stdcall;

var
  _NetLocalGroupGetMembers: TNetLocalGroupGetMembers = nil;

function NetLocalGroupGetMembers(servername, localgroupname: LPCWSTR; level: DWORD; var bufptr: PByte; prefmaxlen: DWORD; entriesread, totalentries: LPDWORD; resumehandle: PDWORD_PTR): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupGetMembers), netapi32, 'NetLocalGroupGetMembers');
  Result := _NetLocalGroupGetMembers(servername, localgroupname, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
end;

type
  TNetLocalGroupSetMembers = function (servername, groupname: LPCWSTR; level: DWORD; buf: PByte; totalentries: DWORD): NET_API_STATUS; stdcall;

var
  _NetLocalGroupSetMembers: TNetLocalGroupSetMembers = nil;

function NetLocalGroupSetMembers(servername, groupname: LPCWSTR; level: DWORD; buf: PByte; totalentries: DWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupSetMembers), netapi32, 'NetLocalGroupSetMembers');
  Result := _NetLocalGroupSetMembers(servername, groupname, level, buf, totalentries);
end;

type
  TNetLocalGroupAddMembers = function (servername, groupname: LPCWSTR; level: DWORD; buf: PByte; totalentries: DWORD): NET_API_STATUS; stdcall;

var
  _NetLocalGroupAddMembers: TNetLocalGroupAddMembers = nil;

function NetLocalGroupAddMembers(servername, groupname: LPCWSTR; level: DWORD; buf: PByte; totalentries: DWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupAddMembers), netapi32, 'NetLocalGroupAddMembers');
  Result := _NetLocalGroupAddMembers(servername, groupname, level, buf, totalentries);
end;

type
  TNetLocalGroupDelMembers = function (servername, groupname: LPCWSTR; level: DWORD; buf: PByte; totalentries: DWORD): NET_API_STATUS; stdcall;

var
  _NetLocalGroupDelMembers: TNetLocalGroupDelMembers = nil;

function NetLocalGroupDelMembers(servername, groupname: LPCWSTR; level: DWORD; buf: PByte; totalentries: DWORD): NET_API_STATUS;
begin
  GetProcedureAddress(Pointer(@_NetLocalGroupDelMembers), netapi32, 'NetLocalGroupDelMembers');
  Result := _NetLocalGroupDelMembers(servername, groupname, level, buf, totalentries);
end;

{$ENDIF MSWINDOWS}

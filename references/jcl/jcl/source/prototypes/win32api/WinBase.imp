{$IFDEF MSWINDOWS}

type
  TGlobalMemoryStatusEx = function (out lpBuffer: TMemoryStatusEx): BOOL; stdcall;

var
  _GlobalMemoryStatusEx: TGlobalMemoryStatusEx = nil;

function GlobalMemoryStatusEx(out lpBuffer: TMemoryStatusEx): BOOL; stdcall;
begin
  GetProcedureAddress(Pointer(@_GlobalMemoryStatusEx), kernel32, 'GlobalMemoryStatusEx');
  Result := _GlobalMemoryStatusEx(lpBuffer);
end;

type
  TBackupSeek = function (hFile: THandle; dwLowBytesToSeek, dwHighBytesToSeek: DWORD;
    out lpdwLowByteSeeked, lpdwHighByteSeeked: DWORD;
    var lpContext: Pointer): BOOL; stdcall;

var
  _BackupSeek: TBackupSeek = nil;

function BackupSeek(hFile: THandle; dwLowBytesToSeek, dwHighBytesToSeek: DWORD;
  out lpdwLowByteSeeked, lpdwHighByteSeeked: DWORD;
  var lpContext: Pointer): BOOL;
begin
  GetProcedureAddress(Pointer(@_BackupSeek), kernel32, 'BackupSeek');
  Result := _BackupSeek(hFile, dwLowBytesToSeek, dwHighBytesToSeek, lpdwLowByteSeeked, lpdwHighByteSeeked, lpContext);
end;

type
  TAdjustTokenPrivileges = function (TokenHandle: THandle; DisableAllPrivileges: BOOL;
    const NewState: TTokenPrivileges; BufferLength: DWORD;
    PreviousState: PTokenPrivileges;
    ReturnLength: PDWORD
    ): BOOL; stdcall;

var
  _AdjustTokenPrivileges: TAdjustTokenPrivileges = nil;

function AdjustTokenPrivileges(TokenHandle: THandle; DisableAllPrivileges: BOOL;
  const NewState: TTokenPrivileges; BufferLength: DWORD;
  PreviousState: PTokenPrivileges;
  ReturnLength: PDWORD
  ): BOOL;
begin
  GetProcedureAddress(Pointer(@_AdjustTokenPrivileges), advapi32, 'AdjustTokenPrivileges');
  Result := _AdjustTokenPrivileges(TokenHandle, DisableAllPrivileges, NewState, BufferLength, PreviousState, ReturnLength);
end;

function CreateMutex(lpMutexAttributes: PSecurityAttributes; bInitialOwner: DWORD; lpName: PChar): THandle; stdcall;
  external kernel32 name 'CreateMutex' + AWSuffix;

function GetVersionEx(var lpVersionInformation: TOSVersionInfoEx): BOOL; stdcall;
  external kernel32 name 'GetVersionEx' + AWSuffix;
function GetVersionEx(lpVersionInformation: POSVersionInfoEx): BOOL; stdcall;
  external kernel32 name 'GetVersionEx' + AWSuffix;

type
  TSetWaitableTimer = function (hTimer: THandle; var lpDueTime: TLargeInteger;
    lPeriod: Longint; pfnCompletionRoutine: TFNTimerAPCRoutine;
    lpArgToCompletionRoutine: Pointer; fResume: BOOL): BOOL; stdcall;

var
  _SetWaitableTimer: TSetWaitableTimer = nil;

function SetWaitableTimer(hTimer: THandle; var lpDueTime: TLargeInteger;
  lPeriod: Longint; pfnCompletionRoutine: TFNTimerAPCRoutine;
  lpArgToCompletionRoutine: Pointer; fResume: BOOL): BOOL;
begin
  GetProcedureAddress(Pointer(@_SetWaitableTimer), kernel32, 'SetWaitableTimer');
  Result := _SetWaitableTimer(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, fResume);
end;

type
  TSetFileSecurityA = function (lpFileName: LPCSTR; SecurityInformation: SECURITY_INFORMATION;
    pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL; stdcall;
var
  _SetFileSecurityA: TSetFileSecurityA = nil;

function SetFileSecurityA(lpFileName: LPCSTR; SecurityInformation: SECURITY_INFORMATION;
  pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL;
begin
  GetProcedureAddress(Pointer(@_SetFileSecurityA), advapi32, 'SetFileSecurityA');
  Result := _SetFileSecurityA(lpFileName, SecurityInformation, pSecurityDescriptor);
end;

type
  TSetFileSecurityW = function (lpFileName: LPCWSTR; SecurityInformation: SECURITY_INFORMATION;
    pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL; stdcall;

var
  _SetFileSecurityW: TSetFileSecurityW = nil;

function SetFileSecurityW(lpFileName: LPCWSTR; SecurityInformation: SECURITY_INFORMATION;
  pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL;
begin
  GetProcedureAddress(Pointer(@_SetFileSecurityW), advapi32, 'SetFileSecurityW');
  Result := _SetFileSecurityW(lpFileName, SecurityInformation, pSecurityDescriptor);
end;

type
  TSetFileSecurity = function (lpFileName: LPCTSTR; SecurityInformation: SECURITY_INFORMATION;
    pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL; stdcall;

var
  _SetFileSecurity: TSetFileSecurity = nil;

function SetFileSecurity(lpFileName: LPCTSTR; SecurityInformation: SECURITY_INFORMATION;
  pSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL;
begin
  GetProcedureAddress(Pointer(@_SetFileSecurity), advapi32, 'SetFileSecurity' + AWSuffix);
  Result := _SetFileSecurity(lpFileName, SecurityInformation, pSecurityDescriptor);
end;

type
  TGetFileSecurityA = function (lpFileName: LPCSTR; RequestedInformation: SECURITY_INFORMATION;
    pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: DWORD;
    var lpnLengthNeeded: DWORD): BOOL; stdcall;

var
  _GetFileSecurityA: TGetFileSecurityA = nil;

function GetFileSecurityA(lpFileName: LPCSTR; RequestedInformation: SECURITY_INFORMATION;
  pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: DWORD;
  var lpnLengthNeeded: DWORD): BOOL;
begin
  GetProcedureAddress(Pointer(@_GetFileSecurityA), advapi32, 'GetFileSecurityA');
  Result := _GetFileSecurityA(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
end;

type
  TGetFileSecurityW = function (lpFileName: LPCWSTR; RequestedInformation: SECURITY_INFORMATION;
    pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: DWORD;
    var lpnLengthNeeded: DWORD): BOOL; stdcall;

var
  _GetFileSecurityW: TGetFileSecurityW = nil;

function GetFileSecurityW(lpFileName: LPCWSTR; RequestedInformation: SECURITY_INFORMATION;
  pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: DWORD;
  var lpnLengthNeeded: DWORD): BOOL;
begin
  GetProcedureAddress(Pointer(@_GetFileSecurityW), advapi32, 'GetFileSecurityW');
  Result := _GetFileSecurityW(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
end;

type
  TGetFileSecurity = function (lpFileName: LPCTSTR; RequestedInformation: SECURITY_INFORMATION;
    pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: DWORD;
    var lpnLengthNeeded: DWORD): BOOL; stdcall;

var
  _GetFileSecurity: TGetFileSecurity = nil;

function GetFileSecurity(lpFileName: LPCTSTR; RequestedInformation: SECURITY_INFORMATION;
  pSecurityDescriptor: PSECURITY_DESCRIPTOR; nLength: DWORD;
  var lpnLengthNeeded: DWORD): BOOL;
begin
  GetProcedureAddress(Pointer(@_GetFileSecurity), advapi32, 'GetFileSecurity' + AWSuffix);
  Result := _GetFileSecurity(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
end;

type
  TSetVolumeMountPointW = function (lpszVolumeMountPoint, lpszVolumeName: LPCWSTR): BOOL; stdcall;

var
  _SetVolumeMountPointW: TSetVolumeMountPointW = nil;

function SetVolumeMountPointW(lpszVolumeMountPoint, lpszVolumeName: LPCWSTR): BOOL;
begin
  GetProcedureAddress(Pointer(@_SetVolumeMountPointW), kernel32, 'SetVolumeMountPointW');
  Result := _SetVolumeMountPointW(lpszVolumeMountPoint, lpszVolumeName);
end;

type
  TDeleteVolumeMountPointW = function (lpszVolumeMountPoint: LPCWSTR): BOOL; stdcall;

var
  _DeleteVolumeMountPointW: TDeleteVolumeMountPointW = nil;

function DeleteVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR): BOOL;
begin
  GetProcedureAddress(Pointer(@_DeleteVolumeMountPointW), kernel32, 'DeleteVolumeMountPointW');
  Result := _DeleteVolumeMountPointW(lpszVolumeMountPoint);
end;

type
  TGetVolumeNameForVolumeMountPointW = function (lpszVolumeMountPoint: LPCWSTR;
  lpszVolumeName: LPWSTR; cchBufferLength: DWORD): BOOL; stdcall;

var
  _GetVolumeNameForVolMountPointW: TGetVolumeNameForVolumeMountPointW = nil;

function GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR;
  lpszVolumeName: LPWSTR; cchBufferLength: DWORD): BOOL;
begin
  GetProcedureAddress(Pointer(@_GetVolumeNameForVolMountPointW), kernel32, 'GetVolumeNameForVolumeMountPointW');
  Result := _GetVolumeNameForVolMountPointW(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
end;

type
  TCopyExtendedContext = function (Destination: PCONTEXT_EX; ContextFlags: DWORD; Source: PCONTEXT_EX): BOOL; stdcall;

var
  _CopyExtendedContext: TCopyExtendedContext = nil;

function CopyExtendedContext(Destination: PCONTEXT_EX; ContextFlags: DWORD; Source: PCONTEXT_EX): BOOL;
begin
  GetProcedureAddress(Pointer(@_CopyExtendedContext), kernel32, 'CopyExtendedContext');
  Result := _CopyExtendedContext(Destination, ContextFlags, Source);
end;

type
  TInitializeExtendedContext = function (Context: Pointer; ContextFlags: DWORD; out ContextEx: PCONTEXT_EX): BOOL; stdcall;

var
  _InitializeExtendedContext: TInitializeExtendedContext = nil;

function InitializeExtendedContext(Context: Pointer; ContextFlags: DWORD; out ContextEx: PCONTEXT_EX): BOOL;
begin
  GetProcedureAddress(Pointer(@_InitializeExtendedContext), kernel32, 'InitializeExtendedContext');
  Result := _InitializeExtendedContext(Context, ContextFlags, ContextEx);
end;

type
  TGetEnabledExtendedFeatures = function (const FeatureMask: Int64): Int64; stdcall;
var
  _GetEnabledExtendedFeatures: TGetEnabledExtendedFeatures = nil;

function GetEnabledExtendedFeatures(const FeatureMask: Int64): Int64;
begin
  GetProcedureAddress(Pointer(@_GetEnabledExtendedFeatures), kernel32, 'GetEnabledExtendedFeatures');
  Result := _GetEnabledExtendedFeatures(FeatureMask);
end;

type
  TGetExtendedContextLength = function (ContextFlags: DWORD; ContextLength: PDWORD): BOOL; stdcall;

var
  _GetExtendedContextLength: TGetExtendedContextLength = nil;

function GetExtendedContextLength(ContextFlags: DWORD; ContextLength: PDWORD): BOOL;
begin
  GetProcedureAddress(Pointer(@_GetExtendedContextLength), kernel32, 'GetExtendedContextLength');
  Result := _GetExtendedContextLength(ContextFlags, ContextLength);
end;

type
  TGetExtendedFeaturesMask = function (ContextEx: PCONTEXT_EX): Int64; stdcall;

var
  _GetExtendedFeaturesMask: TGetExtendedFeaturesMask = nil;

function GetExtendedFeaturesMask(ContextEx: PCONTEXT_EX): Int64;
begin
  GetProcedureAddress(Pointer(@_GetExtendedFeaturesMask), kernel32, 'GetExtendedFeaturesMask');
  Result := _GetExtendedFeaturesMask(ContextEx);
end;

type
  TLocateExtendedFeature = function (ContextEx: PCONTEXT_EX; FeatureId: DWORD; Length: PDWORD): Pointer; stdcall;

var
  _LocateExtendedFeature: TLocateExtendedFeature = nil;

function LocateExtendedFeature(ContextEx: PCONTEXT_EX; FeatureId: DWORD; Length: PDWORD): Pointer;
begin
  GetProcedureAddress(Pointer(@_LocateExtendedFeature), kernel32, 'LocateExtendedFeature');
  Result := _LocateExtendedFeature(ContextEx, FeatureId, Length);
end;

type
  TLocateLegacyContext = function (ContextEx: PCONTEXT_EX; Length: PDWORD): PCONTEXT; stdcall;

var
  _LocateLegacyContext: TLocateLegacyContext = nil;

function LocateLegacyContext(ContextEx: PCONTEXT_EX; Length: PDWORD): PCONTEXT;
begin
  GetProcedureAddress(Pointer(@_LocateLegacyContext), kernel32, 'LocateLegacyContext');
  Result := _LocateLegacyContext(ContextEx, Length);
end;

type
  TSetExtendedFeaturesMask = procedure (ContextEx: PCONTEXT_EX; const FeatureMask: Int64); stdcall;

var
  _SetExtendedFeaturesMask: TSetExtendedFeaturesMask = nil;

procedure SetExtendedFeaturesMask(ContextEx: PCONTEXT_EX; const FeatureMask: Int64);
begin
  GetProcedureAddress(Pointer(@_SetExtendedFeaturesMask), kernel32, 'SetExtendedFeaturesMask');
  _SetExtendedFeaturesMask(ContextEx, FeatureMask);
end;

type
  TProcessIdToSessionId = function (dwProcessId: DWORD; out dwSessionId: DWORD): BOOL; stdcall;

var
  _ProcessIdToSessionId: TProcessIdToSessionId = nil;

function ProcessIdToSessionId(dwProcessId: DWORD; out dwSessionId: DWORD): BOOL;
begin
  GetProcedureAddress(Pointer(@_ProcessIdToSessionId), kernel32, 'ProcessIdToSessionId');
  Result := _ProcessIdToSessionId(dwProcessId, dwSessionId);
end;

{$ENDIF MSWINDOWS}

const
  PowrprofLib = 'PowrProf.dll';
  
type
  TIsPwrSuspendAllowed = function : BOOL; stdcall;

var
  _IsPwrSuspendAllowed: TIsPwrSuspendAllowed = nil;

function IsPwrSuspendAllowed: BOOL;
begin
  GetProcedureAddress(Pointer(@_IsPwrSuspendAllowed), PowrprofLib, 'IsPwrSuspendAllowed');
  Result := _IsPwrSuspendAllowed;
end;

type
  TIsPwrHibernateAllowed = function : BOOL; stdcall;

var
  _IsPwrHibernateAllowed: TIsPwrHibernateAllowed = nil;

function IsPwrHibernateAllowed: BOOL;
begin
  GetProcedureAddress(Pointer(@_IsPwrHibernateAllowed), PowrprofLib, 'IsPwrHibernateAllowed');
  Result := _IsPwrHibernateAllowed;
end;

type
  TIsPwrShutdownAllowed = function : BOOL; stdcall;

var
  _IsPwrShutdownAllowed: TIsPwrShutdownAllowed = nil;

function IsPwrShutdownAllowed: BOOL;
begin
  GetProcedureAddress(Pointer(@_IsPwrShutdownAllowed), PowrprofLib, 'IsPwrShutdownAllowed');
  Result := _IsPwrShutdownAllowed;
end;

type
  TSetSuspendState = function (Hibernate, ForceCritical, DisableWakeEvent: BOOL): BOOL; stdcall;

var
  _SetSuspendState: TSetSuspendState = nil;

function SetSuspendState(Hibernate, ForceCritical, DisableWakeEvent: BOOL): BOOL;
begin
  GetProcedureAddress(Pointer(@_SetSuspendState), PowrprofLib, 'SetSuspendState');
  Result := _SetSuspendState(Hibernate, ForceCritical, DisableWakeEvent);
end;

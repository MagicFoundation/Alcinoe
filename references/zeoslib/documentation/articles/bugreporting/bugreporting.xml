<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "file:/c:/docbook/dtd/docbookx.dtd" [
<!ENTITY % global.entities SYSTEM "file:/c:/docbook/include/global.xml">
<!-- e-novative DocBook environment --><!-- global entities                --><!-- (c) 2002 e-novative GmbH       --><!-- http://www.e-novative.de       --><!ENTITY global_entity "global entity (can be included in every document)">
<!ENTITY % entities SYSTEM "entities.xml">
<!-- >e-novative> DocBook Environment (eDE)                                  --><!-- (c) 2002 e-novative GmbH, Munich, Germany                               --><!-- http://www.e-novative.de                                                --><!-- DocBook entities template                                               --><!-- This file is part of eDE                                                --><!-- eDE is free software; you can redistribute it and/or modify             --><!-- it under the terms of the GNU General Public License as published by    --><!-- the Free Software Foundation; either version 2 of the License, or       --><!-- (at your option) any later version.                                     --><!-- eDE is distributed in the hope that it will be useful,                  --><!-- but WITHOUT ANY WARRANTY; without even the implied warranty of          --><!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           --><!-- GNU General Public License for more details.                            --><!-- You should have received a copy of the GNU General Public License       --><!-- along with eDe; if not, write to the Free Software                   --><!-- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA --><!ENTITY local_entity "local entity (defined per document)">
]>
<article>
  <articleinfo><title>Bug Reporting in ZEOS Library</title>
    <author>
      <firstname>Michael</firstname>
      <surname>Seeger</surname>
    </author>
  <date>2005-06-23</date>
<abstract>
<para>
  <warning>
<para>(By Mark Daems, 29 May 2008) This Article is somewhat outdated as it describes some project organisational structures. (eg. QA group) This structure isn't available anymore. However, most observations concerning what a good bug report is still apply.</para>
</warning>
</para>
  <para>
  The currect bug reporting procedure is absolutely critical to improve
  the quality of ZEOS. It defines steps to fix bugs, to notify the reported
  user about the change and update the test harness to ensure the bug will
  never happen again. Unfortunately in free ware projets it's hard to maintain
  good test coverage. The Bug Report procedure allows to improve the test
  coverage and to increase the stability of the Libary afterward, when the code is
  written and released. It relieves developers because writing tests is partially
  moved to responsibilities of QA group.
  </para>
  </abstract>
  
  </articleinfo>
  <section id="Recommendation"><title>Recommendation to a Bug Report</title>
  <para>
  A "valid" bug report has to contain the following informations:
  </para>
  <itemizedlist>
  <listitem>
  <para>Database server and server version</para>
  </listitem>
  <listitem>
  <para>Version of used components</para>
  </listitem>
  <listitem>
  <para>Name component or class that raised the error</para>
  </listitem>
  <listitem>
  <para>Information about user properties for components and/or classes</para>
  </listitem>
  <listitem>
  <para>Exact description of the error</para>
  </listitem>
  <listitem>
  <para>Sql query and table(s) structure and table(s) data for user specified table(s)</para>
  </listitem>
  </itemizedlist>
  <para>
  If it is necessary and possible the user may be asked for a sample application that
  reproduces the error
  </para>
  
  </section>
  <section id="FixingProcedure"><title>Bug Fixing Proecedure</title>
  <orderedlist numeration="arabic">
  <listitem>
  <para>User submits a bug report on SourceForge Bug Tracker.</para>
  </listitem>
  <listitem>
  <para>
  Elaborate information about the bug and close the bug if it has no sense.
  Notify the user about the action taken and exlain why this was done
  (performed by QA Group)
  </para>
  </listitem>
  <listitem>
  <para>
  Implement a Bug Report Test Case which relicates the problem (performed by
  QA Group)
  </para>
  </listitem>
  <listitem>
  <para>Switch the bug to the responsible developer</para>
  </listitem>
  <listitem>
  <para>
  Fix the bug. Document yor changes in sourcecode, carefully! (performed by
  responsible developer)
  </para>
  </listitem>
  <listitem>
  <para>
  Fill out the bug report e-Form and document your doings, carefully!
  The given Template (bug_report_form.txt has to be saved as <filename>
  BugID.txt</filename> where <filename>ID</filename> means the Bug's
  ID from the SourceForge Bug Tracker.
  </para>
  </listitem>
  <listitem>
  <para>
  Close the bug report and notify the user about the changes done (if possible)
  and mention when it will be officially released (performed by responsible
  developer)
  </para>
  </listitem>
  </orderedlist>
  
  </section>
  <section id="FixingText"><title>Bug Fixing Test</title>
  <para>
  Bug Report Tests is a special category of tests it is obvious that bugs may
  happen in all groups of finctional tests described before. From that p
  erspective Bug Report Tests should repeat the hierarchy of functional tests:
  </para>
  <para>
  <orderedlist numeration="arabic">
  <listitem>
  <para>TZAbstractBugReportTestCase - a base abstract class for Bug Report Tests.</para>
  </listitem>
  <listitem>
  <para>
  TZGenericBugReport, TZPortableSQLBugReport and TZSpecificSQLBugReport - abstract
  classes for "Generic", "SQL Prtable" and "SQL Specific" tests.
  </para>
  </listitem>
  <listitem>
  <para>
  TZCompPortableSQLBugReport, TZCompMySQLBugReport, TZCompInterbaseBugReport,
  TZDbcPortableSQLBugReport, TZDbcMySQLBugReport, TZDbcInterbaseBugReport, etc. -
  specific test cases.
  </para>
  </listitem>
  </orderedlist>
  </para>
  
  <para>
  For Bug Report Test cases we set a convention to name test methodes as "Test" + ID, where
  ID is a unique number of associated bug report in Bug Tracker on SourceForge. That convention
  allows us to do following things:
  </para>
  <para>
  <orderedlist numeration="arabic">
  <listitem>
  <para>Enforce creation of bug repot for each found bug.</para>
  </listitem>
  <listitem>
  <para>Easy navigate between bug reports and related test cases.</para>
  </listitem>
  <listitem>
  <para>
  TZCompPortableSQLBugReport, TZCompMySQLBugReport, TZCompInterbaseBugReport,
  TZDbcPortableSQLBugReport, TZDbcMySQLBugReport, TZDbcInterbaseBugReport, etc. -
  specific test cases.
  </para>
  </listitem>
  </orderedlist>
  </para>
  
  <para>
  During bug fixing developer usually have to run a specific test case many times.
  To speed up the process we added to TZAbstractBugReportTestCase class a convenient
  function called SkipClosed. If SkipClosed property ist set to true for "bugreport"
  category in configuration file, SkipClosed returns true and allows to skip
  completed tests for fixed bugs. It dramatically decreases number of tests to run
  and makes developer's vork much more productive.
  </para>
  
  </section>
  <section id="SampleBRTestCase"><title>Sample Bug Report Testcase</title>
  <para>
  <programlisting>
  UNIT ZTestCompCore;
  &nbsp;
  INTERFACE
  &nbsp;
  {$I ZBugReport.inc}
  &nbsp;
  USES Classed, DB, TestFramework, ZDataset, ZConnection, ZDbcIntfs, ZBugReport,
       ZCompatibility, ZSqlUpdate, ZSqlProcessor;
  &nbsp;
  TYPE ZTestCompCoreBugReport = class (TZPortableSQLBugReportTestCase)
          :
          published
             :
             Procedure Test833197;
             :
       End;
  &nbsp;
  IMPLEMENTATION
  &nbsp;
  :
  &nbsp;
  {** Bugreport #833197:
  Refresh problem with filtered data. }
  &nbsp;
  Procedure ZTestCompCoreBugReport.Test833197;
  Var Connection: TZConnection;
      Query     : TZQuery;
  Begin
     If SkipClosed Then Exit;
     &nbsp;
     Connection       := Self.CreateDatasetConnection;
     Query            := TZQuery.Create (nil);
     Query.Connection := Connection;
     Query.SQL.Text   := 'SELECT * FROM poeple';
     &nbsp;
     Try
        Query.Open;
        Query.Filter   := 'p_name = "Aleksey Petrov"';
        Query.Filtered := True;
        CheckEquals (1, Query.RecordCount);
        Query.Refresh;
        CheckEquals (1, Query.RecordCount);
        Query.Close;
     Finally
        Connection.Free;
        Query.Free;
     End;
  End; // Test833197
  &nbsp;
  :
  &nbsp;
  INITIALIZATION
  &nbsp;
     TestFramework.RegisterTest (ZTestCompCoreBugReort.Suite);
  &nbsp;
  End.
  </programlisting>
  </para>

  </section>
</article>

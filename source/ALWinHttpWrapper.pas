{*************************************************************
www:          http://sourceforge.net/projects/alcinoe/              
Author(s):    Darin Dimitrov (darin_dimitrov@hotmail.com)
Sponsor(s):   Arkadia SA (http://www.arkadia.com)
							
product:      Alcinoe Windows HTTP Services (WinHTTP) API Interface Unit
Version:      3.50

Description:  Microsoft® Windows® HTTP Services (WinHTTP) provides
              developers with a server-supported, high-level interface
              to the HTTP/1.1 Internet protocol. WinHTTP is designed
              to be used primarily in server-based scenarios by server
              applications that communicate with HTTP servers. WinHTTP
              is also designed for use in system services and HTTP-based
              client applications. WinHTTP is more secure and robust than
              WinInet. However, single-user applications that need FTP or
              gopher functionality, cookie persistence, caching, automatic
              credential dialog handling, Internet Explorer compatibility,
              or downlevel platform support should still consider
              using WinInet.

              More info at:
              http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnanchor/html/winhttp.asp


Legal issues: Copyright (C) 1999-2009 by Arkadia Software Engineering

              This software is provided 'as-is', without any express
              or implied warranty.  In no event will the author be
              held liable for any  damages arising from the use of
              this software.

              Permission is granted to anyone to use this software
              for any purpose, including commercial applications,
              and to alter it and redistribute it freely, subject
              to the following restrictions:

              1. The origin of this software must not be
                 misrepresented, you must not claim that you wrote
                 the original software. If you use this software in
                 a product, an acknowledgment in the product
                 documentation would be appreciated but is not
                 required.

              2. Altered source versions must be plainly marked as
                 such, and must not be misrepresented as being the
                 original software.

              3. This notice may not be removed or altered from any
                 source distribution.

              4. You must register this software by sending a picture
                 postcard to the author. Use a nice stamp and mention
                 your name, street address, EMail address and any
                 comment you like to say.

Know bug :

History :

Link :

Please send all your feedback to svanderclock@arkadia.com
**************************************************************}
unit ALWinHttpWrapper;

{$WEAKPACKAGEUNIT}

interface

uses Windows;

{$HPPEMIT '#include <winhttp.h>'}

type
  HINTERNET = Pointer;
  {$EXTERNALSYM HINTERNET}
  PHINTERNET = ^HINTERNET;
  LPHINTERNET = PHINTERNET;
  {$EXTERNALSYM LPHINTERNET}

  INTERNET_PORT = Word;
  {$EXTERNALSYM INTERNET_PORT}

  PInternetScheme = ^TInternetScheme;
  TInternetScheme = Integer;

  PURLComponents = ^URL_COMPONENTS;
  URL_COMPONENTS = record
    dwStructSize: DWORD;        { size of this structure. Used in version check }
    lpszScheme: LPWSTR;         { pointer to scheme name }
    dwSchemeLength: DWORD;      { length of scheme name }
    nScheme: TInternetScheme;    { enumerated scheme type (if known) }
    lpszHostName: LPWSTR;       { pointer to host name }
    dwHostNameLength: DWORD;    { length of host name }
    nPort: INTERNET_PORT;       { converted port number }
    pad: WORD;                  { force correct allignment regardless of comp. flags}
    lpszUserName: LPWSTR;       { pointer to user name }
    dwUserNameLength: DWORD;    { length of user name }
    lpszPassword: LPWSTR;       { pointer to password }
    dwPasswordLength: DWORD;    { length of password }
    lpszUrlPath: LPWSTR;        { pointer to URL-path }
    dwUrlPathLength: DWORD;     { length of URL-path }
    lpszExtraInfo: LPWSTR;      { pointer to extra information (e.g. ?foo or #foo) }
    dwExtraInfoLength: DWORD;   { length of extra information }
  end;

  {$EXTERNALSYM URL_COMPONENTS}
  TURLComponents = URL_COMPONENTS;
  LPURL_COMPONENTS = PURLComponents;
  {$EXTERNALSYM LPURL_COMPONENTS}


  PWINHTTP_PROXY_INFO = ^WINHTTP_PROXY_INFO;
  WINHTTP_PROXY_INFO = record
    dwAccessType: DWORD;
    lpszProxy: LPWSTR;
    lpszProxyBypass: LPWSTR;
  end;
  {$EXTERNALSYM WINHTTP_PROXY_INFO}
  TWINHTTP_PROXY_INFO = WINHTTP_PROXY_INFO;
  LPWINHTTP_PROXY_INFO = PWINHTTP_PROXY_INFO;
  {$EXTERNALSYM LPWINHTTP_PROXY_INFO}

  PWINHTTP_CURRENT_USER_IE_PROXY_CONFIG = ^WINHTTP_CURRENT_USER_IE_PROXY_CONFIG;
  WINHTTP_CURRENT_USER_IE_PROXY_CONFIG = record
    fAutoDetect: BOOL;
    lpszAutoConfigUrl: LPWSTR; 
    lpszProxy: LPWSTR;
    lpszProxyBypass: LPWSTR;
  end;
  {$EXTERNALSYM WINHTTP_PROXY_INFO}
  TWINHTTP_CURRENT_USER_IE_PROXY_CONFIG = WINHTTP_CURRENT_USER_IE_PROXY_CONFIG;
  LPWINHTTP_CURRENT_USER_IE_PROXY_CONFIG = PWINHTTP_CURRENT_USER_IE_PROXY_CONFIG;
  {$EXTERNALSYM LPWINHTTP_CURRENT_USER_IE_PROXY_CONFIG}


const
  INTERNET_DEFAULT_PORT = 0;
  {$EXTERNALSYM INTERNET_DEFAULT_PORT}
  INTERNET_DEFAULT_HTTP_PORT = 80;
  {$EXTERNALSYM INTERNET_DEFAULT_HTTP_PORT}
  INTERNET_DEFAULT_HTTPS_PORT = 443;
  {$EXTERNALSYM INTERNET_DEFAULT_HTTPS_PORT}
  WINHTTP_FLAG_ASYNC = $10000000;
  {$EXTERNALSYM WINHTTP_FLAG_ASYNC}
  WINHTTP_FLAG_SECURE = $00800000;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE}
  WINHTTP_FLAG_ESCAPE_PERCENT = $00000004;
  {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_PERCENT}
  WINHTTP_FLAG_nil_CODEPAGE = $00000008;
  {$EXTERNALSYM WINHTTP_FLAG_nil_CODEPAGE}
  WINHTTP_FLAG_BYPASS_PROXY_CACHE = $00000100;
  {$EXTERNALSYM WINHTTP_FLAG_BYPASS_PROXY_CACHE}
  WINHTTP_FLAG_REFRESH = WINHTTP_FLAG_BYPASS_PROXY_CACHE;
  {$EXTERNALSYM WINHTTP_FLAG_REFRESH}
  WINHTTP_FLAG_ESCAPE_DISABLE = $00000040;
  {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_DISABLE}
  WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = $00000080;
  {$EXTERNALSYM WINHTTP_FLAG_ESCAPE_DISABLE_QUERY}
  SECURITY_FLAG_IGNORE_UNKNOWN_CA = $00000100;
  {$EXTERNALSYM SECURITY_FLAG_IGNORE_UNKNOWN_CA}
  SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = $00002000;
  {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_DATE_INVALID}
  SECURITY_FLAG_IGNORE_CERT_CN_INVALID = $00001000;
  {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_CN_INVALID}
  SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE = $00000200;
  {$EXTERNALSYM SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE}
  INTERNET_SCHEME_HTTP = (1);
  {$EXTERNALSYM INTERNET_SCHEME_HTTP}
  INTERNET_SCHEME_HTTPS = (2);
  {$EXTERNALSYM INTERNET_SCHEME_HTTPS}
  WINHTTP_AUTOPROXY_AUTO_DETECT = $00000001;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_AUTO_DETECT}
  WINHTTP_AUTOPROXY_CONFIG_URL = $00000002;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_CONFIG_URL}
  WINHTTP_AUTOPROXY_RUN_INPROCESS = $00010000;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_RUN_INPROCESS}
  WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY = $00020000;
  {$EXTERNALSYM WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY}
  WINHTTP_AUTO_DETECT_TYPE_DHCP = $00000001;
  {$EXTERNALSYM WINHTTP_AUTO_DETECT_TYPE_DHCP}
  WINHTTP_AUTO_DETECT_TYPE_DNS_A = $00000002;
  {$EXTERNALSYM WINHTTP_AUTO_DETECT_TYPE_DNS_A}
  WINHTTP_TIME_FORMAT_BUFSIZE = 62;
  {$EXTERNALSYM WINHTTP_TIME_FORMAT_BUFSIZE}
  ICU_NO_ENCODE = $20000000;
  {$EXTERNALSYM ICU_NO_ENCODE}
  ICU_DECODE = $10000000;
  {$EXTERNALSYM ICU_DECODE}
  ICU_NO_META = $08000000;
  {$EXTERNALSYM ICU_NO_META}
  ICU_ENCODE_SPACES_ONLY = $04000000;
  {$EXTERNALSYM ICU_ENCODE_SPACES_ONLY}
  ICU_BROWSER_MODE = $02000000;
  {$EXTERNALSYM ICU_BROWSER_MODE}
  ICU_ENCODE_PERCENT = $00001000;
  {$EXTERNALSYM ICU_ENCODE_PERCENT}
  ICU_ESCAPE = $80000000;
  {$EXTERNALSYM ICU_ESCAPE}
  WINHTTP_ACCESS_TYPE_DEFAULT_PROXY = 0;
  {$EXTERNALSYM WINHTTP_ACCESS_TYPE_DEFAULT_PROXY}
  WINHTTP_ACCESS_TYPE_NO_PROXY = 1;
  {$EXTERNALSYM WINHTTP_ACCESS_TYPE_NO_PROXY}
  WINHTTP_ACCESS_TYPE_NAMED_PROXY = 3;
  {$EXTERNALSYM WINHTTP_ACCESS_TYPE_NAMED_PROXY}
  WINHTTP_NO_PROXY_NAME = nil;
  {$EXTERNALSYM WINHTTP_NO_PROXY_NAME}
  WINHTTP_NO_PROXY_BYPASS = nil;
  {$EXTERNALSYM WINHTTP_NO_PROXY_BYPASS}
  WINHTTP_OPTION_CALLBACK = 1;
  {$EXTERNALSYM WINHTTP_OPTION_CALLBACK}
  WINHTTP_FIRST_OPTION = WINHTTP_OPTION_CALLBACK;
  {$EXTERNALSYM WINHTTP_FIRST_OPTION}
  WINHTTP_OPTION_RESOLVE_TIMEOUT = 2;
  {$EXTERNALSYM WINHTTP_OPTION_RESOLVE_TIMEOUT}
  WINHTTP_OPTION_CONNECT_TIMEOUT = 3;
  {$EXTERNALSYM WINHTTP_OPTION_CONNECT_TIMEOUT}
  WINHTTP_OPTION_CONNECT_RETRIES = 4;
  {$EXTERNALSYM WINHTTP_OPTION_CONNECT_RETRIES}
  WINHTTP_OPTION_SEND_TIMEOUT = 5;
  {$EXTERNALSYM WINHTTP_OPTION_SEND_TIMEOUT}
  WINHTTP_OPTION_RECEIVE_TIMEOUT = 6;
  {$EXTERNALSYM WINHTTP_OPTION_RECEIVE_TIMEOUT}
  WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT = 7;
  {$EXTERNALSYM WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT}
  WINHTTP_OPTION_HANDLE_TYPE = 9;
  {$EXTERNALSYM WINHTTP_OPTION_HANDLE_TYPE}
  WINHTTP_OPTION_READ_BUFFER_SIZE = 12;
  {$EXTERNALSYM WINHTTP_OPTION_READ_BUFFER_SIZE}
  WINHTTP_OPTION_WRITE_BUFFER_SIZE = 13;
  {$EXTERNALSYM WINHTTP_OPTION_WRITE_BUFFER_SIZE}
  WINHTTP_OPTION_PARENT_HANDLE = 21;
  {$EXTERNALSYM WINHTTP_OPTION_PARENT_HANDLE}
  WINHTTP_OPTION_EXTENDED_ERROR = 24;
  {$EXTERNALSYM WINHTTP_OPTION_EXTENDED_ERROR}
  WINHTTP_OPTION_SECURITY_FLAGS = 31;
  {$EXTERNALSYM WINHTTP_OPTION_SECURITY_FLAGS}
  WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT = 32;
  {$EXTERNALSYM WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT}
  WINHTTP_OPTION_URL = 34;
  {$EXTERNALSYM WINHTTP_OPTION_URL}
  WINHTTP_OPTION_SECURITY_KEY_BITNESS = 36;
  {$EXTERNALSYM WINHTTP_OPTION_SECURITY_KEY_BITNESS}
  WINHTTP_OPTION_PROXY = 38;
  {$EXTERNALSYM WINHTTP_OPTION_PROXY}
  WINHTTP_OPTION_USER_AGENT = 41;
  {$EXTERNALSYM WINHTTP_OPTION_USER_AGENT}
  WINHTTP_OPTION_CONTEXT_VALUE = 45;
  {$EXTERNALSYM WINHTTP_OPTION_CONTEXT_VALUE}
  WINHTTP_OPTION_CLIENT_CERT_CONTEXT = 47;
  {$EXTERNALSYM WINHTTP_OPTION_CLIENT_CERT_CONTEXT}
  WINHTTP_OPTION_REQUEST_PRIORITY = 58;
  {$EXTERNALSYM WINHTTP_OPTION_REQUEST_PRIORITY}
  WINHTTP_OPTION_HTTP_VERSION = 59;
  {$EXTERNALSYM WINHTTP_OPTION_HTTP_VERSION}
  WINHTTP_OPTION_DISABLE_FEATURE = 63;
  {$EXTERNALSYM WINHTTP_OPTION_DISABLE_FEATURE}
  WINHTTP_OPTION_CODEPAGE = 68;
  {$EXTERNALSYM WINHTTP_OPTION_CODEPAGE}
  WINHTTP_OPTION_MAX_CONNS_PER_SERVER = 73;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_CONNS_PER_SERVER}
  WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER = 74;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER}
  WINHTTP_OPTION_AUTOLOGON_POLICY = 77;
  {$EXTERNALSYM WINHTTP_OPTION_AUTOLOGON_POLICY}
  WINHTTP_OPTION_SERVER_CERT_CONTEXT = 78;
  {$EXTERNALSYM WINHTTP_OPTION_SERVER_CERT_CONTEXT}
  WINHTTP_OPTION_ENABLE_FEATURE = 79;
  {$EXTERNALSYM WINHTTP_OPTION_ENABLE_FEATURE}
  WINHTTP_OPTION_WORKER_THREAD_COUNT = 80;
  {$EXTERNALSYM WINHTTP_OPTION_WORKER_THREAD_COUNT}
  WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT = 81;
  {$EXTERNALSYM WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT}
  WINHTTP_OPTION_PASSPORT_COBRANDING_URL = 82;
  {$EXTERNALSYM WINHTTP_OPTION_PASSPORT_COBRANDING_URL}
  WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH = 83;
  {$EXTERNALSYM WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH}
  WINHTTP_OPTION_SECURE_PROTOCOLS = 84;
  {$EXTERNALSYM WINHTTP_OPTION_SECURE_PROTOCOLS}
  WINHTTP_OPTION_ENABLETRACING = 85;
  {$EXTERNALSYM WINHTTP_OPTION_ENABLETRACING}
  WINHTTP_OPTION_PASSPORT_SIGN_OUT = 86;
  {$EXTERNALSYM WINHTTP_OPTION_PASSPORT_SIGN_OUT}
  WINHTTP_OPTION_PASSPORT_RETURN_URL = 87;
  {$EXTERNALSYM WINHTTP_OPTION_PASSPORT_RETURN_URL}
  WINHTTP_OPTION_REDIRECT_POLICY = 88;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY}
  WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS = 89;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS}
  WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE = 90;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE}
  WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE = 91;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE}
  WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE = 92;
  {$EXTERNALSYM WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE}
  WINHTTP_LAST_OPTION = WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE;
  {$EXTERNALSYM WINHTTP_LAST_OPTION}
  WINHTTP_OPTION_USERNAME = $1000;
  {$EXTERNALSYM WINHTTP_OPTION_USERNAME}
  WINHTTP_OPTION_PASSWORD = $1001;
  {$EXTERNALSYM WINHTTP_OPTION_PASSWORD}
  WINHTTP_OPTION_PROXY_USERNAME = $1002;
  {$EXTERNALSYM WINHTTP_OPTION_PROXY_USERNAME}
  WINHTTP_OPTION_PROXY_PASSWORD = $1003;
  {$EXTERNALSYM WINHTTP_OPTION_PROXY_PASSWORD}
  WINHTTP_CONNS_PER_SERVER_UNLIMITED = $FFFFFFFF;
  {$EXTERNALSYM WINHTTP_CONNS_PER_SERVER_UNLIMITED}
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM = 0;
  {$EXTERNALSYM WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM}
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW = 1;
  {$EXTERNALSYM WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW}
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH = 2;
  {$EXTERNALSYM WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH}
  WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT = WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM;
  {$EXTERNALSYM WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT}
  WINHTTP_OPTION_REDIRECT_POLICY_NEVER = 0;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_NEVER}
  WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP = 1;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP}
  WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS = 2;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS}
  WINHTTP_OPTION_REDIRECT_POLICY_LAST = WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_LAST}
  WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT = WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP;
  {$EXTERNALSYM WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT}
  WINHTTP_DISABLE_PASSPORT_AUTH = $00000000;
  {$EXTERNALSYM WINHTTP_DISABLE_PASSPORT_AUTH}
  WINHTTP_ENABLE_PASSPORT_AUTH = $10000000;
  {$EXTERNALSYM WINHTTP_ENABLE_PASSPORT_AUTH}
  WINHTTP_DISABLE_PASSPORT_KEYRING = $20000000;
  {$EXTERNALSYM WINHTTP_DISABLE_PASSPORT_KEYRING}
  WINHTTP_ENABLE_PASSPORT_KEYRING = $40000000;
  {$EXTERNALSYM WINHTTP_ENABLE_PASSPORT_KEYRING}
  WINHTTP_DISABLE_COOKIES = $00000001;
  {$EXTERNALSYM WINHTTP_DISABLE_COOKIES}
  WINHTTP_DISABLE_REDIRECTS = $00000002;
  {$EXTERNALSYM WINHTTP_DISABLE_REDIRECTS}
  WINHTTP_DISABLE_AUTHENTICATION = $00000004;
  {$EXTERNALSYM WINHTTP_DISABLE_AUTHENTICATION}
  WINHTTP_DISABLE_KEEP_ALIVE = $00000008;
  {$EXTERNALSYM WINHTTP_DISABLE_KEEP_ALIVE}
  WINHTTP_ENABLE_SSL_REVOCATION = $00000001;
  {$EXTERNALSYM WINHTTP_ENABLE_SSL_REVOCATION}
  WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION = $00000002;
  {$EXTERNALSYM WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION}
  WINHTTP_HANDLE_TYPE_SESSION = 1;
  {$EXTERNALSYM WINHTTP_HANDLE_TYPE_SESSION}
  WINHTTP_HANDLE_TYPE_CONNECT = 2;
  {$EXTERNALSYM WINHTTP_HANDLE_TYPE_CONNECT}
  WINHTTP_HANDLE_TYPE_REQUEST = 3;
  {$EXTERNALSYM WINHTTP_HANDLE_TYPE_REQUEST}
  WINHTTP_AUTH_SCHEME_BASIC = $00000001;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_BASIC}
  WINHTTP_AUTH_SCHEME_NTLM = $00000002;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_NTLM}
  WINHTTP_AUTH_SCHEME_PASSPORT = $00000004;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_PASSPORT}
  WINHTTP_AUTH_SCHEME_DIGEST = $00000008;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_DIGEST}
  WINHTTP_AUTH_SCHEME_NEGOTIATE = $00000010;
  {$EXTERNALSYM WINHTTP_AUTH_SCHEME_NEGOTIATE}
  WINHTTP_AUTH_TARGET_SERVER = $00000000;
  {$EXTERNALSYM WINHTTP_AUTH_TARGET_SERVER}
  WINHTTP_AUTH_TARGET_PROXY = $00000001;
  {$EXTERNALSYM WINHTTP_AUTH_TARGET_PROXY}
  SECURITY_FLAG_SECURE = $00000001;
  {$EXTERNALSYM SECURITY_FLAG_SECURE}
  SECURITY_FLAG_STRENGTH_WEAK = $10000000;
  {$EXTERNALSYM SECURITY_FLAG_STRENGTH_WEAK}
  SECURITY_FLAG_STRENGTH_MEDIUM = $40000000;
  {$EXTERNALSYM SECURITY_FLAG_STRENGTH_MEDIUM}
  SECURITY_FLAG_STRENGTH_STRONG = $20000000;
  {$EXTERNALSYM SECURITY_FLAG_STRENGTH_STRONG}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED = $00000001;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED}
  WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT = $00000002;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED = $00000004;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED}
  WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA = $00000008;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID = $00000010;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID = $00000020;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID}
  WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE = $00000040;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE}
  WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR = $80000000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR}
  WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 = $00000008;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_SSL2}
  WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 = $00000020;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_SSL3}
  WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 = $00000080;
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_TLS1}
  WINHTTP_FLAG_SECURE_PROTOCOL_ALL = (WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 + WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 + WINHTTP_FLAG_SECURE_PROTOCOL_TLS1);
  {$EXTERNALSYM WINHTTP_FLAG_SECURE_PROTOCOL_ALL}
  WINHTTP_CALLBACK_STATUS_RESOLVING_NAME = $00000001;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_RESOLVING_NAME}
  WINHTTP_CALLBACK_STATUS_NAME_RESOLVED = $00000002;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_NAME_RESOLVED}
  WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER = $00000004;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER}
  WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER = $00000008;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER}
  WINHTTP_CALLBACK_STATUS_SENDING_REQUEST = $00000010;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_SENDING_REQUEST}
  WINHTTP_CALLBACK_STATUS_REQUEST_SENT = $00000020;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_REQUEST_SENT}
  WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE = $00000040;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE}
  WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED = $00000080;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED}
  WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION = $00000100;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION}
  WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED = $00000200;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED}
  WINHTTP_CALLBACK_STATUS_HANDLE_CREATED = $00000400;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_HANDLE_CREATED}
  WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING = $00000800;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING}
  WINHTTP_CALLBACK_STATUS_DETECTING_PROXY = $00001000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_DETECTING_PROXY}
  WINHTTP_CALLBACK_STATUS_REDIRECT = $00004000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_REDIRECT}
  WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE = $00008000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE}
  WINHTTP_CALLBACK_STATUS_SECURE_FAILURE = $00010000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_SECURE_FAILURE}
  WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE = $00020000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE}
  WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE = $00040000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE}
  WINHTTP_CALLBACK_STATUS_READ_COMPLETE = $00080000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_READ_COMPLETE}
  WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE = $00100000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE}
  WINHTTP_CALLBACK_STATUS_REQUEST_ERROR = $00200000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_REQUEST_ERROR}
  WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE = $00400000;
  {$EXTERNALSYM WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE}
  API_RECEIVE_RESPONSE = (1);
  {$EXTERNALSYM API_RECEIVE_RESPONSE}
  API_QUERY_DATA_AVAILABLE = (2);
  {$EXTERNALSYM API_QUERY_DATA_AVAILABLE}
  API_READ_DATA = (3);
  {$EXTERNALSYM API_READ_DATA}
  API_WRITE_DATA = (4);
  {$EXTERNALSYM API_WRITE_DATA}
  API_SEND_REQUEST = (5);
  {$EXTERNALSYM API_SEND_REQUEST}
  WINHTTP_CALLBACK_FLAG_RESOLVE_NAME = (WINHTTP_CALLBACK_STATUS_RESOLVING_NAME + WINHTTP_CALLBACK_STATUS_NAME_RESOLVED);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_RESOLVE_NAME}
  WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER = (WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER + WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_CONNECT_TO_SERVER}
  WINHTTP_CALLBACK_FLAG_SEND_REQUEST = (WINHTTP_CALLBACK_STATUS_SENDING_REQUEST + WINHTTP_CALLBACK_STATUS_REQUEST_SENT);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_SEND_REQUEST}
  WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE = (WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE + WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_RECEIVE_RESPONSE}
  WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION = (WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION + WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_CLOSE_CONNECTION}
  WINHTTP_CALLBACK_FLAG_HANDLES = (WINHTTP_CALLBACK_STATUS_HANDLE_CREATED + WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_HANDLES}
  WINHTTP_CALLBACK_FLAG_DETECTING_PROXY = WINHTTP_CALLBACK_STATUS_DETECTING_PROXY;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_DETECTING_PROXY}
  WINHTTP_CALLBACK_FLAG_REDIRECT = WINHTTP_CALLBACK_STATUS_REDIRECT;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_REDIRECT}
  WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE = WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE}
  WINHTTP_CALLBACK_FLAG_SECURE_FAILURE = WINHTTP_CALLBACK_STATUS_SECURE_FAILURE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_SECURE_FAILURE}
  WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE = WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE}
  WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE = WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE}
  WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE = WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE}
  WINHTTP_CALLBACK_FLAG_READ_COMPLETE = WINHTTP_CALLBACK_STATUS_READ_COMPLETE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_READ_COMPLETE}
  WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE = WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE}
  WINHTTP_CALLBACK_FLAG_REQUEST_ERROR = WINHTTP_CALLBACK_STATUS_REQUEST_ERROR;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_REQUEST_ERROR}
  WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS = (WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE + WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE + WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE + WINHTTP_CALLBACK_STATUS_READ_COMPLETE + WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE + WINHTTP_CALLBACK_STATUS_REQUEST_ERROR);
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_ALL_COMPLETIONS}
  WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS = $ffffffff;
  {$EXTERNALSYM WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS}
  WINHTTP_INVALID_STATUS_CALLBACK = (-1);
  {$EXTERNALSYM WINHTTP_INVALID_STATUS_CALLBACK}
  WINHTTP_QUERY_MIME_VERSION = 0;
  {$EXTERNALSYM WINHTTP_QUERY_MIME_VERSION}
  WINHTTP_QUERY_CONTENT_TYPE = 1;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_TYPE}
  WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING}
  WINHTTP_QUERY_CONTENT_ID = 3;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_ID}
  WINHTTP_QUERY_CONTENT_DESCRIPTION = 4;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_DESCRIPTION}
  WINHTTP_QUERY_CONTENT_LENGTH = 5;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_LENGTH}
  WINHTTP_QUERY_CONTENT_LANGUAGE = 6;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_LANGUAGE}
  WINHTTP_QUERY_ALLOW = 7;
  {$EXTERNALSYM WINHTTP_QUERY_ALLOW}
  WINHTTP_QUERY_PUBLIC = 8;
  {$EXTERNALSYM WINHTTP_QUERY_PUBLIC}
  WINHTTP_QUERY_DATE = 9;
  {$EXTERNALSYM WINHTTP_QUERY_DATE}
  WINHTTP_QUERY_EXPIRES = 10;
  {$EXTERNALSYM WINHTTP_QUERY_EXPIRES}
  WINHTTP_QUERY_LAST_MODIFIED = 11;
  {$EXTERNALSYM WINHTTP_QUERY_LAST_MODIFIED}
  WINHTTP_QUERY_MESSAGE_ID = 12;
  {$EXTERNALSYM WINHTTP_QUERY_MESSAGE_ID}
  WINHTTP_QUERY_URI = 13;
  {$EXTERNALSYM WINHTTP_QUERY_URI}
  WINHTTP_QUERY_DERIVED_FROM = 14;
  {$EXTERNALSYM WINHTTP_QUERY_DERIVED_FROM}
  WINHTTP_QUERY_COST = 15;
  {$EXTERNALSYM WINHTTP_QUERY_COST}
  WINHTTP_QUERY_LINK = 16;
  {$EXTERNALSYM WINHTTP_QUERY_LINK}
  WINHTTP_QUERY_PRAGMA = 17;
  {$EXTERNALSYM WINHTTP_QUERY_PRAGMA}
  WINHTTP_QUERY_VERSION = 18;
  {$EXTERNALSYM WINHTTP_QUERY_VERSION}
  WINHTTP_QUERY_STATUS_CODE = 19;
  {$EXTERNALSYM WINHTTP_QUERY_STATUS_CODE}
  WINHTTP_QUERY_STATUS_TEXT = 20;
  {$EXTERNALSYM WINHTTP_QUERY_STATUS_TEXT}
  WINHTTP_QUERY_RAW_HEADERS = 21;
  {$EXTERNALSYM WINHTTP_QUERY_RAW_HEADERS}
  WINHTTP_QUERY_RAW_HEADERS_CRLF = 22;
  {$EXTERNALSYM WINHTTP_QUERY_RAW_HEADERS_CRLF}
  WINHTTP_QUERY_CONNECTION = 23;
  {$EXTERNALSYM WINHTTP_QUERY_CONNECTION}
  WINHTTP_QUERY_ACCEPT = 24;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT}
  WINHTTP_QUERY_ACCEPT_CHARSET = 25;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_CHARSET}
  WINHTTP_QUERY_ACCEPT_ENCODING = 26;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_ENCODING}
  WINHTTP_QUERY_ACCEPT_LANGUAGE = 27;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_LANGUAGE}
  WINHTTP_QUERY_AUTHORIZATION = 28;
  {$EXTERNALSYM WINHTTP_QUERY_AUTHORIZATION}
  WINHTTP_QUERY_CONTENT_ENCODING = 29;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_ENCODING}
  WINHTTP_QUERY_FORWARDED = 30;
  {$EXTERNALSYM WINHTTP_QUERY_FORWARDED}
  WINHTTP_QUERY_FROM = 31;
  {$EXTERNALSYM WINHTTP_QUERY_FROM}
  WINHTTP_QUERY_IF_MODIFIED_SINCE = 32;
  {$EXTERNALSYM WINHTTP_QUERY_IF_MODIFIED_SINCE}
  WINHTTP_QUERY_LOCATION = 33;
  {$EXTERNALSYM WINHTTP_QUERY_LOCATION}
  WINHTTP_QUERY_ORIG_URI = 34;
  {$EXTERNALSYM WINHTTP_QUERY_ORIG_URI}
  WINHTTP_QUERY_REFERER = 35;
  {$EXTERNALSYM WINHTTP_QUERY_REFERER}
  WINHTTP_QUERY_RETRY_AFTER = 36;
  {$EXTERNALSYM WINHTTP_QUERY_RETRY_AFTER}
  WINHTTP_QUERY_SERVER = 37;
  {$EXTERNALSYM WINHTTP_QUERY_SERVER}
  WINHTTP_QUERY_TITLE = 38;
  {$EXTERNALSYM WINHTTP_QUERY_TITLE}
  WINHTTP_QUERY_USER_AGENT = 39;
  {$EXTERNALSYM WINHTTP_QUERY_USER_AGENT}
  WINHTTP_QUERY_WWW_AUTHENTICATE = 40;
  {$EXTERNALSYM WINHTTP_QUERY_WWW_AUTHENTICATE}
  WINHTTP_QUERY_PROXY_AUTHENTICATE = 41;
  {$EXTERNALSYM WINHTTP_QUERY_PROXY_AUTHENTICATE}
  WINHTTP_QUERY_ACCEPT_RANGES = 42;
  {$EXTERNALSYM WINHTTP_QUERY_ACCEPT_RANGES}
  WINHTTP_QUERY_SET_COOKIE = 43;
  {$EXTERNALSYM WINHTTP_QUERY_SET_COOKIE}
  WINHTTP_QUERY_COOKIE = 44;
  {$EXTERNALSYM WINHTTP_QUERY_COOKIE}
  WINHTTP_QUERY_REQUEST_METHOD = 45;
  {$EXTERNALSYM WINHTTP_QUERY_REQUEST_METHOD}
  WINHTTP_QUERY_REFRESH = 46;
  {$EXTERNALSYM WINHTTP_QUERY_REFRESH}
  WINHTTP_QUERY_CONTENT_DISPOSITION = 47;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_DISPOSITION}
  WINHTTP_QUERY_AGE = 48;
  {$EXTERNALSYM WINHTTP_QUERY_AGE}
  WINHTTP_QUERY_CACHE_CONTROL = 49;
  {$EXTERNALSYM WINHTTP_QUERY_CACHE_CONTROL}
  WINHTTP_QUERY_CONTENT_BASE = 50;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_BASE}
  WINHTTP_QUERY_CONTENT_LOCATION = 51;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_LOCATION}
  WINHTTP_QUERY_CONTENT_MD5 = 52;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_MD5}
  WINHTTP_QUERY_CONTENT_RANGE = 53;
  {$EXTERNALSYM WINHTTP_QUERY_CONTENT_RANGE}
  WINHTTP_QUERY_ETAG = 54;
  {$EXTERNALSYM WINHTTP_QUERY_ETAG}
  WINHTTP_QUERY_HOST = 55;
  {$EXTERNALSYM WINHTTP_QUERY_HOST}
  WINHTTP_QUERY_IF_MATCH = 56;
  {$EXTERNALSYM WINHTTP_QUERY_IF_MATCH}
  WINHTTP_QUERY_IF_NONE_MATCH = 57;
  {$EXTERNALSYM WINHTTP_QUERY_IF_NONE_MATCH}
  WINHTTP_QUERY_IF_RANGE = 58;
  {$EXTERNALSYM WINHTTP_QUERY_IF_RANGE}
  WINHTTP_QUERY_IF_UNMODIFIED_SINCE = 59;
  {$EXTERNALSYM WINHTTP_QUERY_IF_UNMODIFIED_SINCE}
  WINHTTP_QUERY_MAX_FORWARDS = 60;
  {$EXTERNALSYM WINHTTP_QUERY_MAX_FORWARDS}
  WINHTTP_QUERY_PROXY_AUTHORIZATION = 61;
  {$EXTERNALSYM WINHTTP_QUERY_PROXY_AUTHORIZATION}
  WINHTTP_QUERY_RANGE = 62;
  {$EXTERNALSYM WINHTTP_QUERY_RANGE}
  WINHTTP_QUERY_TRANSFER_ENCODING = 63;
  {$EXTERNALSYM WINHTTP_QUERY_TRANSFER_ENCODING}
  WINHTTP_QUERY_UPGRADE = 64;
  {$EXTERNALSYM WINHTTP_QUERY_UPGRADE}
  WINHTTP_QUERY_VARY = 65;
  {$EXTERNALSYM WINHTTP_QUERY_VARY}
  WINHTTP_QUERY_VIA = 66;
  {$EXTERNALSYM WINHTTP_QUERY_VIA}
  WINHTTP_QUERY_WARNING = 67;
  {$EXTERNALSYM WINHTTP_QUERY_WARNING}
  WINHTTP_QUERY_EXPECT = 68;
  {$EXTERNALSYM WINHTTP_QUERY_EXPECT}
  WINHTTP_QUERY_PROXY_CONNECTION = 69;
  {$EXTERNALSYM WINHTTP_QUERY_PROXY_CONNECTION}
  WINHTTP_QUERY_UNLESS_MODIFIED_SINCE = 70;
  {$EXTERNALSYM WINHTTP_QUERY_UNLESS_MODIFIED_SINCE}
  WINHTTP_QUERY_PROXY_SUPPORT = 75;
  {$EXTERNALSYM WINHTTP_QUERY_PROXY_SUPPORT}
  WINHTTP_QUERY_AUTHENTICATION_INFO = 76;
  {$EXTERNALSYM WINHTTP_QUERY_AUTHENTICATION_INFO}
  WINHTTP_QUERY_PASSPORT_URLS = 77;
  {$EXTERNALSYM WINHTTP_QUERY_PASSPORT_URLS}
  WINHTTP_QUERY_PASSPORT_CONFIG = 78;
  {$EXTERNALSYM WINHTTP_QUERY_PASSPORT_CONFIG}
  WINHTTP_QUERY_MAX = 78;
  {$EXTERNALSYM WINHTTP_QUERY_MAX}
  WINHTTP_QUERY_CUSTOM = 65535;
  {$EXTERNALSYM WINHTTP_QUERY_CUSTOM}
  WINHTTP_QUERY_FLAG_REQUEST_HEADERS = $80000000;
  {$EXTERNALSYM WINHTTP_QUERY_FLAG_REQUEST_HEADERS}
  WINHTTP_QUERY_FLAG_SYSTEMTIME = $40000000;
  {$EXTERNALSYM WINHTTP_QUERY_FLAG_SYSTEMTIME}
  WINHTTP_QUERY_FLAG_NUMBER = $20000000;
  {$EXTERNALSYM WINHTTP_QUERY_FLAG_NUMBER}
  HTTP_STATUS_CONTINUE = 100;
  {$EXTERNALSYM HTTP_STATUS_CONTINUE}
  HTTP_STATUS_SWITCH_PROTOCOLS = 101;
  {$EXTERNALSYM HTTP_STATUS_SWITCH_PROTOCOLS}
  HTTP_STATUS_OK = 200;
  {$EXTERNALSYM HTTP_STATUS_OK}
  HTTP_STATUS_CREATED = 201;
  {$EXTERNALSYM HTTP_STATUS_CREATED}
  HTTP_STATUS_ACCEPTED = 202;
  {$EXTERNALSYM HTTP_STATUS_ACCEPTED}
  HTTP_STATUS_PARTIAL = 203;
  {$EXTERNALSYM HTTP_STATUS_PARTIAL}
  HTTP_STATUS_NO_CONTENT = 204;
  {$EXTERNALSYM HTTP_STATUS_NO_CONTENT}
  HTTP_STATUS_RESET_CONTENT = 205;
  {$EXTERNALSYM HTTP_STATUS_RESET_CONTENT}
  HTTP_STATUS_PARTIAL_CONTENT = 206;
  {$EXTERNALSYM HTTP_STATUS_PARTIAL_CONTENT}
  HTTP_STATUS_WEBDAV_MULTI_STATUS = 207;
  {$EXTERNALSYM HTTP_STATUS_WEBDAV_MULTI_STATUS}
  HTTP_STATUS_AMBIGUOUS = 300;
  {$EXTERNALSYM HTTP_STATUS_AMBIGUOUS}
  HTTP_STATUS_MOVED = 301;
  {$EXTERNALSYM HTTP_STATUS_MOVED}
  HTTP_STATUS_REDIRECT = 302;
  {$EXTERNALSYM HTTP_STATUS_REDIRECT}
  HTTP_STATUS_REDIRECT_METHOD = 303;
  {$EXTERNALSYM HTTP_STATUS_REDIRECT_METHOD}
  HTTP_STATUS_NOT_MODIFIED = 304;
  {$EXTERNALSYM HTTP_STATUS_NOT_MODIFIED}
  HTTP_STATUS_USE_PROXY = 305;
  {$EXTERNALSYM HTTP_STATUS_USE_PROXY}
  HTTP_STATUS_REDIRECT_KEEP_VERB = 307;
  {$EXTERNALSYM HTTP_STATUS_REDIRECT_KEEP_VERB}
  HTTP_STATUS_BAD_REQUEST = 400;
  {$EXTERNALSYM HTTP_STATUS_BAD_REQUEST}
  HTTP_STATUS_DENIED = 401;
  {$EXTERNALSYM HTTP_STATUS_DENIED}
  HTTP_STATUS_PAYMENT_REQ = 402;
  {$EXTERNALSYM HTTP_STATUS_PAYMENT_REQ}
  HTTP_STATUS_FORBIDDEN = 403;
  {$EXTERNALSYM HTTP_STATUS_FORBIDDEN}
  HTTP_STATUS_NOT_FOUND = 404;
  {$EXTERNALSYM HTTP_STATUS_NOT_FOUND}
  HTTP_STATUS_BAD_METHOD = 405;
  {$EXTERNALSYM HTTP_STATUS_BAD_METHOD}
  HTTP_STATUS_NONE_ACCEPTABLE = 406;
  {$EXTERNALSYM HTTP_STATUS_NONE_ACCEPTABLE}
  HTTP_STATUS_PROXY_AUTH_REQ = 407;
  {$EXTERNALSYM HTTP_STATUS_PROXY_AUTH_REQ}
  HTTP_STATUS_REQUEST_TIMEOUT = 408;
  {$EXTERNALSYM HTTP_STATUS_REQUEST_TIMEOUT}
  HTTP_STATUS_CONFLICT = 409;
  {$EXTERNALSYM HTTP_STATUS_CONFLICT}
  HTTP_STATUS_GONE = 410;
  {$EXTERNALSYM HTTP_STATUS_GONE}
  HTTP_STATUS_LENGTH_REQUIRED = 411;
  {$EXTERNALSYM HTTP_STATUS_LENGTH_REQUIRED}
  HTTP_STATUS_PRECOND_FAILED = 412;
  {$EXTERNALSYM HTTP_STATUS_PRECOND_FAILED}
  HTTP_STATUS_REQUEST_TOO_LARGE = 413;
  {$EXTERNALSYM HTTP_STATUS_REQUEST_TOO_LARGE}
  HTTP_STATUS_URI_TOO_LONG = 414;
  {$EXTERNALSYM HTTP_STATUS_URI_TOO_LONG}
  HTTP_STATUS_UNSUPPORTED_MEDIA = 415;
  {$EXTERNALSYM HTTP_STATUS_UNSUPPORTED_MEDIA}
  HTTP_STATUS_RETRY_WITH = 449;
  {$EXTERNALSYM HTTP_STATUS_RETRY_WITH}
  HTTP_STATUS_SERVER_ERROR = 500;
  {$EXTERNALSYM HTTP_STATUS_SERVER_ERROR}
  HTTP_STATUS_NOT_SUPPORTED = 501;
  {$EXTERNALSYM HTTP_STATUS_NOT_SUPPORTED}
  HTTP_STATUS_BAD_GATEWAY = 502;
  {$EXTERNALSYM HTTP_STATUS_BAD_GATEWAY}
  HTTP_STATUS_SERVICE_UNAVAIL = 503;
  {$EXTERNALSYM HTTP_STATUS_SERVICE_UNAVAIL}
  HTTP_STATUS_GATEWAY_TIMEOUT = 504;
  {$EXTERNALSYM HTTP_STATUS_GATEWAY_TIMEOUT}
  HTTP_STATUS_VERSION_NOT_SUP = 505;
  {$EXTERNALSYM HTTP_STATUS_VERSION_NOT_SUP}
  HTTP_STATUS_FIRST = HTTP_STATUS_CONTINUE;
  {$EXTERNALSYM HTTP_STATUS_FIRST}
  HTTP_STATUS_LAST = HTTP_STATUS_VERSION_NOT_SUP;
  {$EXTERNALSYM HTTP_STATUS_LAST}
  WINHTTP_NO_REFERER = nil;
  {$EXTERNALSYM WINHTTP_NO_REFERER}
  WINHTTP_DEFAULT_ACCEPT_TYPES = nil;
  {$EXTERNALSYM WINHTTP_DEFAULT_ACCEPT_TYPES}
  WINHTTP_ADDREQ_INDEX_MASK = $0000FFFF;
  {$EXTERNALSYM WINHTTP_ADDREQ_INDEX_MASK}
  WINHTTP_ADDREQ_FLAGS_MASK = $FFFF0000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAGS_MASK}
  WINHTTP_ADDREQ_FLAG_ADD_IF_NEW = $10000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_ADD_IF_NEW}
  WINHTTP_ADDREQ_FLAG_ADD = $20000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_ADD}
  WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = $40000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA}
  WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = $01000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON}
  WINHTTP_ADDREQ_FLAG_COALESCE = WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_COALESCE}
  WINHTTP_ADDREQ_FLAG_REPLACE = $80000000;
  {$EXTERNALSYM WINHTTP_ADDREQ_FLAG_REPLACE}
  WINHTTP_NO_ADDITIONAL_HEADERS = nil;
  {$EXTERNALSYM WINHTTP_NO_ADDITIONAL_HEADERS}
  WINHTTP_NO_REQUEST_DATA = nil;
  {$EXTERNALSYM WINHTTP_NO_REQUEST_DATA}
  WINHTTP_HEADER_NAME_BY_INDEX = nil;
  {$EXTERNALSYM WINHTTP_HEADER_NAME_BY_INDEX}
  WINHTTP_NO_OUTPUT_BUFFER = nil;
  {$EXTERNALSYM WINHTTP_NO_OUTPUT_BUFFER}
  WINHTTP_NO_HEADER_INDEX = nil;
  {$EXTERNALSYM WINHTTP_NO_HEADER_INDEX}
  WINHTTP_ERROR_BASE = 12000;
  {$EXTERNALSYM WINHTTP_ERROR_BASE}
  ERROR_WINHTTP_OUT_OF_HANDLES = (WINHTTP_ERROR_BASE + 1);
  {$EXTERNALSYM ERROR_WINHTTP_OUT_OF_HANDLES}
  ERROR_WINHTTP_TIMEOUT = (WINHTTP_ERROR_BASE + 2);
  {$EXTERNALSYM ERROR_WINHTTP_TIMEOUT}
  ERROR_WINHTTP_INTERNAL_ERROR = (WINHTTP_ERROR_BASE + 4);
  {$EXTERNALSYM ERROR_WINHTTP_INTERNAL_ERROR}
  ERROR_WINHTTP_INVALID_URL = (WINHTTP_ERROR_BASE + 5);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_URL}
  ERROR_WINHTTP_UNRECOGNIZED_SCHEME = (WINHTTP_ERROR_BASE + 6);
  {$EXTERNALSYM ERROR_WINHTTP_UNRECOGNIZED_SCHEME}
  ERROR_WINHTTP_NAME_NOT_RESOLVED = (WINHTTP_ERROR_BASE + 7);
  {$EXTERNALSYM ERROR_WINHTTP_NAME_NOT_RESOLVED}
  ERROR_WINHTTP_INVALID_OPTION = (WINHTTP_ERROR_BASE + 9);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_OPTION}
  ERROR_WINHTTP_OPTION_NOT_SETTABLE = (WINHTTP_ERROR_BASE + 11);
  {$EXTERNALSYM ERROR_WINHTTP_OPTION_NOT_SETTABLE}
  ERROR_WINHTTP_SHUTDOWN = (WINHTTP_ERROR_BASE + 12);
  {$EXTERNALSYM ERROR_WINHTTP_SHUTDOWN}
  ERROR_WINHTTP_LOGIN_FAILURE = (WINHTTP_ERROR_BASE + 15);
  {$EXTERNALSYM ERROR_WINHTTP_LOGIN_FAILURE}
  ERROR_WINHTTP_OPERATION_CANCELLED = (WINHTTP_ERROR_BASE + 17);
  {$EXTERNALSYM ERROR_WINHTTP_OPERATION_CANCELLED}
  ERROR_WINHTTP_INCORRECT_HANDLE_TYPE = (WINHTTP_ERROR_BASE + 18);
  {$EXTERNALSYM ERROR_WINHTTP_INCORRECT_HANDLE_TYPE}
  ERROR_WINHTTP_INCORRECT_HANDLE_STATE = (WINHTTP_ERROR_BASE + 19);
  {$EXTERNALSYM ERROR_WINHTTP_INCORRECT_HANDLE_STATE}
  ERROR_WINHTTP_CANNOT_CONNECT = (WINHTTP_ERROR_BASE + 29);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CONNECT}
  ERROR_WINHTTP_CONNECTION_ERROR = (WINHTTP_ERROR_BASE + 30);
  {$EXTERNALSYM ERROR_WINHTTP_CONNECTION_ERROR}
  ERROR_WINHTTP_RESEND_REQUEST = (WINHTTP_ERROR_BASE + 32);
  {$EXTERNALSYM ERROR_WINHTTP_RESEND_REQUEST}
  ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED = (WINHTTP_ERROR_BASE + 44);
  {$EXTERNALSYM ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED}
  ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN	= (WINHTTP_ERROR_BASE + 100);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN	=}
  ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND	= (WINHTTP_ERROR_BASE + 101);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND	=}
  ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND = (WINHTTP_ERROR_BASE + 102);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND}
  ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN = (WINHTTP_ERROR_BASE + 103);
  {$EXTERNALSYM ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN}
  ERROR_WINHTTP_HEADER_NOT_FOUND = (WINHTTP_ERROR_BASE + 150);
  {$EXTERNALSYM ERROR_WINHTTP_HEADER_NOT_FOUND}
  ERROR_WINHTTP_INVALID_SERVER_RESPONSE = (WINHTTP_ERROR_BASE + 152);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_SERVER_RESPONSE}
  ERROR_WINHTTP_INVALID_QUERY_REQUEST = (WINHTTP_ERROR_BASE + 154);
  {$EXTERNALSYM ERROR_WINHTTP_INVALID_QUERY_REQUEST}
  ERROR_WINHTTP_HEADER_ALREADY_EXISTS = (WINHTTP_ERROR_BASE + 155);
  {$EXTERNALSYM ERROR_WINHTTP_HEADER_ALREADY_EXISTS}
  ERROR_WINHTTP_REDIRECT_FAILED = (WINHTTP_ERROR_BASE + 156);
  {$EXTERNALSYM ERROR_WINHTTP_REDIRECT_FAILED}
  ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR = (WINHTTP_ERROR_BASE + 178);
  {$EXTERNALSYM ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR}
  ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT = (WINHTTP_ERROR_BASE + 166);
  {$EXTERNALSYM ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT}
  ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT = (WINHTTP_ERROR_BASE + 167);
  {$EXTERNALSYM ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT}
  ERROR_WINHTTP_NOT_INITIALIZED = (WINHTTP_ERROR_BASE + 172);
  {$EXTERNALSYM ERROR_WINHTTP_NOT_INITIALIZED}
  ERROR_WINHTTP_SECURE_FAILURE = (WINHTTP_ERROR_BASE + 175);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_FAILURE}
  ERROR_WINHTTP_SECURE_CERT_DATE_INVALID = (WINHTTP_ERROR_BASE + 37);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_DATE_INVALID}
  ERROR_WINHTTP_SECURE_CERT_CN_INVALID = (WINHTTP_ERROR_BASE + 38);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_CN_INVALID}
  ERROR_WINHTTP_SECURE_INVALID_CA = (WINHTTP_ERROR_BASE + 45);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_INVALID_CA}
  ERROR_WINHTTP_SECURE_CERT_REV_FAILED = (WINHTTP_ERROR_BASE + 57);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_REV_FAILED}
  ERROR_WINHTTP_SECURE_CHANNEL_ERROR = (WINHTTP_ERROR_BASE + 157);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CHANNEL_ERROR}
  ERROR_WINHTTP_SECURE_INVALID_CERT = (WINHTTP_ERROR_BASE + 169);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_INVALID_CERT}
  ERROR_WINHTTP_SECURE_CERT_REVOKED = (WINHTTP_ERROR_BASE + 170);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_REVOKED}
  ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE = (WINHTTP_ERROR_BASE + 179);
  {$EXTERNALSYM ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE}
  ERROR_WINHTTP_AUTODETECTION_FAILED = (WINHTTP_ERROR_BASE + 180);
  {$EXTERNALSYM ERROR_WINHTTP_AUTODETECTION_FAILED}
  ERROR_WINHTTP_HEADER_COUNT_EXCEEDED = (WINHTTP_ERROR_BASE + 181);
  {$EXTERNALSYM ERROR_WINHTTP_HEADER_COUNT_EXCEEDED}
  ERROR_WINHTTP_HEADER_SIZE_OVERFLOW = (WINHTTP_ERROR_BASE + 182);
  {$EXTERNALSYM ERROR_WINHTTP_HEADER_SIZE_OVERFLOW}
  ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW = (WINHTTP_ERROR_BASE + 183);
  {$EXTERNALSYM ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW}
  ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW = (WINHTTP_ERROR_BASE + 184);
  {$EXTERNALSYM ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW}
  WINHTTP_ERROR_LAST = (WINHTTP_ERROR_BASE + 184);
  {$EXTERNALSYM WINHTTP_ERROR_LAST}
  WINHTTP_FLAG_NULL_CODEPAGE = $00000008;
  {$EXTERNALSYM WINHTTP_FLAG_NULL_CODEPAGE}

{ prototypes }

function WinHttpQueryOption(hInet: HINTERNET; dwOption: DWORD;
  lpBuffer: Pointer; var lpdwBufferLength: DWORD): BOOL; stdcall;
  {$EXTERNALSYM WinHttpQueryOption}

function WinHttpSetOption(hInet: HINTERNET; dwOption: DWORD;
  lpBuffer: Pointer; dwBufferLength: DWORD): BOOL; stdcall;
  {$EXTERNALSYM WinHttpSetOption}

function WinHttpAddRequestHeaders(hRequest: HINTERNET;
  pwszHeaders: PWideChar; dwHeadersLength: DWORD;
  dwModifiers: DWORD): BOOL; stdcall;
  {$EXTERNALSYM WinHttpAddRequestHeaders}

function WinHttpCrackUrl(pwszUrl: PWideChar;
  dwUrlLength, dwFlags: DWORD;
  var lpUrlComponents: TURLComponents): BOOL; stdcall;
  {$EXTERNALSYM WinHttpCrackUrl}

function WinHttpCreateUrl(var lpUrlComponents: TURLComponents;
  dwFlags: DWORD; pwszUrl: PWideChar;
  var lpdwUrlLength: DWORD): BOOL; stdcall;
  {$EXTERNALSYM WinHttpCreateUrl}

function WinHttpDetectAutoProxyConfigUrl(dwAutoDetectFlags: DWORD;
  var ppwszAutoConfigUrl: LPWSTR): BOOL; stdcall;
  {$EXTERNALSYM WinHttpDetectAutoProxyConfigUrl}

function WinHttpGetDefaultProxyConfiguration(
  var pProxyInfo: TWINHTTP_PROXY_INFO): BOOL; stdcall;
  {$EXTERNALSYM WinHttpGetDefaultProxyConfiguration}

function WinHttpGetIEProxyConfigForCurrentUser(
  var pProxyInfo: TWINHTTP_CURRENT_USER_IE_PROXY_CONFIG): BOOL; stdcall;
  {$EXTERNALSYM WinHttpGetIEProxyConfigForCurrentUser}

function WinHttpCheckPlatform: BOOL; stdcall;
  {$EXTERNALSYM WinHttpCheckPlatform}

function WinHttpOpen(pwszUserAgent: PWideChar; dwAccessType: DWORD;
  pwszProxyName, pwszProxyBypass: PWideChar; dwFlags: DWORD): HINTERNET; stdcall;
  {$EXTERNALSYM WinHttpOpen}

function WinHttpSetTimeouts(hInternet: HINTERNET; dwResolveTimeout: Integer;
  dwConnectTimeout: Integer; dwSendTimeout: Integer;
  dwReceiveTimeout: Integer): BOOL; stdcall;
  {$EXTERNALSYM WinHttpSetTimeouts}

function WinHttpConnect(hSession: HINTERNET; pswzServerName: PWideChar;
  nServerPort: INTERNET_PORT; dwReserved: DWORD): HINTERNET; stdcall;
  {$EXTERNALSYM WinHttpConnect}

function WinHttpOpenRequest(hConnect: HINTERNET; pwszVerb: PWideChar;
  pwszObjectName: PWideChar; pwszVersion: PWideChar; pwszReferer: PWideChar;
  ppwszAcceptTypes: PLPWSTR; dwFlags: DWORD): HINTERNET; stdcall;
  {$EXTERNALSYM WinHttpOpenRequest}

function WinHttpQueryAuthSchemes(hRequest: HINTERNET;
  var lpdwSupportedSchemes: DWORD; var lpdwFirstScheme: DWORD;
  var pdwAuthTarget: DWORD): BOOL; stdcall;
  {$EXTERNALSYM WinHttpQueryAuthSchemes}

function WinHttpSetCredentials(hRequest: HINTERNET;
  AuthTargets: DWORD; AuthScheme: DWORD; pwszUserName: PWideChar;
  pwszPassword: PWideChar; pAuthParams: Pointer): BOOL; stdcall;
  {$EXTERNALSYM WinHttpSetCredentials}

function WinHttpSendRequest(hRequest: HINTERNET; pwszHeaders: PWideChar;
  dwHeadersLength: DWORD; lpOptional: Pointer;
  dwOptionalLength: DWORD; dwTotalLength: DWORD;
  dwContext: DWORD): BOOL; stdcall;
  {$EXTERNALSYM WinHttpSendRequest}

function WinHttpWriteData(hRequest: HINTERNET; lpBuffer: Pointer;
  dwNumberOfBytesToWrite: DWORD; var lpdwNumberOfBytesWritten: DWORD): BOOL; stdcall;
  {$EXTERNALSYM WinHttpWriteData}

function WinHttpReceiveResponse(hRequest: HINTERNET;
  lpReserved: Pointer): BOOL; stdcall;
  {$EXTERNALSYM WinHttpReceiveResponse}

function WinHttpQueryHeaders(hRequest: HINTERNET;
  dwInfoLevel: DWORD; pwszName: PWideChar; lpBuffer: Pointer;
  var lpdwBufferLength: DWORD; lpdwIndex: Pointer): BOOL; stdcall;
  {$EXTERNALSYM WinHttpQueryHeaders}

function WinHttpQueryDataAvailable(hRequest: HINTERNET;
  var lpdwNumberOfBytesAvailable: DWORD): BOOL; stdcall;

function WinHttpReadData(hRequest: HINTERNET; lpBuffer: Pointer;
  dwNumberOfBytesToRead: DWORD; var lpdwNumberOfBytesRead: DWORD): BOOL; stdcall;
  {$EXTERNALSYM WinHttpReadData}

function WinHttpCloseHandle(hInternet: HINTERNET): BOOL; stdcall;
  {$EXTERNALSYM WinHttpCloseHandle}


{ callback function for InternetSetStatusCallback }
type

  WINHTTP_STATUS_CALLBACK = TFarProc;

  {$EXTERNALSYM WINHTTP_STATUS_CALLBACK}
  TFNWinHttpStatusCallback = WINHTTP_STATUS_CALLBACK;
  PFNWinHttpStatusCallback = ^TFNWinHttpStatusCallback;
  LPWINHTTP_STATUS_CALLBACK = PFNWinHttpStatusCallback;
  {$EXTERNALSYM LPWINHTTP_STATUS_CALLBACK}


function WinHttpSetStatusCallback(hInternet: HINTERNET;
  lpfnInternetCallback: PFNWinHttpStatusCallback; dwNotificationFlags: Dword; dwReserved: DWORD): PFNWinHttpStatusCallback; stdcall;
  {$EXTERNALSYM WinHttpSetStatusCallback}

implementation

const
  winhttpdll = 'winhttp.dll';

function WinHttpQueryOption;                    external winhttpdll name 'WinHttpQueryOption';
function WinHttpSetOption;                      external winhttpdll name 'WinHttpSetOption';
function WinHttpAddRequestHeaders;              external winhttpdll name 'WinHttpAddRequestHeaders';
function WinHttpCrackUrl;                       external winhttpdll name 'WinHttpCrackUrl';
function WinHttpCreateUrl;                      external winhttpdll name 'WinHttpCreateUrl';
function WinHttpDetectAutoProxyConfigUrl;       external winhttpdll name 'WinHttpDetectAutoProxyConfigUrl';
function WinHttpGetDefaultProxyConfiguration;   external winhttpdll name 'WinHttpGetDefaultProxyConfiguration';
function WinHttpGetIEProxyConfigForCurrentUser; external winhttpdll name 'WinHttpGetIEProxyConfigForCurrentUser';
function WinHttpCheckPlatform;                  external winhttpdll name 'WinHttpCheckPlatform';
function WinHttpOpen;                           external winhttpdll name 'WinHttpOpen';
function WinHttpSetTimeouts;                    external winhttpdll name 'WinHttpSetTimeouts';
function WinHttpConnect;                        external winhttpdll name 'WinHttpConnect';
function WinHttpOpenRequest;                    external winhttpdll name 'WinHttpOpenRequest';
function WinHttpQueryAuthSchemes;               external winhttpdll name 'WinHttpQueryAuthSchemes';
function WinHttpSetCredentials;                 external winhttpdll name 'WinHttpSetCredentials';
function WinHttpSendRequest;                    external winhttpdll name 'WinHttpSendRequest';
function WinHttpWriteData;                      external winhttpdll name 'WinHttpWriteData';
function WinHttpReceiveResponse;                external winhttpdll name 'WinHttpReceiveResponse';
function WinHttpQueryHeaders;                   external winhttpdll name 'WinHttpQueryHeaders';
function WinHttpQueryDataAvailable;             external winhttpdll name 'WinHttpQueryDataAvailable';
function WinHttpReadData;                       external winhttpdll name 'WinHttpReadData';
function WinHttpCloseHandle;                    external winhttpdll name 'WinHttpCloseHandle';
function WinHttpSetStatusCallback;              external winhttpdll name 'WinHttpSetStatusCallback';

end.
